$Id$
/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-12 Bradley M. Bell

CppAD is distributed under multiple licenses. This distribution is under
the terms of the 
                    Eclipse Public License Version 1.0.

A copy of this license is included in the COPYING file of this distribution.
Please visit http://www.coin-or.org/CppAD/ for information on other licenses.
-------------------------------------------------------------------------- */

$begin ForwardZero$$
$spell
	std::cout
	ostream
	const
	Taylor
	dy
	Jacobian
$$
$index Forward, order zero$$
$index zero, order Forward$$
$index order, zero Forward$$

$section Zero Order Forward Mode: Function Values$$

$head Syntax$$
$icode%y% = %f%.Forward(0, %x%)
%$$
$icode%y% = %f%.Forward(x, %x%, %s%)%$$

$head Purpose$$
We use $latex F : B^n \rightarrow B^m$$ to denote the
$cref/AD function/glossary/AD Function/$$ corresponding to $icode f$$.
The result of the syntax above is
$latex \[
	y = F(x)
\] $$
(See the $cref/FunCheck discussion/FunCheck/Discussion/$$ for
possible differences between $latex F(x)$$ and the algorithm that defined
the operation sequence.)

$head f$$
The object $icode f$$ has prototype
$codei%
	ADFun<%Base%> %f%
%$$
Note that the $cref ADFun$$ object $icode f$$ is not $code const$$.
After this call to $code Forward$$, the value returned by
$codei%
	%f%.size_taylor()
%$$
will be equal to one (see $cref size_taylor$$).

$head x$$
The argument $icode x$$ has prototype
$codei%
	const %Vector%& %x%
%$$
(see $cref/Vector/ForwardZero/Vector/$$ below)
and its size 
must be equal to $icode n$$, the dimension of the
$cref/domain/seq_property/Domain/$$ space for $icode f$$.

$head s$$
If the argument $icode s$$ is not present, $code std::cout$$
is used in its place.
Otherwise, this argument has prototype
$codei%
	std::ostream& %s%
%$$
It specifies where the output corresponding to $cref PrintFor$$,
and this zero order forward mode call, will be written.

$head y$$
The result $icode y$$ has prototype
$codei%
	%Vector% %y%
%$$
(see $cref/Vector/ForwardZero/Vector/$$ below)
and its value is $latex F(x)$$.
The size of $icode y$$ 
is equal to $icode m$$, the dimension of the
$cref/range/seq_property/Range/$$ space for $icode f$$.

$head Vector$$
The type $icode Vector$$ must be a $cref SimpleVector$$ class with
$cref/elements of type/SimpleVector/Elements of Specified Type/$$
$icode Base$$.
The routine $cref CheckSimpleVector$$ will generate an error message
if this is not the case.

$head Example$$
The file
$cref forward.cpp$$
contains an example and test of this operation.
It returns true if it succeeds and false otherwise.

$end
---------------------------------------------------------------------------
$begin ForwardOne$$
$spell
	dy
	Jacobian
	Taylor
	const
$$

$section First Order Forward Mode: Derivative Values$$

$index Forward, order one$$
$index one, order Forward$$
$index order, one Forward$$


$head Syntax$$
$icode%dy% = %f%.Forward(1, %dx%)
%$$
$icode%dy% = %f%.Forward(1, %dx%, %s%)
%$$


$head Purpose$$
We use $latex F : B^n \rightarrow B^m$$ to denote the
$cref/AD function/glossary/AD Function/$$ corresponding to $icode f$$.
The result of the syntax above is
$latex \[
	dy = F^{(1)} (x) * dx
\] $$
where $latex F^{(1)} (x)$$ is the Jacobian of $latex F$$ 
evaluated at $latex x$$.

$head f$$
The object $icode f$$ has prototype
$codei%
	ADFun<%Base%> %f%
%$$
Note that the $cref ADFun$$ object $icode f$$ is not $code const$$.
Before this call to $code Forward$$, the value returned by
$codei%
	%f%.size_taylor()
%$$
must be greater than or equal one.
After this call it will be will be two (see $cref size_taylor$$).

$head x$$
The vector $icode x$$ in expression for $icode dy$$ above
corresponds to the previous call to $cref ForwardZero$$
using this ADFun object $icode f$$; i.e.,
$codei%
	%f%.Forward(0, %x%)
%$$
If there is no previous call with the first argument zero,
the value of the $cref/independent/Independent/$$ variables 
during the recording of the AD sequence of operations is used
for $icode x$$.

$head dx$$
The argument $icode dx$$ has prototype
$codei%
	const %Vector%& %x%
%$$
(see $cref/Vector/ForwardOne/Vector/$$ below)
and its size 
must be equal to $icode n$$, the dimension of the
$cref/domain/seq_property/Domain/$$ space for $icode f$$.

$head s$$
The argument $icode s$$, if present, is not used during this operation.

$head dy$$
The result $icode dy$$ has prototype
$codei%
	%Vector% %dy%
%$$
(see $cref/Vector/ForwardOne/Vector/$$ below)
and its value is $latex F^{(1)} (x) * dx$$.
The size of $icode dy$$ 
is equal to $icode m$$, the dimension of the
$cref/range/seq_property/Range/$$ space for $icode f$$.

$head Vector$$
The type $icode Vector$$ must be a $cref SimpleVector$$ class with
$cref/elements of type/SimpleVector/Elements of Specified Type/$$
$icode Base$$.
The routine $cref CheckSimpleVector$$ will generate an error message
if this is not the case.

$head Example$$
The file
$cref forward.cpp$$
contains an example and test of this operation.
It returns true if it succeeds and false otherwise.

$end
--------------------------------------------------------------------------
$begin ForwardAny$$
$spell
	std::cout
	ostream
	xk
	xp
	yp
	Ind
	vp
	uj
	Taylor
	const
	dy
$$

$section Any Order Forward Mode$$ 

$index forward, mode$$
$index mode, forward$$
$index derivative, forward mode$$
$index calculate, forward mode$$

$head Syntax$$
$icode%y_p% = %f%.Forward(%p%, %x_p% )
%$$
$icode%y_p% = %f%.Forward(%p%, %x_p%, %s%)
%$$


$head Purpose$$
We use $latex F : B^n \rightarrow B^m$$ to denote the
$cref/AD function/glossary/AD Function/$$ corresponding to $icode f$$.
Given a function $latex X : B \rightarrow B^n$$,
defined by its 
$cref/Taylor coefficients/glossary/Taylor Coefficient/$$,
forward mode computes the Taylor coefficients for the function 
$latex \[
	Y (t) = F [ X(t) ]
\]$$

$subhead Function Values$$
If you are using forward mode to compute values for $latex F(x)$$,
$cref ForwardZero$$ is simpler to understand
than this explanation of the general case.

$subhead Derivative Values$$
If you are using forward mode to compute values for $latex F^{(1)} (x) * dx$$,
$cref ForwardOne$$ is simpler to understand
than this explanation of the general case.

$head X(t)$$
The function
$latex X : B \rightarrow B^n$$ is defined using
a sequence of Taylor coefficients $latex x^{(k)} \in B^n$$:
$latex \[
	X(t) = x^{(0)} + x^{(1)} * t + \cdots + x^{(p)} * t^p 
\] $$ 
For $latex k = 0, \ldots , p$$,
the vector $latex x^{(k)}$$ above is defined as the value of 
$icode x_k$$ in the previous call (counting this call) of the form
$codei%
	%f%.Forward(%k%, %x_k%)
%$$ 
If there is no previous call with $latex k = 0$$,
$latex x^{(0)}$$ is the value of the independent variables when the 
corresponding 
AD of $icode Base$$
$cref/operation sequence/glossary/Operation/Sequence/$$ was recorded.
Note that 
$latex x^{(k)}$$ is related to the $th k$$ derivative of $latex X(t)$$ by
$latex \[
	x^{(k)} = \frac{1}{k !} X^{(k)} (0) 
\] $$

$head Y(t)$$
The function
$latex Y : B \rightarrow B^m$$ is defined by
$latex Y(t) = F[ X(t) ] $$.
We use $latex y^{(k)} \in B^m$$ 
to denote the $th k$$ order Taylor coefficient of $latex Y(t)$$; i.e.,
$latex \[
	Y(t) = y^{(0)} + y^{(1)} * t + \cdots, + y^{(p)} * t^p + o( t^p ) 
\] $$ 
where $latex o( t^p ) * t^{-p} \rightarrow 0$$ 
as $latex t \rightarrow 0$$.
Note that $latex y^{(k)}$$ is related to 
the $th k$$ derivative of $latex Y(t)$$ by
$latex \[
	y^{(k)} = \frac{1}{k !} Y^{(k)} (0) 
\] $$


$head f$$
The $cref ADFun$$ object $icode f$$ has prototype
$codei%
	ADFun<%Base%> %f%
%$$
Note that the $cref ADFun$$ object $icode f$$ is not $code const$$.
Before this call to $code Forward$$, the value returned by
$codei%
	%f%.size_taylor()
%$$
must be greater than or equal $latex p$$.
After this call it will be will be $latex p+1$$ (see $cref size_taylor$$).

$head p$$
The argument $icode p$$ has prototype
$codei%
	size_t %p%
%$$
and specifies the order of the Taylor coefficients to be calculated.

$head x_p$$
The argument $icode x_p$$ has prototype
$codei%
	const %Vector%& %x_p%
%$$
(see $cref/Vector/ForwardAny/Vector/$$ below)
and its size 
must be equal to $icode n$$, the dimension of the
$cref/domain/seq_property/Domain/$$ space for $icode f$$.
The $th p$$ order Taylor coefficient for $latex X(t)$$ 
is defined by this value; i.e., $latex x^{(p)} = x\_p$$.
(The lower order Taylor coefficients for $latex X(t)$$ are
defined by previous calls to $code Forward$$.)

$head s$$
If the argument $icode s$$ is not present, $code std::cout$$
is used in its place.
Otherwise, this argument has prototype
$codei%
	std::ostream& %s%
%$$
If $icode%p% == 0%$$,
$icode s$$ specifies where the output corresponding to $cref PrintFor$$
will be written.
If $icode%p% != 0%$$, $icode s$$ is not used.

$head y_p$$
The return value $icode y_p$$ has prototype
$codei%
	%Vector% %y_p%
%$$
(see $cref/Vector/ForwardAny/Vector/$$ below)
and its value is 
The $th p$$ order Taylor coefficient for $latex Y(t)$$; i.e.,
$latex y^{(p)} = y\_p$$. 
The size of $icode y_p$$ 
is equal to $icode m$$, the dimension of the
$cref/range/seq_property/Range/$$ space for $icode f$$.

$head Vector$$
The type $icode Vector$$ must be a $cref SimpleVector$$ class with
$cref/elements of type/SimpleVector/Elements of Specified Type/$$
$icode Base$$.
The routine $cref CheckSimpleVector$$ will generate an error message
if this is not the case.

$head Zero Order$$
In the case where $latex p = 0$$,
the result $icode y_p$$ is given by
$latex \[
\begin{array}{rcl}
y^{(0)} & = & (F \circ X) ( 0 ) \\
	& = & F[ x^{(0)} ]
\end{array}
\] $$
The agrees with the simplification where
$latex p$$, 
$latex x^{(0)}$$, and 
$latex y^{(0)}$$ above are replaced by
$code 0$$, 
$icode x$$, and 
$icode y$$ 
in $cref ForwardZero$$.

$head First Order$$
In the case where $latex p = 1$$,
the result $icode y_p$$ is given by
$latex \[
\begin{array}{rcl}
y^{(1)} & = & (F \circ X)^{(1)} ( 0 ) \\
	& = & F^{(1)} [ X(0) ] *  X^{(1)} (0) \\
	& = & F^{(1)} ( x^{(0)} ) *  x^{(1)}
\end{array}
\] $$
The agrees with the simplification where 
$latex p$$, 
$latex x^{(0)}$$, 
$latex x^{(1)}$$, and 
$latex y^{(1)}$$ above are replaced by
$code 1$$, 
$icode x$$, 
$icode dx$$, and 
$icode dy$$ 
in $cref ForwardOne$$.
$pre

$$
Note that if $latex x^{(1)}$$ is the $th j$$ 
$cref/elementary vector/glossary/Elementary Vector/$$
$latex \[
y^{(1)} = \D{F}{x_j} ( x^{(0)} ) 
\] $$

$head Second Order$$
In the case where $latex p = 2$$,
the $th i$$ element of 
the result $icode y_p$$ is given by
$latex \[
\begin{array}{rcl}
y_i^{(2)} 
& = & \frac{1}{2} (F_i \circ X)^{(2)} ( 0 ) 
\\
& = & \frac{1}{2} \left[ F_i^{(1)} [ X(0) ] * X^{(2)} (0) 
  + X^{(1)} (0)^T * F_i^{(2)} [ X(0) ] * X^{(1)} (0) \right]
\\
& = & \frac{1}{2}  \left[
	2 * F_i^{(1)} ( x^{(0)} ) * x^{(2)}
	+
	( x^{(1)} )^T * F_i^{(2)} ( x^{(0)} ) * x^{(1)}
\right  ]
\end{array}
\] $$
Note that if $latex x^{(1)}$$ is the $th j$$ 
$cref/elementary vector/glossary/Elementary Vector/$$
and $latex x^{(2)}$$ is zero,
$latex \[
\begin{array}{rcl}
	\DD{F_i}{x_j}{x_j} ( x^{(0)} ) = 2 y_i^{(2)} 
\end{array}
\] $$
If $latex x^{(1)}$$ is the sum of the $th j$$ and $th l$$ 
$cref/elementary vectors/glossary/Elementary Vector/$$
and $latex x^{(2)}$$ is zero,
$latex \[
\begin{array}{rcl}
	y_i^{(2)} 
	& = & \frac{1}{2} \left[
		\DD{F_i}{x_j}{x_j} ( x^{(0)} )
		+
		\DD{F_i}{x_j}{x_\ell} ( x^{(0)} )
		+
		\DD{F_i}{x_\ell}{x_j} ( x^{(0)} )
		+
		\DD{F_i}{x_\ell}{x_\ell} ( x^{(0)} )
	\right]
	\\
	\DD{F_i}{x_\ell}{x_j} ( x^{(0)} )
	& = & 
	y_i^{(2)} 
	-
	\frac{1}{2} \DD{F_i}{x_j}{x_j} ( x^{(0)} )
	-
	\frac{1}{2} \DD{F_i}{x_\ell}{x_\ell} ( x^{(0)} )
\end{array} 
\] $$

$head Example$$
The file
$cref forward.cpp$$
contains an example and test of this operation.
It returns true if it succeeds and false otherwise.

$end
-----------------------------------------------------------------------------
$begin size_taylor$$
$spell
	var
	Taylor
	const
$$

$section Number Taylor Coefficients, Per Variable, Currently Stored$$

$head Syntax$$
$icode%s% = %f%.size_taylor()%$$

$subhead See Also$$
$cref seq_property$$

$head Purpose$$
Determine the number of Taylor coefficients, per variable,
currently calculated and stored in the ADFun object $icode f$$. 
See the discussion under 
$cref/Constructor/size_taylor/Constructor/$$,
$cref/Forward/size_taylor/Forward/$$, and
$cref/capacity_taylor/size_taylor/capacity_taylor/$$
for a description of when this value can change.


$head f$$
The object $icode f$$ has prototype
$codei%
	const ADFun<%Base%> %f%
%$$

$head s$$
The result $icode s$$ has prototype
$codei%
	size_t %s%
%$$
and is the number of Taylor coefficients, 
per variable in the AD operation sequence,
currently calculated and stored in the ADFun object $icode f$$.

$head Constructor$$
Directly after the $cref FunConstruct$$ syntax
$codei%
	ADFun<%Base%> %f%(%x%, %y%)
%$$
the value of $icode s$$ returned by $code size_taylor$$ is one.
This is because
there is an implicit call to $code Forward$$ that computes
the zero order Taylor coefficients during this constructor.

$head Forward$$
After a call to $cref/Forward/ForwardAny/$$ with the syntax
$codei%
        %f%.Forward(%p%, %x_p%)
%$$
the value of $icode s$$ returned by $code size_taylor$$ 
would be $latex p + 1$$.
The call to $code Forward$$ above
uses the lower order Taylor coefficients to compute and store 
the $th p$$ order Taylor coefficients for all
the variables in the operation sequence corresponding to $icode f$$.
Thus there are $latex p + 1$$ (order zero through $icode p$$)
Taylor coefficients per variable.
(You can determine the number of variables in the operation sequence
using the $cref/size_var/seq_property/size_var/$$ function.)

$head capacity_taylor$$
If the number of Taylor coefficients
currently stored in $icode f$$ is less than or equal $icode c$$, 
a call to $cref capacity_taylor$$ with the syntax
$codei%
	%f%.capacity_taylor(%c%)
%$$
does not affect the value $icode s$$ returned by $code size_taylor$$.
Otherwise,
the value $icode s$$ returned by $code size_taylor$$
is equal to $icode c$$
(only Taylor coefficients of order zero through $latex c-1$$ 
have been retained).

$head Example$$
The file
$cref forward.cpp$$
contains an example and test of this operation.
It returns true if it succeeds and false otherwise.

$end
-----------------------------------------------------------------------------
$begin CompareChange$$
$spell 
	const
$$

$section Comparison Changes During Zero Order Forward Mode$$

$index ADFun, CompareChange$$
$index CompareChange, ADFun$$
$index zero, order forward$$
$index forward, zero order$$

$head Syntax$$
$icode%c% = %f%.CompareChange()%$$
$pre
$$
$bold See Also$$
$cref FunCheck$$


$head Purpose$$
We use $latex F : B^n \rightarrow B^m$$ to denote the
$cref/AD function/glossary/AD Function/$$ corresponding to $icode f$$.
This function may be not agree with the algorithm that was used
to create the corresponding
AD of $icode Base$$
$cref/operation sequence/glossary/Operation/Sequence/$$
because of changes in AD
$cref/comparison/Compare/$$ results.
The $code CompareChange$$ function can be used to detect these changes.

$head f$$
The object $icode f$$ has prototype
$codei%
	const ADFun<%Base%> %f%
%$$

$head c$$
The result $icode c$$ has prototype
$codei%
	size_t %c%
%$$
It is the number of 
$codei%AD<%Base%>%$$ $cref/comparison/Compare/$$ 
operations,
corresponding to the previous call to $cref Forward$$ 
$codei%
	%f%.Forward(0, %x%)
%$$
that have a different result from
when $icode F$$ was created by taping an algorithm.

$head Discussion$$
If $icode c$$ is not zero, 
the boolean values resulting from some of the 
$cref/comparison operations/Compare/$$ corresponding to $icode x$$
are different from when the 
AD of $icode Base$$
$cref/operation sequence/glossary/Operation/Sequence/$$ was created.
In this case, you may want to re-tape the algorithm with the
$cref/independent variables/glossary/Tape/Independent Variable/$$ 
equal to the values in $icode x$$ 
(so AD operation sequence properly represents the algorithm
for this value of independent variables).
On the other hand, re-taping the AD operation sequence usually takes 
significantly more time than evaluation using $cref ForwardZero$$.
If the functions values have not changed (see $cref FunCheck$$)
it may not be worth re-taping a new AD operation sequence. 

$head Restrictions$$
$index NDEBUG, CompareChange$$
Computation of this function requires extra operations in the tape.
If $cref/NDEBUG/Faq/Speed/NDEBUG/$$ is defined,
of if a tape $cref/optimization/optimize/$$ has been preformed,
these operations are not included in the tape and
the value of $icode c$$ is always zero (and does not correspond
to the actual number of comparison changes).

$head Example$$
$children%
	example/compare_change.cpp
%$$
The file
$cref compare_change.cpp$$
contains an example and test of this operation.
They return true if they succeed and false otherwise.

$end

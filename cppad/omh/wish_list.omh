$Id$
/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-12 Bradley M. Bell

CppAD is distributed under multiple licenses. This distribution is under
the terms of the 
                    Eclipse Public License Version 1.0.

A copy of this license is included in the COPYING file of this distribution.
Please visit http://www.coin-or.org/CppAD/ for information on other licenses.
-------------------------------------------------------------------------- */
$begin WishList$$
$spell
	cmake
	Berger
	namespace
	omp_alloc
	iterator
	bools
	Microsoft
	inline
	std
	tanh
	cos
	booleans
	Jacobian
	recomputed
	Ipopt
	Adolc
	Fadbad
	Sacado
	xml
	hpp
	CondExp
	Vec
	Cpp
	Atan
	retape
	cppad
	nlp
$$

$section The CppAD Wish List$$
$index wish list$$
$index new, features$$
$index features, new$$

$head Atan2$$
$index atan2$$
The $cref/atan2/Atan2/$$ function could be made faster by adding
a special operator for it.

$head BenderQuad$$
See the $cref/problem/BenderQuad/Problem/$$ with the 
current $code BenderQuad$$ specifications.

$head cppad_ipopt_nlp$$
$index cppad_ipopt_nlp$$
$list number$$
Create a separate documentation page for using $code cppad_ipopt_nlp$$
with the $cref/simple representation/cppad_ipopt_nlp/Simple Representation/$$. 

$lnext
The vector of sets $cref/sparsity pattern/glossary/Sparsity Pattern/$$
could be compared for speed with of vector of bools
(and used instead if it is faster).

$lnext
Perhaps it would help to cache the solution of the sparse Jacobian
and spare Hessian graph coloring algorithm.
Then, when the sparsity pattern does not depend on the argument value,
these colorings would not have to be recomputed.

$lnext
In the case where $codei%retape(%k%)%$$ is true for some $icode k$$,
one can still use the structure of the representation to compute a 
sparsity structure. Currently $code cppad_ipopt_nlp$$ uses a dense 
sparsity structure for this case

$lnext
The $icode new_x$$ flag could be used to avoid zero order forward mode
computations. Because the same $code ADFun$$ object is used at different
argument values, this would require forward mode at multiple argument values
(see $cref/multiple arguments/WishList/Multiple Arguments/$$). 

$lend

$head cppad_ipopt_sum$$
Create a simpler class an Ipopt AD interface with the objective
and other functions are sums of functions each of which gets recorded.

$head Library$$
$index compile, speed AD<double>$$
$index speed, compile AD<double>$$
$index AD<double>, compile speed$$
One could build a CppAD library for use with the type $code AD<double>$$.
This would speed up compilation for the most common usage where
the $icode Base$$ type is $code double$$.

$head Multiple Arguments$$
$index speed, improve$$
It has been suggested that computing and storing forward mode
results for multiple argument values (and for multiple orders)
is faster for Adolc. 
Perhaps CppAD should allow for forward mode at multiple argument values
(perhaps multiple orders).

$head Numeric Limits$$
$index testing, machine epsilon$$
$index machine epsilon, testing$$
Use a multiple of $code std::numeric_limits<double>::epsilon()$$ instead
$code 1e-10$$ for a small number in correctness checks; e.g.,
see $cref tan.cpp$$.

$head Operation Sequence$$
$index sequence, operation$$
$index operation, sequence$$
It is possible to detect if the 
AD of $icode Base$$ 
$cref/operation sequence/glossary/Operation/Sequence/$$ 
does not depend on any of the
$cref/independent variable/glossary/Tape/Independent Variable/$$ values.
This could be returned as an extra
$cref seq_property$$.

$head Optimization$$
$index optimize, tape$$
$index tape, optimize$$

$subhead Expression Hashing$$
During expression sequence $cref/optimization/optimize/$$,
hash codes are used to detect expressions that have already
been computed.
Perhaps this should be done during the original forward mode recording. 

$head Variable Pairs$$
Suppose that $icode x$$ is a variable 
and $codei%sin(%x%)%$$ is used in an expression.
The extra expression $codei%cos(%x%)%$$ is also computed
during a $cref Forward$$ calculation.
This is because the derivative of the original expression
is expressed in terms of the values of the other expression.
In general, 
the representation of the derivative of an expression to order $icode p$$ 
may include the derivative of another expression to order $icode%p%-1%$$.
In our example, if only the value $codei%sin(%x%)%$$ 
is requested, it is not necessary to compute $codei%cos(%x%)%$$.
We should remove the computation of extra expressions derivatives that are 
not need to compute the requested derivative of the original expression. 

$head Software Guidelines$$

$subhead Boost$$
The following is a list of some software guidelines taken from
$href%http://www.boost.org/development/requirements.html#Guidelines%boost%$$.
These guidelines are not followed by the current CppAD source code,
but perhaps they should be:

$list number$$
Names (except as noted below) 
should be all lowercase, with words separated by underscores.
For example, acronyms should be treated as ordinary names 
(xml_parser instead of XML_parser).

$lnext
Template parameter names should begin with an uppercase letter.

$lnext
Use spaces rather than tabs.  
Currently, CppAD uses a tabs stops at column multiples of 5.
Five columns were chosen to avoid high levels of indenting and to allow for
$codep
	if( expression )
		statement
	else	statement
$$
with a tab after the else.
Automatic conversion to actual spaces should be easy. 

$lend

$head Tracing$$
$index operation, sequence tracing$$
$index sequence, operation tracing$$
$index tracing, operation sequence$$
Add operation sequence tracing to the user API and documentation.

$head user_atomic$$
$index user, atomic functions$$
$index atomic, user functions$$
$index functions, user_atomic$$
The $cref user_atomic$$ functions should allow the user to chose vectors
of bits, instead of standard sets, for representing sparsity. This would
be more efficient for most cases.


$end

#line 2 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.cpp"

#line 4 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 278
#define YY_END_OF_BUFFER 279
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2174] =
    {   0,
        1,    1,  276,  276,  274,  274,  275,  275,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  279,  277,
        1,    2,  264,    2,  264,    6,  264,    5,  277,    4,
      264,  264,    2,  276,  278,  274,  275,  265,  267,  268,
      267,  271,  272,  271,    1,  264,  264,    6,  264,    5,
        0,    4,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,    3,
        6,    6,  264,    7,    5,    0,    0,  270,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    4,  264,  264,

      276,  274,  275,  265,    0,  273,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,    6,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  150,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    6,  269,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,

      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  266,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  230,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  112,    0,    0,
        0,    0,  222,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  214,    0,    0,    0,    0,    0,    0,
      216,  264,  264,  264,  264,  264,  264,  264,   27,  264,

      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,   94,   95,  264,  264,  264,  264,  264,  264,
      264,  264,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  151,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  162,    0,    0,

        0,    0,    0,    0,    0,    0,  152,    0,    0,    0,
      264,  264,  264,  264,  264,  264,  264,   27,  264,   98,
      264,  264,  264,  264,  264,   99,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,    0,    0,    0,    0,    0,    0,  231,
        0,    0,    0,    0,    0,  151,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  113,    0,    0,    0,
        0,    0,    0,    0,    0,  223,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  215,    0,
        0,    0,    0,    0,    0,    0,    0,  217,    0,    0,

        0,    0,    0,  196,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      241,  124,    0,    0,    0,    0,    0,    0,    0,  245,
        0,    0,    0,  102,  101,  138,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  264,  264,  264,  264,  264,   92,   93,  264,   98,
      264,  264,  264,  264,   99,  264,   56,   57,  264,  264,
      264,  264,  264,  264,  264,   68,   69,  264,  264,  264,
       78,   79,  264,  264,  264,  264,    0,    0,    0,    0,
        0,  231,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  242,  113,    0,
        0,    0,    0,    0,    0,    0,  246,  223,    0,    0,
        0,    0,  103,    0,    0,    0,    0,  163,    0,    0,
        0,    0,    0,    0,  215,    0,    0,    0,    0,    0,
      153,    0,    0,  217,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  204,  243,  241,    0,    0,    0,    0,
        0,    0,    0,  247,  245,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  108,    0,    0,    0,  264,  264,  264,  264,  264,

      264,  264,  264,  264,   54,   55,  264,  264,  264,  100,
      264,  264,  264,   28,  264,   66,   67,  264,  264,   76,
       77,  264,   82,   83,  264,  264,  264,    0,    0,    0,
        0,    0,  197,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  242,    0,
      125,    0,    0,    0,    0,    0,    0,  246,    0,    0,
        0,  103,    0,  139,    0,    0,    0,  163,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  153,    0,
        0,    0,    0,  198,  200,    0,    0,  134,    0,    0,
        0,    0,    0,    0,  106,    0,    0,    0,    0,    0,

      243,    0,    0,  128,  154,    0,    0,    0,    0,  247,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  186,
        0,    0,  110,    0,    0,    0,    0,    0,  249,    0,
      208,    0,    0,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  100,  264,   64,
       65,   28,  264,  264,  264,  264,   80,   81,  264,  264,
      264,   90,   91,    0,    0,    0,    0,  197,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  205,  125,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  139,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  250,
        0,    0,  109,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  261,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      132,  174,    0,    0,    0,    0,    0,    0,    0,    0,
      251,  249,    0,    0,  130,    0,  264,  264,  264,   38,
       39,  264,  264,  264,  264,  264,  264,   50,   51,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,   60,   61,   62,   63,  264,  264,  264,   74,   75,

      264,   86,   87,   88,   89,    0,    0,  199,    0,  201,
        0,    0,    0,  135,    0,    0,    0,    0,    0,    0,
        0,    0,  107,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  205,    0,  262,    0,  129,    0,  155,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  187,    0,    0,    0,    0,  111,    0,    0,
        0,    0,    0,  250,    0,  109,    0,  209,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  263,  261,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  251,    0,    0,  188,  264,   34,
       35,   36,   37,  264,  264,   46,   47,  264,  264,   48,
       49,  264,  264,   96,   97,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,   58,   59,  264,
      264,   72,   73,   84,   85,    0,  199,  201,    0,    0,
      135,    0,    0,    0,    0,    0,    0,    0,  107,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  262,
      129,  155,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  133,    0,  175,  187,    0,    0,    0,

        0,  111,    0,    0,    0,    0,    0,    0,  209,    0,
      131,    0,  202,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  263,    0,    0,    0,    0,    0,    0,
      218,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  116,    0,    0,    0,    0,  206,   32,   33,  264,
       44,   45,  264,  264,  264,  264,  264,   10,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      133,  175,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  131,    0,  189,    0,  226,    0,    0,    0,
      238,    0,    0,  168,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  144,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      118,    0,    0,    0,    0,  264,  264,  264,   29,  264,
       30,  264,  264,   25,  264,   10,  264,  264,  264,  264,
       23,  264,  264,  264,  264,  264,   21,  264,  264,   20,
      264,  264,  264,   31,    0,  203,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      219,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  117,    0,    0,    0,    0,  207,  189,    0,
      158,    0,    0,  253,    0,    0,    0,  257,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  120,    0,    0,
      240,    0,  146,  140,    0,    0,  244,  114,  104,  136,
        0,    0,    0,    0,    0,    0,  236,    0,    0,    0,
      264,   42,   43,   29,   30,  264,  264,   25,  264,  264,
      264,  264,   23,  264,  264,  264,  264,  264,   21,  264,

       20,  264,  264,   31,  203,    0,    0,  227,    0,    0,
      254,    0,    0,  239,    0,  258,    0,    0,  169,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  145,    0,    0,  219,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  119,  117,    0,    0,    0,
      207,    0,  255,  253,    0,    0,  259,  257,    0,  182,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  240,
        0,  142,  244,    0,    0,    0,    0,    0,  164,  234,
        0,    0,    0,   40,   41,  264,   53,   52,  264,  264,
      264,   13,  264,  264,  264,  264,  264,  264,  264,   12,

      264,  264,  264,  264,  264,    0,  227,    0,  159,  254,
        0,  239,  258,    0,  169,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  121,    0,    0,  147,  145,    0,
      141,    0,    0,  115,    0,  105,    0,  137,    0,    0,
        0,    0,    0,    0,  119,    0,  237,    0,    0,    0,
        0,  255,    0,    0,    0,  259,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  126,    0,    0,  264,  264,   13,  264,    9,
      264,  264,  264,  264,  264,  264,   12,  264,  264,  264,
      264,   71,   70,    0,  159,    0,    0,    0,  183,    0,

        0,    0,    0,    0,    0,    0,    0,  121,    0,  147,
      141,    0,  143,  115,  105,  137,    0,    0,    0,    0,
        0,    0,  165,  237,    0,  235,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  184,    0,    0,    0,    0,
      264,  264,    9,  264,  264,  264,  264,  264,  264,  264,
      264,  264,    0,    0,    0,  183,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  143,    0,    0,    0,    0,
        0,  165,  235,    0,  127,    0,  148,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  172,  122,    0,

        0,    0,    0,    0,    0,    0,    0,  248,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  185,    0,    0,  127,    0,    0,
        0,  166,    0,    0,    0,  232,    0,    0,    0,    0,
        0,    0,    0,  178,    0,    0,    0,  248,  264,  264,
      264,  264,  264,  264,  264,  264,   14,  264,   15,  264,
      264,   16,    0,  149,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  173,    0,  123,    0,    0,    0,
      185,    0,    0,    0,    0,    0,    0,  194,    0,    0,

        0,    0,    0,    0,    0,  260,    0,  156,    0,    0,
      264,  264,  264,   17,  264,  264,  264,  264,   14,   15,
      264,   16,  149,    0,    0,  167,    0,    0,    0,  233,
        0,    0,    0,    0,  173,  123,    0,    0,    0,  179,
        0,    0,    0,    0,  180,    0,    0,    0,    0,    0,
        0,    0,  260,    0,  160,    0,  264,   18,  264,   17,
      264,  264,  264,  264,  264,    0,  167,    0,  195,    0,
      233,    0,    0,    0,    0,    0,    0,  179,    0,  157,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   18,  264,   11,  264,  264,  264,    8,  264,

      264,    0,  181,  195,    0,    0,    0,    0,    0,    0,
        0,  157,    0,  161,    0,    0,    0,    0,    0,    0,
      190,    0,    0,    0,    0,   11,  264,  264,    8,  264,
      264,   26,  181,    0,    0,    0,    0,    0,    0,    0,
      161,    0,    0,    0,    0,  224,  220,    0,  170,    0,
        0,    0,  264,  264,  264,   26,    0,    0,    0,    0,
      191,    0,    0,    0,    0,    0,    0,    0,  228,    0,
        0,  176,    0,  264,  264,  264,    0,    0,  225,    0,
      221,  191,    0,    0,  171,    0,    0,    0,    0,    0,
        0,    0,    0,  264,  264,  264,    0,  229,  225,  221,

        0,  171,    0,    0,  177,    0,    0,    0,    0,    0,
        0,  264,  264,  264,  229,    0,    0,  177,    0,    0,
      252,    0,  256,    0,    0,    0,  264,  264,  264,    0,
        0,    0,  252,  256,  192,    0,  212,  264,  264,  264,
        0,    0,    0,    0,  264,  264,  264,   19,    0,  193,
        0,    0,  213,    0,  264,  264,   22,   19,  193,    0,
      213,    0,  264,   24,   22,    0,  210,   24,    0,    0,
      211,  211,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,   24,   25,   26,   27,   28,   29,   30,   31,   32,
        6,   33,   34,   35,   36,   37,   38,    6,    6,    6,
        1,    6,    1,    1,    6,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,    1,   65,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    5,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2186] =
    {   0,
        0,   65, 3356, 3355, 3366, 3365, 3362, 3361,    0,    0,
        0,    0, 3352, 3351,   13,   17,    3,    5, 3365, 3374,
      129, 3359,  192, 3356,   19,   38, 3345,   84,  250,   25,
     3331, 3321, 3374,    0, 3374,    0,    0,    0, 3374, 3374,
     3350, 3374, 3374, 3341,    0,    0,   24,   90, 3340,  216,
       35,   40, 3326, 3316,    6, 3311, 3301, 3296, 3295,    4,
        8,   25,   32, 3310,   10,   52,   33, 3310, 3305, 3374,
       52,  244,  105, 3374,   86, 3338,  272, 3374, 3288, 3306,
     3291,   15,   49, 3296, 3299,   64, 3288, 3293,   81, 3300,
      156,   68, 3295,  168, 3274,   77, 3297,  107, 3312, 3304,

        0,    0,    0,    0, 3316, 3374, 3274, 3279, 3273, 3270,
     3275, 3274, 3264, 3284,  179, 3283, 3274, 3272, 3270, 3269,
     3271, 3254,  175,  196, 3278, 3262,  187, 3268,  213, 3267,
      258,  262, 3304, 3254, 3272, 3257,  230,   73, 3262, 3265,
      226, 3254, 3259,  201, 3266,  281,  223, 3261,  284, 3240,
      203, 3263,  260, 3244, 3248,  166, 3243, 3374, 3239, 3247,
     3244,  287, 3272, 3251, 3253, 3251, 3229, 3238, 3238, 3240,
     3229, 3233, 3239, 3226,  223, 3230, 3227, 3225,  292, 3226,
     3222, 3224, 3228, 3233, 3219,  283, 3374, 3231, 3238, 3231,
     3220, 3219, 3210,  350, 3212, 3208, 3227, 3226, 3221, 3205,

     3219, 3221, 3225, 3216, 3198, 3232,  352,  354, 3204, 3212,
     3195, 3214, 3194, 3192, 3215, 3204, 3374,  336, 3191, 3195,
      279, 3190,  360, 3186, 3194, 3191,  313, 3219, 3198, 3200,
     3198, 3176, 3185, 3185, 3187, 3176, 3180, 3186, 3173,  316,
     3177, 3174, 3172,  319, 3173, 3169, 3171, 3175, 3180, 3166,
     3166, 3167, 3165,  303,  322, 3175, 3176, 3173, 3164, 3171,
     3170, 3154, 3152, 3152, 3166, 3152, 3156, 3181, 3162, 3169,
      361, 3160, 3159, 3154, 3150, 3156, 3144, 3140, 3150, 3154,
     3135, 3133, 3132, 3154, 3134, 3146, 3130, 3144, 3134, 3129,
     3137, 3138, 3119, 3125, 3145,  381, 3125,  383,  385,  389,

     3139, 3127, 3118, 3155,  391,  393, 3131, 3110, 3141, 3128,
     3128,  399, 3374, 3374, 3112,  408, 3129, 3117,  410, 3123,
     3102, 3118, 3108, 3109, 3107,  371,  413, 3117, 3118, 3115,
      417,  419, 3106, 3113, 3112, 3096, 3094, 3094, 3108, 3094,
     3098,  425, 3105, 3112,  411, 3103,  434, 3098, 3094, 3100,
     3088, 3084, 3094, 3098, 3079, 3077, 3076,  436, 3079, 3091,
     3075, 3089, 3079, 3074,  441, 3070, 3067, 3073, 3112, 3084,
     3066, 3084, 3070, 3065, 3079, 3076,  378, 3062, 3070, 3058,
     3076, 3069, 3070,  443, 3091, 3059, 3063, 3077, 3061, 3064,
      445, 3065,  372,  461, 3049, 3045, 3042, 3070, 3058,  386,

     3053, 3056, 3059, 3056, 3040, 3052, 3374, 3041, 3063, 3053,
     3038, 3036, 3042, 3025,  463,  478, 3049,  465,  473,  484,
     3036, 3026, 3037, 3030,  488,  490,  492,  494, 3026, 3027,
     3036, 3023, 3016, 3023,  500,  504, 3026, 3016,  510,  512,
      518, 3020, 3015, 3013, 3010, 3016, 3055, 3027,  520,  522,
     3009, 3027, 3013, 3008, 3022,  525, 3019,  441, 3005, 3013,
     3001, 3019, 3012, 3013,  527,  529,  533, 3034, 3002, 3006,
     3020, 3004, 3007,  536,  538,  540, 3008,  404,  545, 2992,
     2988, 2985,  547, 3002,  509, 2997, 3000,  555,  557, 3003,
     3000, 2984, 2996,  563, 2985, 3007,  565,  567, 2997, 2996,

     2991, 2990, 3019, 3374, 2975, 2989, 2987, 2981, 2969, 2970,
     2969, 2989, 2984, 2983,  451, 2969, 2977, 2976,  572, 3001,
      575, 3374,  443, 2966, 2980, 2958, 2963,  582, 2996,  585,
     2954, 2964, 2958,  589, 3374, 2978, 2950, 2954, 2967, 2948,
     2947, 2947, 2961, 2945, 2944, 2956, 2958, 2946, 2935, 2956,
     2954, 2937, 2949, 2937, 2936,  600, 3374, 3374, 2946,  592,
     2951, 2944, 2933, 2931,  594,  606, 2979, 2976, 2951, 2938,
      612,  614,  616, 2927,  618, 2974, 2971, 2940, 2933,  624,
     2970, 2967,  631,  633, 2930,  639, 2933, 2928, 2927, 2956,
      641,  643, 2912, 2926, 2924, 2918, 2906, 2907, 2906, 2926,

     2921, 2920,  540, 2906, 2914, 2913,  646,  648,  650,  654,
      613, 2904, 2918, 2896, 2901,  657,  659,  662, 2893, 2903,
     2897,  664,  666,  670, 2890, 2894,  673,  675, 2907, 2888,
     2887, 2887, 2901, 2885,  677, 2884, 2896, 2898, 2886,  680,
      682, 2875, 2896,  686, 2894, 2883, 2876, 2875, 2911, 2890,
     2870, 2884, 2872, 2872, 2885, 2880, 2869, 2871, 2870, 2872,
     2871, 2876, 2860, 3374,  689,  691, 2904, 2871, 2870, 2869,
      665, 2862, 2857,  700,  702, 2898, 2861, 2843, 2882, 2851,
      550, 2848, 2856, 2845, 2843, 2857, 2856,  665, 2851,  705,
     2858, 3374, 2844, 2844, 2844, 2830,  707, 2834, 2848, 2843,

     2850,  709, 2836, 2824, 3374, 3374, 2842,  711,  716,  718,
      726,  728,  734,  736, 2829, 3374, 3374, 2844,  738, 3374,
     3374,  741, 2872, 2864,  749,  753,  755, 2774, 2766, 2765,
     2801,  761,  764, 2780, 2760, 2774,   46,   58,   87,   93,
       94,  147,  191,  220,  252,  264,  262,  768,  770,  772,
      774,  305,  322,  332,  715,  340,  347,  777,  356,  344,
      393,  779,  781,  784,  387,  589,  393,  788,  405,  402,
      411,  439,  462,  757,  463,  791,  479,  793,  797,  481,
      494,  501,  507, 3374, 3374,  529,  534, 3374,  534,  540,
      545,  546,  583,  705, 3374,  782,  568,  587,  596,  649,

      802,  651,  804, 3374, 3374,  656,  670,  713,  697,  809,
      707,  701,  729,  754,  751,  767,  769,  775,  762,  777,
      779,  781,  794,  771,  773,  788,  826,  814,  830,  777,
     3374,  792,  793,  836,  838,  844,  795,  853,  799,  798,
      855,  857,  815,  863,  850,  875,  883,  865,  890,  848,
      854,  871,  805,  830,  896,  898, 3374, 3374,  904,  906,
      912,  878,  882,  847,  919,  921,  849,  923,  855,  925,
      852,  852,  860,  860,  890,  910,  930,  924,  874,  884,
      892,  900,  946,  938,  948,  950,  954,  956,  887,  900,
      926,  906,  904,  926,  923,  966,  912,  925,  927,  933,

      920,  975,  936,  938,  979,  929,  931,  946,  984,  986,
      933,  991,  995,  997,  948,  952,  944,  951,  952,  964,
      959,  960,  963,  953,  969,  974,  977,  964,  960,  980,
      982,  979,  980,  996,  986,  969, 1026, 1013, 1029,  982,
      991,  981,  973,  999,  996,  982, 1002,  995,  989,  996,
     3374, 3374,  990, 1006, 1028, 1011, 1019,  995, 1029, 1015,
     1054, 1056, 1049, 1014, 3374, 1005, 1061, 1063, 1071, 1062,
     1062, 1019, 1077, 1079, 1029, 1024, 1085, 1080, 1082, 1028,
     1092, 1094, 1045, 1050, 1045, 1051, 1065, 1068, 1075, 1070,
     1108, 1107, 1107, 3374, 3374, 1081, 1058, 1124, 1113, 1112,

     1130, 1115, 1114, 3374, 3374, 1064, 1136, 1138, 1140, 1142,
     1073, 1078, 1144, 1146, 1093, 1089, 1103, 1104, 1094, 1111,
     1116, 1156, 1160, 1117, 1107, 1105, 1125, 1127, 1124, 1125,
     1141, 1131, 1172, 1174, 1176, 1178, 1180, 1182, 1184, 1121,
     1145, 1135, 1127, 1149, 1135, 1155, 1149, 1141, 1148, 1198,
     1200, 1202, 1204, 1151, 1167, 1189, 1211, 1218, 1172, 1183,
     1160, 1197, 1183, 1222, 1179, 1227, 1229, 1231, 1233, 1170,
     1174, 1199, 1181, 1193, 1188, 1199, 1190, 1191, 1195, 1198,
     1191, 1197, 1212, 1204, 1197, 1213, 1198, 1203, 1218, 1202,
     1216, 1258, 1260, 1253, 1225, 1223, 1228, 1234, 1218, 1213,

     1224, 1230, 1220, 1231, 1233, 1242, 1244, 1232, 1233, 1230,
     1257, 1236, 1232, 1235, 1284, 1231, 1248, 3374, 1288, 1287,
     1287, 3374, 3374, 1244, 1295, 1294, 1294, 1245, 1261, 3374,
     3374, 1251, 1304, 3374, 3374, 1256, 1310, 1251, 1271, 1275,
     1268, 1271, 1260, 1266, 1286, 1271, 1266, 3374, 3374, 1260,
     1281, 3374, 3374, 3374, 3374, 1262, 1325, 1327, 1292, 1274,
     1331, 1288, 1283, 1294, 1285, 1286, 1290, 1292, 1340, 1287,
     1293, 1307, 1299, 1292, 1308, 1293, 1298, 1313, 1297, 1352,
     1354, 1356, 1320, 1318, 1323, 1329, 1307, 1318, 1324, 1314,
     1325, 1326, 1368, 1370, 1372, 1374, 1376, 1345, 1347, 1335,

     1336, 1384, 1333, 1363, 1343, 1339, 1342, 1352, 1392, 1394,
     1396, 1398, 3374, 1346, 1346, 1361, 1353, 1349, 1355, 1352,
     1366, 1367, 1365, 1356, 1364, 1373, 1370, 1360, 1384, 1379,
     1370, 1375, 1372, 1422, 1376, 1384, 1386, 1388, 1383, 1388,
     3374, 1379, 1390, 1382, 1394, 1379, 1384, 1380, 1383, 1390,
     1398, 3374, 1389, 1383, 1401, 1392, 3374, 3374, 3374, 1444,
     3374, 3374, 1446, 1448, 1409, 1451, 1453, 1455, 1408, 1410,
     1438, 1463, 1425, 1424, 1430, 1470, 1414, 1473, 1423, 1478,
     1480, 1422, 1427, 1442, 1435, 1431, 1438, 1435, 1449, 1450,
     1448, 1439, 1448, 1456, 1453, 1443, 1467, 1462, 1453, 1458,

     1464, 1467, 1469, 1464, 1510, 1461, 1472, 1464, 1476, 1461,
     1519, 1521, 1466, 1467, 1470, 1478, 1486, 1528, 1479, 1473,
     1491, 1533, 1535, 1537, 1539, 1480, 3374, 1487, 1544, 1513,
     3374, 1549, 1491, 3374, 1496, 1498, 1520, 1517, 1520, 1509,
     1510, 1525, 1522, 1528, 1566, 1523, 1515, 3374, 1529, 1509,
     1572, 1524, 1521, 1521, 1521, 1545, 1554, 1543, 1541, 1542,
     3374, 1534, 1534, 1569, 1531, 1589, 1591, 1597, 1599, 1601,
     1604, 1606, 1608, 1612, 1537, 1616, 1554, 1555, 1595, 1618,
     1623, 1582, 1571, 1596, 1586, 1628, 1630, 1592, 1634, 1636,
     1601, 1598, 1640, 1643, 1645, 1649, 1586, 1652, 1600, 1656,

     1625, 1661, 1663, 1603, 1665, 1613, 1613, 1635, 1633, 1636,
     1623, 1624, 1640, 1638, 1644, 1628, 1683, 1644, 1624, 1687,
     1689, 1641, 1638, 1638, 1638, 1662, 1671, 1660, 1658, 1659,
     1703, 1705, 1707, 1651, 1658, 1693, 1711, 1713, 1715, 1698,
     3374, 1721, 1704, 1724, 1672, 1731, 1712, 1728, 1692, 1702,
     1681, 1701, 1683, 1704, 1689, 1717, 1689, 3374, 1709, 1748,
     1750, 1713, 3374, 3374, 1712, 1754, 1756, 3374, 3374, 3374,
     1707, 1708, 1715, 1707, 1723, 1709, 1710, 1719, 1713, 1714,
     1770, 1769, 1769, 1776, 1778, 1780, 1782, 1788, 1730, 1732,
     1790, 1737, 1795, 1737, 1779, 1761, 1799, 1746, 1802, 1751,

     1806, 1771, 1810, 1815, 1817, 1793, 1819, 1821, 1825, 1827,
     1829, 1772, 1831, 1835, 1837, 1843, 1792, 1847, 1849, 1807,
     1787, 1808, 1795, 1815, 1800, 1828, 1800, 1857, 1821, 1860,
     1863, 1865, 1867, 1828, 1870, 1873, 1876, 1879, 1830, 1832,
     1839, 1831, 1847, 1832, 1889, 1892, 1895, 1897, 1852, 1846,
     1901, 1866, 1905, 1907, 1900, 1891, 1913, 1915, 1902, 3374,
     1861, 1882, 1873, 1877, 1875, 1879, 1874, 1881, 1879, 1929,
     1890, 3374, 1932, 1880, 1908, 1888, 1881, 1882, 3374, 3374,
     1898, 1903, 1902, 3374, 3374, 1942, 3374, 3374, 1907, 1909,
     1948, 1950, 1953, 1910, 1905, 1919, 1921, 1914, 1960, 1963,

     1910, 1937, 1920, 1969, 1972, 1939, 1978, 1980, 1984, 1986,
     1963, 1988, 1991, 1993, 1996, 1942, 1962, 1952, 1956, 1954,
     1958, 1953, 1960, 2006, 2009, 1963, 2012, 2014, 2016, 2018,
     2022, 2024, 2028, 2030, 2034, 2036, 2040, 2044, 1966, 1999,
     1984, 1982, 1986, 2046, 2050, 2052, 2056, 2058, 2007, 2017,
     2004, 2062, 2024, 2024, 2029, 2068, 2028, 2034, 2027, 2017,
     2017, 2035, 2036, 2020, 2028, 2039, 2031, 2037, 2032, 2036,
     2052, 2035, 3374, 2037, 2047, 2044, 2034, 2091, 2093, 2095,
     2039, 2048, 2053, 2044, 2047, 2048, 2103, 2064, 2054, 2067,
     2109, 3374, 3374, 2055, 2115, 2072, 2080, 2118, 2120, 2085,

     2078, 2067, 2067, 2085, 2086, 2070, 2078, 2130, 2091, 2134,
     2136, 2138, 2140, 2142, 2144, 2146, 2103, 2098, 2102, 2118,
     2101, 2154, 2156, 2158, 2160, 2162, 2164, 2116, 2130, 2127,
     2122, 2124, 2127, 2117, 2124, 2135, 2136, 2143, 2125, 2140,
     2132, 2166, 2145, 2144, 2128, 3374, 2142, 2134, 2150, 2190,
     2142, 2148, 2194, 2155, 2142, 2157, 2154, 2155, 2146, 2147,
     2147, 2149, 2169, 2159, 2161, 2209, 2155, 2162, 2172, 2173,
     2180, 2161, 2176, 2168, 2202, 2220, 2181, 2165, 2224, 2181,
     2173, 2228, 2230, 2232, 2234, 2197, 3374, 2182, 2197, 2199,
     2193, 2185, 2187, 2189, 2228, 2209, 2215, 3374, 3374, 2195,

     2209, 2196, 2211, 2204, 2209, 2211, 2256, 2258, 2204, 2210,
     2207, 2208, 2226, 2215, 2230, 2268, 2272, 2225, 2274, 2276,
     2237, 2238, 2223, 2225, 2228, 2267, 2248, 2254, 2289, 2292,
     2240, 2240, 2255, 2297, 2299, 2252, 2258, 2305, 2264, 2270,
     2254, 3374, 2270, 2258, 2279, 3374, 2264, 2279, 2269, 2267,
     2282, 2320, 2289, 3374, 2282, 2283, 2280, 2326, 2273, 2279,
     2330, 2278, 2277, 2284, 2298, 2337, 2339, 2341, 2345, 2292,
     2347, 2349, 2352, 2356, 2298, 2358, 2305, 2327, 2363, 2314,
     2329, 2320, 2318, 2370, 2374, 2376, 2379, 2335, 2348, 2382,
     2386, 2343, 2347, 2344, 2336, 2351, 2375, 3374, 2357, 2338,

     2348, 2341, 2372, 2350, 2401, 2403, 2354, 3374, 2351, 2357,
     2408, 2355, 2411, 2413, 2378, 2372, 2363, 2371, 2420, 2423,
     2376, 2427, 2429, 2390, 2432, 2434, 2436, 2401, 2439, 2441,
     2386, 2396, 2388, 2419, 2448, 2452, 2400, 2404, 2456, 2458,
     2460, 2407, 2413, 2419, 3374, 2411, 2418, 2417, 2411, 2428,
     2419, 2433, 2473, 2449, 3374, 2434, 2478, 2480, 2482, 2484,
     2441, 2429, 2488, 2449, 2436, 2493, 2497, 2499, 2503, 2447,
     2505, 2451, 2450, 2468, 2459, 2472, 2485, 2515, 2517, 2519,
     2521, 2470, 2471, 2483, 2468, 2486, 2486, 2473, 2471, 2486,
     2480, 2497, 2534, 2537, 2539, 2491, 2501, 2543, 2545, 2518,

     2548, 2552, 2554, 2558, 2493, 2516, 2519, 2506, 2505, 2520,
     2514, 2568, 2570, 2572, 2530, 2518, 2538, 2535, 2522, 2523,
     2547, 2539, 2536, 2524, 2542, 2586, 2528, 2559, 2589, 2539,
     2592, 2594, 2596, 2557, 2544, 2545, 2601, 2562, 2559, 2547,
     2607, 2568, 2565, 2555, 2557, 3374, 3374, 2557, 3374, 2564,
     2574, 2572, 2589, 2567, 2564, 2621, 2568, 2624, 2626, 2628,
     2630, 2576, 2634, 2586, 2596, 2593, 2589, 2591, 3374, 2590,
     2602, 3374, 2603, 2595, 2592, 2605, 2651, 2653, 2655, 2657,
     2659, 2661, 2609, 2664, 2669, 2624, 2673, 2628, 2625, 2622,
     2632, 2642, 2636, 2625, 2637, 2632, 2684, 2686, 2689, 2691,

     2648, 2694, 2660, 2697, 2700, 2658, 2703, 2705, 2657, 2667,
     2653, 2665, 2660, 2663, 2714, 2666, 2676, 2721, 2663, 2723,
     2725, 2727, 2729, 2688, 2687, 2678, 2683, 2685, 2681, 2694,
     2694, 2685, 2743, 2745, 3374, 2698, 3374, 2697, 2693, 2749,
     2751, 2710, 2754, 2712, 2702, 2758, 2760, 2764, 2767, 2770,
     2718, 2775, 2777, 2717, 2779, 2783, 2785, 2787, 2791, 2725,
     2794, 2734, 2798, 2800, 2802, 2741, 3374, 2804, 2806, 2808,
     2810, 2813, 3374, 2825, 2830, 2835, 2840, 2845, 2850, 2855,
     2860, 2865, 2869, 2874, 2879
    } ;

static yyconst flex_int16_t yy_def[2186] =
    {   0,
     2174, 2174, 2175, 2175, 2176, 2176, 2177, 2177, 2178, 2178,
     2178, 2178, 2179, 2179, 2180, 2180, 2181, 2181, 2173, 2173,
     2173, 2173,   21, 2173,   23,   23,   23,   23, 2173, 2173,
       23,   23, 2173, 2182, 2173, 2183, 2184, 2185, 2173, 2173,
     2173, 2173, 2173, 2173,   21,   23,   23,   23,   23,   23,
       29, 2173,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2173,
       23,   23,   23, 2173,   23, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,   23,   23,

     2182, 2183, 2184, 2185, 2173, 2173,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173,   23, 2173,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 2173, 2173,   23,   23,   23,   23,   23,   23,
       23,   23, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,

     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,

     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173,   23,   23,   23,   23,   23, 2173, 2173,   23,   23,
       23,   23,   23,   23,   23,   23, 2173, 2173,   23,   23,
       23,   23,   23,   23,   23, 2173, 2173,   23,   23,   23,
     2173, 2173,   23,   23,   23,   23, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,

     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173,   23,   23,   23,   23,   23,

       23,   23,   23,   23, 2173, 2173,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 2173, 2173,   23,   23, 2173,
     2173,   23, 2173, 2173,   23,   23,   23, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,

     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2173,
     2173,   23,   23,   23,   23,   23, 2173, 2173,   23,   23,
       23, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,

     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173,   23,   23,   23, 2173,
     2173,   23,   23,   23,   23,   23,   23, 2173, 2173,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2173, 2173, 2173, 2173,   23,   23,   23, 2173, 2173,

       23, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,

     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,   23, 2173,
     2173, 2173, 2173,   23,   23, 2173, 2173,   23,   23, 2173,
     2173,   23,   23, 2173, 2173,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2173, 2173,   23,
       23, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,

     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,   23,
     2173, 2173,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,

     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 2173, 2173, 2173, 2173, 2173, 2173,

     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
       23, 2173, 2173,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173,   23, 2173, 2173,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,

     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,

     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,

     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173,   23,   23,   23,   23,   23,   23,   23,   23,

       23, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173,   23,   23,   23,   23,   23,
       23,   23, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173,   23,   23,   23,   23, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173,   23,   23,   23, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173,   23,   23,   23, 2173, 2173, 2173, 2173,

     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173,   23,   23,   23, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173,   23,   23,   23, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173,   23,   23,   23,
     2173, 2173, 2173, 2173,   23,   23,   23,   23, 2173, 2173,
     2173, 2173, 2173, 2173,   23,   23,   23,   23, 2173, 2173,
     2173, 2173,   23,   23,   23, 2173, 2173,   23, 2173, 2173,
     2173, 2173,    0, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173
    } ;

static yyconst flex_int16_t yy_nxt[3440] =
    {   0,
       20,   21,   21,   20,   22,   43,   24,   43,   25,   26,
       27,   28,   28,   28,   29,   40,   30,   20, 2173,   40,
       44,   41,   44, 2173,   31,   41,   98,   98,   48,   32,
       50,   50,   50,   48, 2173,   50,   50,   50, 2173,   71,
       71,   98,   98,   53,  107,  113, 2173,  115,   53,   72,
       72,   72, 2173,   71,   71,  114,  122,  156,  108,   73,
      116,  157,  123,  117,   33,   20,   21,   21,   20,   22,
      119,   24,  127,   25,   26,   27,   28,   28,   28,   29,
       73,   30,   20,  118,  128,   75,   75,   75,   75,   31,
      120,   71,   71,   48,   32,   50,   50,   50,  158,  872,

      159,   72,   72,   72,  124,   73,  175,  125,   98,   98,
      873,   73,  131,  131,  126,  162,  132,  132,  132,  167,
      163,  164,  223,  176,  224,  874,   73,  168,  183,   33,
       45,   45,   73,  184,   46,  875,   46,   47,   48,   49,
       50,   50,   50,   51,   46,   52,  876,   46,   46,   46,
       46,   46,   46,   53,   46,   46,   46,   46,   54,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   55,
       56,   57,   58,   59,   46,   60,   46,   46,   61,   62,
       63,   64,   46,   46,   46,   65,   66,   67,   68,   69,
       46,   46,   46,   46,   46,  170,  877,  207,  207,  196,

       46,   46,   46,   46,   46,   46, 2173,  211, 2173,  171,
      178,  208,  172,  173,  174,  197,   46,   75,   75,  256,
      179,   46,  257,  212,  205,   48,  180,   50,   50,   50,
      181,  206,   46,   46,   46,   46,   46,   73,   46,  232,
      878,   46,   46,   46,   46,   71,   71,  233,   46,   46,
       46,   46,   46,   76,  248,   72,   72,   72,   73,  249,
       77,  240,  214,   71,   71,   73,  879,   78,  215,  132,
      132,  132,  221,  132,  132,  132,  222,  227,  241,  278,
      279,  251,  228,  229,   71,   71,   73,  252,   79,   80,
       81,   82,   83,   84,   85,  253,   86,   87,  880,   88,

       89,   90,   91,   92,  881,   93,   94,   95,   96,   97,
      134,  135,  136,  137,  138,  139,  140,  882,  141,  142,
      235,  143,  144,  145,  146,  147,  243,  148,  149,  150,
      151,  152,  328,  262,  236,  329,  244,  237,  238,  239,
      263,  283,  245,  264,  265,  369,  246,  886,  284,  370,
      285,  298,  298,  207,  207,  312,  312,  323,  313,  336,
      314,  331,  331,  324,  887,  299,  337,  208,  357,  338,
      339,  325,  352,  353,  888,  358,  332,  359,  371,  372,
      388,  389,  415,  415,  298,  298,  418,  418,  891,  390,
      419,  419,  425,  425,  427,  427,  416,  511,  299,  892,

      312,  312,  893,  313,  420,  314,  426,  894,  428,  435,
      435,  439,  439,  447,  449,  449,  895,  448,  331,  331,
      456,  456,  532,  436,  533,  440,  466,  466,  541,  450,
      471,  472,  542,  332,  512,  475,  475,  488,  488,  473,
      897,  467,  497,  497,  519,  519,  528,  528,  900,  468,
      476,  901,  489,  520,  620,  529,  621,  498,  902,  521,
      599,  530,  534,  534,  415,  415,  418,  418,  903,  451,
      452,  660,  490,  661,  419,  419,  477,  535,  416,  556,
      556,  904,  557,  668,  558,  560,  560,  499,  420,  425,
      425,  565,  565,  427,  427,  566,  566,  600,  567,  669,

      568,  435,  435,  426,  905,  575,  575,  428,  576,  908,
      577,  439,  439,  580,  580,  436,  581,  911,  582,  583,
      583,  449,  449,  592,  592,  440,  456,  456,  607,  607,
      466,  466,  914,  584,  609,  609,  450,  616,  616,  475,
      475,  618,  618,  608,  915,  467,  622,  622,  627,  627,
      916,  631,  617,  917,  476,  632,  488,  488,  635,  635,
      744,  623,  745,  628,  640,  640,  497,  497,  644,  644,
      816,  489,  817,  519,  519,  918,  666,  666,  629,  641,
      919,  498,  520,  528,  528,  920,  675,  675,  521,  667,
      534,  534,  529,  560,  560,  565,  565,  921,  530,  676,

      922,  556,  556,  923,  557,  535,  558,  566,  566,  898,
      567,  899,  568,  709,  709,  711,  711,  713,  713,  575,
      575,  924,  576,  932,  577,  580,  580,  710,  581,  712,
      582,  714,  583,  583,  722,  722,  933,  723,  934,  724,
      726,  726,  732,  732,  592,  592,  584,  607,  607,  749,
      749,  609,  609,  752,  727,  750,  750,  733,  616,  616,
      758,  758,  608,  618,  618,  622,  622,  762,  762,  753,
      751,  763,  763,  617,  627,  627,  768,  768,  635,  635,
      623,  640,  640,  779,  779,  935,  764,  644,  644,  628,
      801,  801,  666,  666,  806,  824,  641,  936,  807,  825,

      765,  810,  810,  675,  675,  667,  827,  827,  835,  835,
      841,  841,  846,  846,  940,  828,  676,  709,  709,  848,
      848,  829,  836,  941,  842,  925,  847,  711,  711,  849,
      849,  710,  850,  926,  851,  713,  713,  852,  852,  855,
      855,  712,  722,  722,  889,  723,  942,  724,  890,  714,
      859,  859,  943,  856,  726,  726,  861,  861,  944,  862,
      945,  863,  732,  732,  860,  868,  868,  946,  727,  883,
      883,  749,  749,  750,  750,  885,  885,  733,  758,  758,
      762,  762,  763,  763,  884,  896,  896,  906,  751,  768,
      768,  907,  909,  909,  912,  912,  947,  764,  779,  779,

      927,  928,  929,  801,  801,  937,  937,  910,  948,  913,
      810,  810,  930,  949,  938,  950,  951,  952,  931,  953,
      939,  954,  955,  956,  958,  959,  960,  827,  827,  957,
      961,  962,  962,  964,  965,  966,  828,  967,  967,  835,
      835,  972,  829,  975,  963,  969,  969,  976,  970,  980,
      971,  968,  994,  836,  973,  973,  841,  841,  977,  977,
      995,  978,  996,  979,  981,  981,  848,  848,  974,  983,
      842,  984,  852,  852,  985,  986,  846,  846,  982,  997,
      987,  988, 1004,  989,  991,  991,  990,  992, 1005,  993,
      847,  849,  849, 1006,  850, 1011,  851,  855,  855,  998,

      998, 1012,  999, 1015, 1000,  859,  859, 1001, 1001, 1016,
     1002,  856, 1003,  861,  861, 1017,  862, 1018,  863,  860,
     1007, 1007, 1009, 1009,  868,  868, 1013, 1013, 1019, 1029,
     1020, 1022, 1022, 1030, 1031, 1008, 1032, 1010, 1021, 1033,
     1033, 1014, 1024, 1025, 1026, 1040, 1023,  883,  883,  885,
      885, 1034, 1034, 1041, 1027, 1036, 1036, 1038, 1038, 1042,
     1028, 1043,  884, 1044, 1045, 1046, 1035,  896,  896, 1047,
     1037, 1048, 1039, 1049, 1050, 1051, 1052, 1052, 1055, 1056,
     1057, 1057, 1061, 1062, 1063,  909,  909, 1064, 1064, 1065,
     1069, 1053,  912,  912, 1070, 1058, 1066, 1066, 1067, 1067,

      910, 1071, 1072, 1073, 1074, 1075, 1076,  913, 1059, 1077,
     1078, 1079, 1080, 1068, 1060, 1081, 1082, 1054, 1083, 1084,
     1085, 1086, 1087, 1088, 1090, 1089, 1091,  937,  937, 1092,
     1093, 1093, 1095, 1096, 1097, 1098,  938, 1099, 1100, 1101,
     1102, 1103,  939, 1094, 1104, 1105, 1106, 1107, 1108, 1110,
     1109, 1111, 1112, 1113, 1114, 1115, 1115,  962,  962, 1116,
     1117, 1118,  967,  967, 1119, 1119, 1122, 1120, 1123, 1121,
      963, 1124,  969,  969, 1128,  970,  968,  971,  973,  973,
     1125, 1125, 1129, 1126, 1130, 1127,  977,  977, 1131,  978,
     1132,  979,  974,  981,  981, 1133, 1133, 1136, 1134, 1137,

     1135, 1138, 1139, 1140, 1141, 1145, 1143,  982, 1147,  991,
      991, 1148,  992, 1149,  993, 1150, 1151, 1152, 1153, 1154,
     1155, 1156, 1142, 1144, 1159,  998,  998, 1146,  999, 1160,
     1000, 1001, 1001, 1162, 1002, 1163, 1003, 1007, 1007, 1157,
     1157, 1009, 1009, 1158, 1158, 1013, 1013, 1161, 1161, 1164,
     1165, 1166, 1008, 1167, 1168, 1170, 1010, 1022, 1022, 1171,
     1014, 1169, 1169, 1172, 1173, 1174, 1175, 1176, 1177, 1179,
     1178, 1183, 1023, 1033, 1033, 1034, 1034, 1180, 1180, 1036,
     1036, 1181, 1181, 1038, 1038, 1182, 1182, 1184, 1185, 1186,
     1035, 1187, 1188, 1189, 1037, 1190, 1191, 1192, 1039, 1193,

     1193, 1195, 1195, 1052, 1052, 1197, 1197, 1198, 1199, 1200,
     1203, 1201, 1057, 1057, 1194, 1204, 1196, 1205, 1053, 1202,
     1202, 1206, 1207, 1064, 1064, 1208, 1212, 1058, 1066, 1066,
     1067, 1067, 1209, 1209, 1210, 1210, 1213, 1214, 1215, 1216,
     1217, 1218, 1219, 1220, 1221, 1068, 1222, 1223, 1224, 1211,
     1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234,
     1234, 1093, 1093, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
     1242, 1243, 1244, 1245, 1094, 1246, 1247, 1248, 1249, 1250,
     1251, 1252, 1253, 1254, 1255, 1115, 1115, 1256, 1257, 1119,
     1119, 1258, 1120, 1259, 1121, 1260, 1125, 1125, 1261, 1126,

     1262, 1127, 1263, 1264, 1265, 1133, 1133, 1266, 1134, 1269,
     1135, 1267, 1267, 1270, 1271, 1272, 1273, 1274, 1275, 1276,
     1277, 1278, 1279, 1280, 1281, 1268, 1157, 1157, 1158, 1158,
     1282, 1283, 1161, 1161, 1284, 1285, 1286, 1287, 1288, 1289,
     1290, 1169, 1169, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
     1298, 1299, 1300, 1180, 1180, 1181, 1181, 1182, 1182, 1301,
     1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1193,
     1193, 1311, 1311, 1195, 1195, 1312, 1312, 1197, 1197, 1313,
     1314, 1315, 1316, 1317, 1194, 1202, 1202, 1318, 1196, 1319,
     1320, 1321, 1322, 1209, 1209, 1210, 1210, 1323, 1323, 1324,

     1324, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334,
     1211, 1335, 1336, 1337, 1325, 1338, 1339, 1340, 1341, 1342,
     1343, 1344, 1345, 1234, 1234, 1346, 1347, 1348, 1349, 1350,
     1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360,
     1361, 1362, 1363, 1364, 1365, 1366, 1366, 1368, 1368, 1370,
     1370, 1372, 1373, 1373, 1267, 1267, 1376, 1376, 1377, 1367,
     1378, 1369, 1379, 1371, 1380, 1380, 1374, 1383, 1268, 1384,
     1385, 1386, 1386, 1388, 1389, 1389, 1392, 1397, 1381, 1393,
     1393, 1395, 1395, 1398, 1399, 1387, 1400, 1401, 1390, 1402,
     1403, 1404, 1405, 1394, 1406, 1407, 1396, 1408, 1409, 1410,

     1411, 1412, 1413, 1414, 1415, 1382, 1416, 1375, 1417, 1418,
     1419, 1420, 1420, 1422, 1423, 1424, 1425, 1426, 1427, 1391,
     1311, 1311, 1312, 1312, 1428, 1429, 1421, 1430, 1431, 1432,
     1432, 1434, 1435, 1436, 1437, 1437, 1323, 1323, 1324, 1324,
     1439, 1439, 1440, 1441, 1433, 1442, 1442, 1445, 1449, 1438,
     1446, 1446, 1450, 1325, 1443, 1451, 1452, 1453, 1454, 1447,
     1444, 1455, 1456, 1457, 1458, 1448, 1459, 1460, 1460, 1462,
     1463, 1464, 1465, 1466, 1466, 1468, 1469, 1470, 1471, 1472,
     1473, 1474, 1461, 1475, 1476, 1477, 1478, 1479, 1467, 1480,
     1366, 1366, 1481, 1481, 1489, 1482, 1490, 1483, 1368, 1368,

     1484, 1484, 1370, 1370, 1367, 1485, 1485, 1486, 1486, 1373,
     1373, 1491, 1369, 1488, 1488, 1492, 1371, 1376, 1376, 1380,
     1380, 1487, 1494, 1374, 1493, 1493, 1495, 1496, 1498, 1386,
     1386, 1499, 1499, 1381, 1500, 1389, 1389, 1501, 1501, 1502,
     1503, 1393, 1393, 1387, 1504, 1504, 1395, 1395, 1506, 1390,
     1505, 1505, 1497, 1507, 1507, 1394, 1509, 1510, 1510, 1512,
     1517, 1396, 1513, 1513, 1515, 1515, 1518, 1518, 1508, 1520,
     1521, 1522, 1511, 1523, 1524, 1525, 1526, 1514, 1527, 1516,
     1528, 1519, 1529, 1530, 1531, 1531, 1533, 1534, 1420, 1420,
     1535, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1532,

     1543, 1544, 1548, 1421, 1545, 1545, 1432, 1432, 1547, 1547,
     1549, 1550, 1437, 1437, 1551, 1551, 1439, 1439, 1552, 1546,
     1553, 1433, 1442, 1442, 1556, 1554, 1554, 1438, 1557, 1558,
     1558, 1443, 1446, 1446, 1560, 1561, 1562, 1444, 1555, 1563,
     1564, 1447, 1559, 1565, 1566, 1567, 1568, 1448, 1569, 1460,
     1460, 1570, 1570, 1571, 1572, 1466, 1466, 1573, 1573, 1574,
     1575, 1576, 1577, 1578, 1461, 1579, 1580, 1581, 1582, 1583,
     1467, 1481, 1481, 1584, 1482, 1585, 1483, 1484, 1484, 1485,
     1485, 1486, 1486, 1586, 1586, 1589, 1587, 1590, 1588, 1488,
     1488, 1591, 1591, 1593, 1594, 1487, 1493, 1493, 1595, 1598,

     1599, 1599, 1601, 1499, 1499, 1592, 1602, 1501, 1501, 1596,
     1603, 1604, 1604, 1606, 1600, 1597, 1504, 1504, 1505, 1505,
     1507, 1507, 1607, 1607, 1611, 1605, 1608, 1608, 1510, 1510,
     1610, 1610, 1513, 1513, 1614, 1508, 1612, 1612, 1515, 1515,
     1616, 1609, 1617, 1511, 1613, 1613, 1618, 1514, 1518, 1518,
     1615, 1615, 1619, 1516, 1620, 1621, 1622, 1623, 1624, 1624,
     1626, 1627, 1627, 1519, 1531, 1531, 1629, 1629, 1630, 1630,
     1632, 1535, 1535, 1625, 1633, 1633, 1628, 1635, 1635, 1532,
     1637, 1637, 1639, 1631, 1640, 1641, 1642, 1643, 1644, 1634,
     1545, 1545, 1636, 1645, 1645, 1638, 1547, 1547, 1646, 1646,

     1649, 1650, 1551, 1551, 1651, 1546, 1652, 1652, 1554, 1554,
     1653, 1654, 1657, 1647, 1656, 1656, 1558, 1558, 1658, 1655,
     1659, 1555, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1559,
     1570, 1570, 1667, 1573, 1573, 1668, 1669, 1670, 1671, 1672,
     1673, 1674, 1675, 1586, 1586, 1676, 1587, 1677, 1588, 1591,
     1591, 1678, 1678, 1648, 1679, 1679, 1681, 1682, 1683, 1685,
     1686, 1599, 1599, 1592, 1687, 1687, 1688, 1689, 1680, 1690,
     1604, 1604, 1684, 1691, 1691, 1600, 1692, 1694, 1693, 1607,
     1607, 1608, 1608, 1696, 1605, 1695, 1695, 1610, 1610, 1612,
     1612, 1697, 1613, 1613, 1698, 1698, 1609, 1615, 1615, 1700,

     1701, 1702, 1703, 1704, 1705, 1706, 1707, 1624, 1624, 1699,
     1708, 1708, 1709, 1627, 1627, 1710, 1710, 1629, 1629, 1630,
     1630, 1717, 1625, 1711, 1711, 1712, 1712, 1718, 1628, 1633,
     1633, 1714, 1714, 1719, 1631, 1635, 1635, 1715, 1715, 1720,
     1713, 1637, 1637, 1721, 1634, 1716, 1716, 1722, 1722, 1727,
     1636, 1645, 1645, 1646, 1646, 1728, 1638, 1724, 1724, 1725,
     1725, 1729, 1723, 1652, 1652, 1730, 1731, 1732, 1647, 1656,
     1656, 1733, 1734, 1735, 1726, 1736, 1737, 1738, 1739, 1740,
     1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
     1751, 1752, 1678, 1678, 1679, 1679, 1753, 1753, 1754, 1755,

     1756, 1757, 1758, 1759, 1687, 1687, 1760, 1761, 1680, 1762,
     1691, 1691, 1763, 1692, 1764, 1693, 1695, 1695, 1765, 1698,
     1698, 1766, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
     1774, 1708, 1708, 1775, 1699, 1710, 1710, 1711, 1711, 1712,
     1712, 1776, 1776, 1714, 1714, 1715, 1715, 1716, 1716, 1777,
     1778, 1779, 1780, 1781, 1713, 1722, 1722, 1782, 1782, 1724,
     1724, 1725, 1725, 1783, 1783, 1784, 1784, 1786, 1787, 1788,
     1723, 1789, 1790, 1791, 1792, 1793, 1726, 1794, 1795, 1796,
     1785, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805,
     1806, 1807, 1807, 1809, 1810, 1753, 1753, 1811, 1812, 1813,

     1814, 1815, 1816, 1817, 1818, 1819, 1808, 1820, 1821, 1822,
     1766, 1766, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
     1831, 1776, 1776, 1832, 1833, 1834, 1834, 1836, 1837, 1782,
     1782, 1783, 1783, 1784, 1784, 1838, 1838, 1839, 1840, 1841,
     1835, 1842, 1843, 1844, 1845, 1846, 1847, 1849, 1785, 1850,
     1851, 1852, 1853, 1854, 1855, 1856, 1857, 1807, 1807, 1858,
     1858, 1859, 1860, 1861, 1848, 1862, 1863, 1864, 1865, 1866,
     1866, 1870, 1808, 1868, 1868, 1871, 1871, 1873, 1873, 1875,
     1876, 1877, 1878, 1867, 1879, 1880, 1882, 1869, 1883, 1872,
     1884, 1884, 1874, 1886, 1886, 1888, 1889, 1890, 1834, 1834,

     1891, 1891, 1892, 1881, 1893, 1885, 1838, 1838, 1887, 1894,
     1895, 1896, 1897, 1835, 1898, 1899, 1900, 1901, 1902, 1903,
     1904, 1905, 1905, 1907, 1908, 1909, 1910, 1858, 1858, 1911,
     1912, 1913, 1913, 1915, 1916, 1917, 1906, 1918, 1866, 1866,
     1919, 1919, 1868, 1868, 1921, 1914, 1920, 1920, 1871, 1871,
     1922, 1922, 1867, 1873, 1873, 1924, 1869, 1923, 1923, 1925,
     1925, 1927, 1872, 1928, 1929, 1929, 1931, 1932, 1874, 1933,
     1934, 1884, 1884, 1937, 1926, 1935, 1935, 1886, 1886, 1930,
     1936, 1936, 1938, 1939, 1939, 1941, 1885, 1891, 1891, 1942,
     1943, 1944, 1887, 1945, 1946, 1947, 1948, 1949, 1940, 1950,

     1951, 1952, 1905, 1905, 1953, 1953, 1954, 1955, 1956, 1957,
     1957, 1959, 1913, 1913, 1960, 1960, 1961, 1906, 1962, 1963,
     1964, 1919, 1919, 1958, 1920, 1920, 1914, 1965, 1922, 1922,
     1923, 1923, 1966, 1925, 1925, 1967, 1967, 1968, 1968, 1970,
     1929, 1929, 1971, 1971, 1972, 1973, 1974, 1975, 1926, 1935,
     1935, 1976, 1969, 1936, 1936, 1930, 1977, 1939, 1939, 1978,
     1978, 1979, 1979, 1981, 1982, 1983, 1984, 1985, 1986, 1987,
     1988, 1989, 1940, 1990, 1953, 1953, 1980, 1991, 1992, 1957,
     1957, 1993, 1993, 1994, 1994, 1960, 1960, 1996, 1997, 1998,
     1998, 2000, 2001, 1958, 2002, 2002, 2005, 1995, 1967, 1967,

     1968, 1968, 2006, 1999, 2004, 2004, 1971, 1971, 2007, 2003,
     2008, 2009, 2010, 2011, 2015, 1969, 1978, 1978, 1979, 1979,
     2012, 2012, 2013, 2013, 2016, 2017, 2018, 2019, 2020, 2021,
     2022, 2023, 2024, 1980, 2025, 1993, 1993, 2014, 1994, 1994,
     2026, 2026, 2027, 2028, 1998, 1998, 2029, 2029, 2030, 2031,
     2031, 2034, 1995, 2002, 2002, 2033, 2033, 2035, 1999, 2004,
     2004, 2036, 2037, 2032, 2038, 2039, 2040, 2042, 2003, 2012,
     2012, 2013, 2013, 2041, 2041, 2043, 2044, 2045, 2046, 2047,
     2048, 2049, 2050, 2051, 2052, 2053, 2014, 2026, 2026, 2054,
     2029, 2029, 2055, 2031, 2031, 2056, 2056, 2033, 2033, 2057,

     2058, 2059, 2060, 2060, 2063, 2064, 2065, 2032, 2041, 2041,
     2066, 2067, 2068, 2069, 2070, 2071, 2072, 2061, 2073, 2074,
     2075, 2076, 2056, 2056, 2077, 2078, 2078, 2080, 2080, 2060,
     2060, 2082, 2082, 2083, 2062, 2084, 2084, 2086, 2087, 2088,
     2079, 2089, 2081, 2090, 2061, 2091, 2092, 2093, 2094, 2095,
     2085, 2096, 2097, 2097, 2078, 2078, 2099, 2099, 2080, 2080,
     2100, 2100, 2082, 2082, 2101, 2084, 2084, 2098, 2103, 2079,
     2102, 2102, 2106, 2081, 2104, 2104, 2107, 2108, 2109, 2110,
     2085, 2111, 2112, 2113, 2114, 2097, 2097, 2115, 2115, 2105,
     2099, 2099, 2100, 2100, 2116, 2102, 2102, 2117, 2104, 2104,

     2098, 2118, 2118, 2119, 2120, 2120, 2122, 2122, 2124, 2125,
     2126, 2127, 2128, 2105, 2129, 2115, 2115, 2130, 2131, 2121,
     2132, 2123, 2118, 2118, 2120, 2120, 2133, 2133, 2122, 2122,
     2134, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2121,
     2142, 2143, 2144, 2123, 2133, 2133, 2134, 2134, 2145, 2146,
     2147, 2147, 2149, 2149, 2151, 2152, 2152, 2154, 2155, 2156,
     2156, 2147, 2147, 2160, 2148, 2158, 2158, 2150, 2149, 2149,
     2153, 2159, 2159, 2157, 2162, 2148, 2152, 2152, 2161, 2161,
     2163, 2163, 2166, 2150, 2156, 2156, 2165, 2165, 2158, 2158,
     2167, 2153, 2159, 2159, 2164, 2161, 2161, 2169, 2157, 2163,

     2163, 2168, 2168, 2165, 2165, 2168, 2168, 2170, 2170, 2170,
     2170, 2172, 2172, 2164, 2172, 2172,  871,  870,  869,  867,
      866,  865, 2171,  864, 2171,   23,   23,   23,   23,   23,
       34,   34,   34,   34,   34,   36,   36,   36,   36,   36,
       37,   37,   37,   37,   37,   35,   35,   35,   35,   35,
       38,   38,   38,   38,   38,   39,   39,   39,   39,   39,
       42,   42,   42,   42,   42,  101,  101,  101,  101,  102,
      858,  102,  102,  102,  103,  103,  857,  103,  103,  104,
      104,  104,  854,  104,  853,  845,  844,  843,  840,  839,
      838,  837,  834,  833,  832,  831,  830,  826,  823,  822,

      821,  820,  819,  818,  815,  814,  813,  812,  811,  809,
      808,  805,  804,  803,  802,  800,  799,  798,  797,  796,
      795,  794,  793,  792,  791,  790,  789,  788,  787,  786,
      785,  784,  783,  782,  781,  780,  778,  777,  776,  775,
      774,  773,  772,  771,  770,  769,  767,  766,  761,  760,
      759,  757,  756,  755,  754,  748,  747,  746,  743,  742,
      741,  740,  739,  738,  737,  736,  735,  734,  731,  730,
      729,  728,  725,  721,  720,  719,  718,  717,  716,  715,
      708,  707,  706,  705,  704,  703,  702,  701,  700,  699,
      698,  697,  696,  695,  694,  693,  692,  691,  690,  689,

      688,  687,  686,  685,  684,  683,  682,  681,  680,  679,
      678,  677,  674,  673,  672,  671,  670,  665,  664,  663,
      662,  659,  658,  657,  656,  655,  654,  653,  652,  651,
      650,  649,  648,  647,  646,  645,  643,  642,  639,  638,
      637,  636,  634,  633,  630,  626,  625,  624,  619,  615,
      614,  613,  612,  611,  610,  606,  605,  604,  603,  602,
      601,  598,  597,  596,  595,  594,  593,  591,  590,  589,
      588,  587,  586,  585,  579,  578,  574,  573,  572,  571,
      570,  569,  564,  563,  562,  561,  559,  555,  554,  553,
      552,  551,  550,  549,  548,  547,  546,  545,  544,  543,

      540,  539,  538,  537,  536,  531,  527,  526,  525,  524,
      523,  522,  518,  517,  516,  515,  514,  513,  510,  509,
      508,  507,  506,  505,  504,  503,  502,  501,  500,  496,
      495,  494,  493,  492,  491,  487,  486,  485,  484,  483,
      482,  481,  480,  479,  478,  474,  470,  469,  465,  464,
      463,  462,  461,  460,  459,  458,  457,  455,  454,  453,
      446,  445,  444,  443,  442,  441,  438,  437,  434,  433,
      432,  431,  430,  429,  424,  423,  422,  421,  417,  414,
      413,  412,  411,  410,  409,  408,  407,  406,  405,  404,
      403,  402,  401,  400,  399,  398,  397,  396,  395,  394,

      393,  392,  391,  387,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  375,  374,  373,  368,  367,
      366,  365,  364,  363,  362,  361,  360,  356,  355,  354,
      351,  350,  349,  348,  347,  346,  345,  344,  343,  342,
      341,  340,  335,  334,  333,  330,  327,  326,  322,  321,
      320,  319,  318,  317,  316,  315,  311,  310,  309,  308,
      307,  306,  305,  304,  303,  302,  301,  300,  297,  296,
      295,  294,  293,  292,  291,  290,  289,  288,  287,  286,
      282,  281,  280,  277,  276,  275,  274,  273,  272,  271,
      270,  269,  268,  267,  266,  261,  260,  259,  258,  255,

      254,  250,  247,  242,  234,  231,  230,  226,  225,  220,
      219,  218,  217,  216,  213,  210,  209,  204,  203,  202,
      201,  200,  199,  198,  195,  194,  193,  192,  191,  190,
      189,  188,  187,  186,  186,  185,  182,  177,  169,  166,
      165,  161,  160,  155,  154,  153,  133,  130,  129,  121,
      112,  111,  110,  109,  100,   99,   74,  106,  105,  100,
       99,   74,   70,   70, 2173,   35,   35,   35,   35,   35,
       35,   35,   35,   19, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,

     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173
    } ;

static yyconst flex_int16_t yy_chk[3440] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,    0,   16,
       17,   15,   18,    0,    1,   16,   30,   30,   25,    1,
       25,   25,   25,   47,    0,   47,   47,   47,   51,   26,
       26,   52,   52,   25,   55,   60,    0,   61,   47,   26,
       26,   26,   51,   71,   71,   60,   65,   82,   55,   26,
       61,   82,   65,   62,    1,    2,    2,    2,    2,    2,
       63,    2,   67,    2,    2,    2,    2,    2,    2,    2,
       26,    2,    2,   62,   67,   28,   28,   75,   75,    2,
       63,   48,   48,   28,    2,   28,   28,   28,   83,  737,

       83,   48,   48,   48,   66,   28,   92,   66,   98,   98,
      738,   48,   73,   73,   66,   86,   73,   73,   73,   89,
       86,   86,  138,   92,  138,  739,   28,   89,   96,    2,
       21,   21,   48,   96,   21,  740,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,  741,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   23,   23,   91,  742,  124,  124,  115,

       23,   23,   23,   23,   23,   23,   23,  127,   23,   91,
       94,  124,   91,   91,   91,  115,   23,   50,   50,  156,
       94,   23,  156,  127,  123,   50,   94,   50,   50,   50,
       94,  123,   23,   23,   23,   23,   23,   50,   23,  144,
      743,   23,   23,   23,   23,   72,   72,  144,   23,   23,
       23,   23,   23,   29,  151,   72,   72,   72,   50,  151,
       29,  147,  129,  132,  132,   72,  744,   29,  129,  131,
      131,  131,  137,  132,  132,  132,  137,  141,  147,  175,
      175,  153,  141,  141,  186,  186,   72,  153,   29,   29,
       29,   29,   29,   29,   29,  153,   29,   29,  745,   29,

       29,   29,   29,   29,  746,   29,   29,   29,   29,   29,
       77,   77,   77,   77,   77,   77,   77,  747,   77,   77,
      146,   77,   77,   77,   77,   77,  149,   77,   77,   77,
       77,   77,  221,  162,  146,  221,  149,  146,  146,  146,
      162,  179,  149,  162,  162,  254,  149,  752,  179,  254,
      179,  194,  194,  207,  207,  208,  208,  218,  208,  227,
      208,  223,  223,  218,  753,  194,  227,  207,  244,  227,
      227,  218,  240,  240,  754,  244,  223,  244,  255,  255,
      271,  271,  296,  296,  298,  298,  299,  299,  756,  271,
      300,  300,  305,  305,  306,  306,  296,  377,  298,  757,

      312,  312,  759,  312,  300,  312,  305,  760,  306,  316,
      316,  319,  319,  326,  327,  327,  761,  326,  331,  331,
      332,  332,  393,  316,  393,  319,  342,  342,  400,  327,
      345,  345,  400,  331,  377,  347,  347,  358,  358,  345,
      765,  342,  365,  365,  384,  384,  391,  391,  767,  342,
      347,  769,  358,  384,  478,  391,  478,  365,  770,  384,
      458,  391,  394,  394,  415,  415,  418,  418,  771,  327,
      327,  515,  358,  515,  419,  419,  347,  394,  415,  416,
      416,  772,  416,  523,  416,  420,  420,  365,  419,  425,
      425,  426,  426,  427,  427,  428,  428,  458,  428,  523,

      428,  435,  435,  425,  773,  436,  436,  427,  436,  775,
      436,  439,  439,  440,  440,  435,  440,  777,  440,  441,
      441,  449,  449,  450,  450,  439,  456,  456,  465,  465,
      466,  466,  780,  441,  467,  467,  449,  474,  474,  475,
      475,  476,  476,  465,  781,  466,  479,  479,  483,  483,
      782,  485,  474,  783,  475,  485,  488,  488,  489,  489,
      603,  479,  603,  483,  494,  494,  497,  497,  498,  498,
      681,  488,  681,  519,  519,  786,  521,  521,  483,  494,
      787,  497,  519,  528,  528,  789,  530,  530,  519,  521,
      534,  534,  528,  560,  560,  565,  565,  790,  528,  530,

      791,  556,  556,  792,  556,  534,  556,  566,  566,  766,
      566,  766,  566,  571,  571,  572,  572,  573,  573,  575,
      575,  793,  575,  797,  575,  580,  580,  571,  580,  572,
      580,  573,  583,  583,  584,  584,  798,  584,  799,  584,
      586,  586,  591,  591,  592,  592,  583,  607,  607,  608,
      608,  609,  609,  611,  586,  610,  610,  591,  616,  616,
      617,  617,  607,  618,  618,  622,  622,  623,  623,  611,
      610,  624,  624,  616,  627,  627,  628,  628,  635,  635,
      622,  640,  640,  641,  641,  800,  624,  644,  644,  627,
      665,  665,  666,  666,  671,  688,  640,  802,  671,  688,

      624,  674,  674,  675,  675,  666,  690,  690,  697,  697,
      702,  702,  708,  708,  806,  690,  675,  709,  709,  710,
      710,  690,  697,  807,  702,  794,  708,  711,  711,  712,
      712,  709,  712,  794,  712,  713,  713,  714,  714,  719,
      719,  711,  722,  722,  755,  722,  808,  722,  755,  713,
      725,  725,  809,  719,  726,  726,  727,  727,  811,  727,
      812,  727,  732,  732,  725,  733,  733,  813,  726,  748,
      748,  749,  749,  750,  750,  751,  751,  732,  758,  758,
      762,  762,  763,  763,  748,  764,  764,  774,  750,  768,
      768,  774,  776,  776,  778,  778,  814,  763,  779,  779,

      796,  796,  796,  801,  801,  803,  803,  776,  815,  778,
      810,  810,  796,  816,  803,  817,  818,  819,  796,  820,
      803,  821,  822,  823,  824,  825,  826,  827,  827,  823,
      828,  829,  829,  830,  832,  833,  827,  834,  834,  835,
      835,  837,  827,  839,  829,  836,  836,  840,  836,  843,
      836,  834,  850,  835,  838,  838,  841,  841,  842,  842,
      851,  842,  853,  842,  844,  844,  848,  848,  838,  845,
      841,  845,  852,  852,  845,  845,  846,  846,  844,  854,
      845,  845,  862,  845,  847,  847,  845,  847,  863,  847,
      846,  849,  849,  864,  849,  867,  849,  855,  855,  856,

      856,  869,  856,  871,  856,  859,  859,  860,  860,  872,
      860,  855,  860,  861,  861,  873,  861,  874,  861,  859,
      865,  865,  866,  866,  868,  868,  870,  870,  875,  879,
      876,  877,  877,  880,  881,  865,  882,  866,  876,  884,
      884,  870,  878,  878,  878,  889,  877,  883,  883,  885,
      885,  886,  886,  890,  878,  887,  887,  888,  888,  891,
      878,  892,  883,  893,  894,  895,  886,  896,  896,  897,
      887,  898,  888,  899,  900,  901,  902,  902,  903,  904,
      905,  905,  906,  907,  908,  909,  909,  910,  910,  911,
      915,  902,  912,  912,  916,  905,  913,  913,  914,  914,

      909,  917,  918,  919,  920,  921,  922,  912,  905,  923,
      924,  925,  926,  914,  905,  927,  928,  902,  929,  930,
      931,  932,  933,  934,  935,  934,  936,  937,  937,  938,
      939,  939,  940,  941,  942,  943,  937,  944,  945,  946,
      947,  948,  937,  939,  949,  950,  953,  954,  955,  956,
      955,  957,  958,  959,  960,  961,  961,  962,  962,  963,
      964,  966,  967,  967,  968,  968,  970,  968,  971,  968,
      962,  972,  969,  969,  975,  969,  967,  969,  973,  973,
      974,  974,  976,  974,  978,  974,  977,  977,  979,  977,
      980,  977,  973,  981,  981,  982,  982,  983,  982,  984,

      982,  984,  985,  986,  987,  989,  988,  981,  990,  991,
      991,  992,  991,  993,  991,  996,  997,  999, 1000, 1002,
     1003, 1006,  987,  988, 1011,  998,  998,  989,  998, 1012,
      998, 1001, 1001, 1015, 1001, 1016, 1001, 1007, 1007, 1008,
     1008, 1009, 1009, 1010, 1010, 1013, 1013, 1014, 1014, 1017,
     1018, 1019, 1007, 1020, 1021, 1024, 1009, 1022, 1022, 1025,
     1013, 1023, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
     1031, 1040, 1022, 1033, 1033, 1034, 1034, 1035, 1035, 1036,
     1036, 1037, 1037, 1038, 1038, 1039, 1039, 1041, 1042, 1043,
     1034, 1044, 1045, 1046, 1036, 1047, 1048, 1049, 1038, 1050,

     1050, 1051, 1051, 1052, 1052, 1053, 1053, 1054, 1055, 1056,
     1059, 1056, 1057, 1057, 1050, 1060, 1051, 1061, 1052, 1058,
     1058, 1062, 1063, 1064, 1064, 1065, 1070, 1057, 1066, 1066,
     1067, 1067, 1068, 1068, 1069, 1069, 1071, 1072, 1073, 1074,
     1075, 1076, 1077, 1078, 1079, 1067, 1080, 1081, 1082, 1069,
     1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
     1092, 1093, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
     1101, 1102, 1103, 1104, 1093, 1105, 1106, 1107, 1108, 1109,
     1110, 1111, 1112, 1113, 1114, 1115, 1115, 1116, 1117, 1119,
     1119, 1120, 1119, 1121, 1119, 1124, 1125, 1125, 1126, 1125,

     1127, 1125, 1128, 1129, 1132, 1133, 1133, 1136, 1133, 1138,
     1133, 1137, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145,
     1146, 1147, 1150, 1151, 1156, 1137, 1157, 1157, 1158, 1158,
     1159, 1160, 1161, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
     1168, 1169, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
     1177, 1178, 1179, 1180, 1180, 1181, 1181, 1182, 1182, 1183,
     1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193,
     1193, 1194, 1194, 1195, 1195, 1196, 1196, 1197, 1197, 1198,
     1199, 1200, 1201, 1203, 1193, 1202, 1202, 1204, 1195, 1205,
     1206, 1207, 1208, 1209, 1209, 1210, 1210, 1211, 1211, 1212,

     1212, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
     1210, 1223, 1224, 1225, 1212, 1226, 1227, 1228, 1229, 1230,
     1231, 1232, 1233, 1234, 1234, 1235, 1236, 1237, 1238, 1239,
     1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250,
     1251, 1253, 1254, 1255, 1256, 1260, 1260, 1263, 1263, 1264,
     1264, 1265, 1266, 1266, 1267, 1267, 1268, 1268, 1269, 1260,
     1270, 1263, 1271, 1264, 1272, 1272, 1266, 1273, 1267, 1274,
     1275, 1276, 1276, 1277, 1278, 1278, 1279, 1282, 1272, 1280,
     1280, 1281, 1281, 1283, 1284, 1276, 1285, 1286, 1278, 1287,
     1288, 1289, 1290, 1280, 1291, 1292, 1281, 1293, 1294, 1295,

     1296, 1297, 1298, 1299, 1300, 1272, 1301, 1266, 1302, 1303,
     1304, 1305, 1305, 1306, 1307, 1308, 1309, 1310, 1313, 1278,
     1311, 1311, 1312, 1312, 1314, 1315, 1305, 1316, 1317, 1318,
     1318, 1319, 1320, 1321, 1322, 1322, 1323, 1323, 1324, 1324,
     1325, 1325, 1326, 1328, 1318, 1329, 1329, 1330, 1333, 1322,
     1332, 1332, 1335, 1324, 1329, 1336, 1337, 1338, 1339, 1332,
     1329, 1340, 1341, 1342, 1343, 1332, 1344, 1345, 1345, 1346,
     1347, 1349, 1350, 1351, 1351, 1352, 1353, 1354, 1355, 1356,
     1357, 1358, 1345, 1359, 1360, 1362, 1363, 1364, 1351, 1365,
     1366, 1366, 1367, 1367, 1375, 1367, 1377, 1367, 1368, 1368,

     1369, 1369, 1370, 1370, 1366, 1371, 1371, 1372, 1372, 1373,
     1373, 1378, 1368, 1374, 1374, 1379, 1370, 1376, 1376, 1380,
     1380, 1372, 1382, 1373, 1381, 1381, 1383, 1384, 1385, 1386,
     1386, 1387, 1387, 1380, 1388, 1389, 1389, 1390, 1390, 1391,
     1392, 1393, 1393, 1386, 1394, 1394, 1395, 1395, 1397, 1389,
     1396, 1396, 1384, 1398, 1398, 1393, 1399, 1400, 1400, 1401,
     1404, 1395, 1402, 1402, 1403, 1403, 1405, 1405, 1398, 1406,
     1407, 1408, 1400, 1409, 1410, 1411, 1412, 1402, 1413, 1403,
     1414, 1405, 1415, 1416, 1417, 1417, 1418, 1419, 1420, 1420,
     1421, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1417,

     1429, 1430, 1434, 1420, 1431, 1431, 1432, 1432, 1433, 1433,
     1435, 1436, 1437, 1437, 1438, 1438, 1439, 1439, 1440, 1431,
     1443, 1432, 1442, 1442, 1445, 1444, 1444, 1437, 1447, 1448,
     1448, 1442, 1446, 1446, 1449, 1450, 1451, 1442, 1444, 1452,
     1453, 1446, 1448, 1454, 1455, 1456, 1457, 1446, 1459, 1460,
     1460, 1461, 1461, 1462, 1465, 1466, 1466, 1467, 1467, 1471,
     1472, 1473, 1474, 1475, 1460, 1476, 1477, 1478, 1479, 1480,
     1466, 1481, 1481, 1482, 1481, 1483, 1481, 1484, 1484, 1485,
     1485, 1486, 1486, 1487, 1487, 1489, 1487, 1490, 1487, 1488,
     1488, 1491, 1491, 1492, 1494, 1486, 1493, 1493, 1495, 1496,

     1497, 1497, 1498, 1499, 1499, 1491, 1500, 1501, 1501, 1495,
     1502, 1503, 1503, 1506, 1497, 1495, 1504, 1504, 1505, 1505,
     1507, 1507, 1508, 1508, 1512, 1503, 1509, 1509, 1510, 1510,
     1511, 1511, 1513, 1513, 1517, 1507, 1514, 1514, 1515, 1515,
     1520, 1509, 1521, 1510, 1516, 1516, 1522, 1513, 1518, 1518,
     1519, 1519, 1523, 1515, 1524, 1525, 1526, 1527, 1528, 1528,
     1529, 1530, 1530, 1518, 1531, 1531, 1532, 1532, 1533, 1533,
     1534, 1535, 1535, 1528, 1536, 1536, 1530, 1537, 1537, 1531,
     1538, 1538, 1539, 1533, 1540, 1541, 1542, 1543, 1544, 1536,
     1545, 1545, 1537, 1546, 1546, 1538, 1547, 1547, 1548, 1548,

     1549, 1550, 1551, 1551, 1552, 1545, 1553, 1553, 1554, 1554,
     1555, 1556, 1559, 1548, 1557, 1557, 1558, 1558, 1561, 1556,
     1562, 1554, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1558,
     1570, 1570, 1571, 1573, 1573, 1574, 1575, 1576, 1577, 1578,
     1581, 1582, 1583, 1586, 1586, 1589, 1586, 1590, 1586, 1591,
     1591, 1592, 1592, 1548, 1593, 1593, 1594, 1595, 1596, 1597,
     1598, 1599, 1599, 1591, 1600, 1600, 1601, 1602, 1593, 1603,
     1604, 1604, 1596, 1605, 1605, 1599, 1605, 1606, 1605, 1607,
     1607, 1608, 1608, 1611, 1604, 1609, 1609, 1610, 1610, 1612,
     1612, 1611, 1613, 1613, 1614, 1614, 1608, 1615, 1615, 1616,

     1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1624, 1614,
     1625, 1625, 1626, 1627, 1627, 1628, 1628, 1629, 1629, 1630,
     1630, 1639, 1624, 1631, 1631, 1632, 1632, 1640, 1627, 1633,
     1633, 1634, 1634, 1641, 1630, 1635, 1635, 1636, 1636, 1642,
     1632, 1637, 1637, 1643, 1633, 1638, 1638, 1644, 1644, 1649,
     1635, 1645, 1645, 1646, 1646, 1650, 1637, 1647, 1647, 1648,
     1648, 1651, 1644, 1652, 1652, 1653, 1654, 1655, 1646, 1656,
     1656, 1657, 1658, 1659, 1648, 1660, 1661, 1662, 1663, 1664,
     1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1674, 1675,
     1676, 1677, 1678, 1678, 1679, 1679, 1680, 1680, 1681, 1682,

     1683, 1684, 1685, 1686, 1687, 1687, 1688, 1689, 1679, 1690,
     1691, 1691, 1694, 1691, 1696, 1691, 1695, 1695, 1697, 1698,
     1698, 1699, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706,
     1707, 1708, 1708, 1709, 1698, 1710, 1710, 1711, 1711, 1712,
     1712, 1713, 1713, 1714, 1714, 1715, 1715, 1716, 1716, 1717,
     1718, 1719, 1720, 1721, 1712, 1722, 1722, 1723, 1723, 1724,
     1724, 1725, 1725, 1726, 1726, 1727, 1727, 1728, 1729, 1730,
     1722, 1731, 1732, 1733, 1734, 1735, 1725, 1736, 1737, 1738,
     1727, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1747, 1748,
     1749, 1750, 1750, 1751, 1752, 1753, 1753, 1754, 1755, 1756,

     1757, 1758, 1759, 1760, 1761, 1762, 1750, 1763, 1764, 1765,
     1766, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
     1775, 1776, 1776, 1777, 1778, 1779, 1779, 1780, 1781, 1782,
     1782, 1783, 1783, 1784, 1784, 1785, 1785, 1786, 1788, 1789,
     1779, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1784, 1797,
     1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1807, 1808,
     1808, 1809, 1810, 1811, 1795, 1812, 1813, 1814, 1815, 1816,
     1816, 1818, 1807, 1817, 1817, 1819, 1819, 1820, 1820, 1821,
     1822, 1823, 1824, 1816, 1825, 1826, 1827, 1817, 1828, 1819,
     1829, 1829, 1820, 1830, 1830, 1831, 1832, 1833, 1834, 1834,

     1835, 1835, 1836, 1826, 1837, 1829, 1838, 1838, 1830, 1839,
     1840, 1841, 1843, 1834, 1844, 1845, 1847, 1848, 1849, 1850,
     1851, 1852, 1852, 1853, 1855, 1856, 1857, 1858, 1858, 1859,
     1860, 1861, 1861, 1862, 1863, 1864, 1852, 1865, 1866, 1866,
     1867, 1867, 1868, 1868, 1870, 1861, 1869, 1869, 1871, 1871,
     1872, 1872, 1866, 1873, 1873, 1875, 1868, 1874, 1874, 1876,
     1876, 1877, 1871, 1878, 1879, 1879, 1880, 1881, 1873, 1882,
     1883, 1884, 1884, 1888, 1876, 1885, 1885, 1886, 1886, 1879,
     1887, 1887, 1889, 1890, 1890, 1892, 1884, 1891, 1891, 1893,
     1894, 1895, 1886, 1896, 1897, 1899, 1900, 1901, 1890, 1902,

     1903, 1904, 1905, 1905, 1906, 1906, 1907, 1909, 1910, 1911,
     1911, 1912, 1913, 1913, 1914, 1914, 1915, 1905, 1916, 1917,
     1918, 1919, 1919, 1911, 1920, 1920, 1913, 1921, 1922, 1922,
     1923, 1923, 1924, 1925, 1925, 1926, 1926, 1927, 1927, 1928,
     1929, 1929, 1930, 1930, 1931, 1932, 1933, 1934, 1925, 1935,
     1935, 1937, 1927, 1936, 1936, 1929, 1938, 1939, 1939, 1940,
     1940, 1941, 1941, 1942, 1943, 1944, 1946, 1947, 1948, 1949,
     1950, 1951, 1939, 1952, 1953, 1953, 1941, 1954, 1956, 1957,
     1957, 1958, 1958, 1959, 1959, 1960, 1960, 1961, 1962, 1963,
     1963, 1964, 1965, 1957, 1966, 1966, 1970, 1959, 1967, 1967,

     1968, 1968, 1972, 1963, 1969, 1969, 1971, 1971, 1973, 1966,
     1974, 1975, 1976, 1977, 1982, 1968, 1978, 1978, 1979, 1979,
     1980, 1980, 1981, 1981, 1983, 1984, 1985, 1986, 1987, 1988,
     1989, 1990, 1991, 1979, 1992, 1993, 1993, 1981, 1994, 1994,
     1995, 1995, 1996, 1997, 1998, 1998, 1999, 1999, 2000, 2001,
     2001, 2005, 1994, 2002, 2002, 2003, 2003, 2006, 1998, 2004,
     2004, 2007, 2008, 2001, 2009, 2010, 2011, 2015, 2002, 2012,
     2012, 2013, 2013, 2014, 2014, 2016, 2017, 2018, 2019, 2020,
     2021, 2022, 2023, 2024, 2025, 2027, 2013, 2026, 2026, 2028,
     2029, 2029, 2030, 2031, 2031, 2032, 2032, 2033, 2033, 2034,

     2035, 2036, 2037, 2037, 2038, 2039, 2040, 2031, 2041, 2041,
     2042, 2043, 2044, 2045, 2048, 2050, 2051, 2037, 2052, 2053,
     2054, 2055, 2056, 2056, 2057, 2058, 2058, 2059, 2059, 2060,
     2060, 2061, 2061, 2062, 2037, 2063, 2063, 2064, 2065, 2066,
     2058, 2067, 2059, 2068, 2060, 2070, 2071, 2073, 2074, 2075,
     2063, 2076, 2077, 2077, 2078, 2078, 2079, 2079, 2080, 2080,
     2081, 2081, 2082, 2082, 2083, 2084, 2084, 2077, 2086, 2078,
     2085, 2085, 2088, 2080, 2087, 2087, 2089, 2090, 2091, 2092,
     2084, 2093, 2094, 2095, 2096, 2097, 2097, 2098, 2098, 2087,
     2099, 2099, 2100, 2100, 2101, 2102, 2102, 2103, 2104, 2104,

     2097, 2105, 2105, 2106, 2107, 2107, 2108, 2108, 2109, 2110,
     2111, 2112, 2113, 2104, 2114, 2115, 2115, 2116, 2117, 2107,
     2119, 2108, 2118, 2118, 2120, 2120, 2121, 2121, 2122, 2122,
     2123, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2120,
     2131, 2132, 2136, 2122, 2133, 2133, 2134, 2134, 2138, 2139,
     2140, 2140, 2141, 2141, 2142, 2143, 2143, 2144, 2145, 2146,
     2146, 2147, 2147, 2151, 2140, 2148, 2148, 2141, 2149, 2149,
     2143, 2150, 2150, 2146, 2154, 2147, 2152, 2152, 2153, 2153,
     2155, 2155, 2160, 2149, 2156, 2156, 2157, 2157, 2158, 2158,
     2162, 2152, 2159, 2159, 2155, 2161, 2161, 2166, 2156, 2163,

     2163, 2164, 2164, 2165, 2165, 2168, 2168, 2169, 2169, 2170,
     2170, 2171, 2171, 2163, 2172, 2172,  736,  735,  734,  731,
      730,  729, 2169,  728, 2170, 2174, 2174, 2174, 2174, 2174,
     2175, 2175, 2175, 2175, 2175, 2176, 2176, 2176, 2176, 2176,
     2177, 2177, 2177, 2177, 2177, 2178, 2178, 2178, 2178, 2178,
     2179, 2179, 2179, 2179, 2179, 2180, 2180, 2180, 2180, 2180,
     2181, 2181, 2181, 2181, 2181, 2182, 2182, 2182, 2182, 2183,
      724, 2183, 2183, 2183, 2184, 2184,  723, 2184, 2184, 2185,
     2185, 2185,  718, 2185,  715,  707,  704,  703,  701,  700,
      699,  698,  696,  695,  694,  693,  691,  689,  687,  686,

      685,  684,  683,  682,  680,  679,  678,  677,  676,  673,
      672,  670,  669,  668,  667,  663,  662,  661,  660,  659,
      658,  657,  656,  655,  654,  653,  652,  651,  650,  649,
      648,  647,  646,  645,  643,  642,  639,  638,  637,  636,
      634,  633,  632,  631,  630,  629,  626,  625,  621,  620,
      619,  615,  614,  613,  612,  606,  605,  604,  602,  601,
      600,  599,  598,  597,  596,  595,  594,  593,  590,  589,
      588,  587,  585,  582,  581,  579,  578,  577,  576,  574,
      570,  569,  568,  567,  564,  563,  562,  561,  559,  555,
      554,  553,  552,  551,  550,  549,  548,  547,  546,  545,

      544,  543,  542,  541,  540,  539,  538,  537,  536,  533,
      532,  531,  529,  527,  526,  525,  524,  520,  518,  517,
      516,  514,  513,  512,  511,  510,  509,  508,  507,  506,
      505,  503,  502,  501,  500,  499,  496,  495,  493,  492,
      491,  490,  487,  486,  484,  482,  481,  480,  477,  473,
      472,  471,  470,  469,  468,  464,  463,  462,  461,  460,
      459,  457,  455,  454,  453,  452,  451,  448,  447,  446,
      445,  444,  443,  442,  438,  437,  434,  433,  432,  431,
      430,  429,  424,  423,  422,  421,  417,  414,  413,  412,
      411,  410,  409,  408,  406,  405,  404,  403,  402,  401,

      399,  398,  397,  396,  395,  392,  390,  389,  388,  387,
      386,  385,  383,  382,  381,  380,  379,  378,  376,  375,
      374,  373,  372,  371,  370,  369,  368,  367,  366,  364,
      363,  362,  361,  360,  359,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  346,  344,  343,  341,  340,
      339,  338,  337,  336,  335,  334,  333,  330,  329,  328,
      325,  324,  323,  322,  321,  320,  318,  317,  315,  311,
      310,  309,  308,  307,  304,  303,  302,  301,  297,  295,
      294,  293,  292,  291,  290,  289,  288,  287,  286,  285,
      284,  283,  282,  281,  280,  279,  278,  277,  276,  275,

      274,  273,  272,  270,  269,  268,  267,  266,  265,  264,
      263,  262,  261,  260,  259,  258,  257,  256,  253,  252,
      251,  250,  249,  248,  247,  246,  245,  243,  242,  241,
      239,  238,  237,  236,  235,  234,  233,  232,  231,  230,
      229,  228,  226,  225,  224,  222,  220,  219,  216,  215,
      214,  213,  212,  211,  210,  209,  206,  205,  204,  203,
      202,  201,  200,  199,  198,  197,  196,  195,  193,  192,
      191,  190,  189,  188,  185,  184,  183,  182,  181,  180,
      178,  177,  176,  174,  173,  172,  171,  170,  169,  168,
      167,  166,  165,  164,  163,  161,  160,  159,  157,  155,

      154,  152,  150,  148,  145,  143,  142,  140,  139,  136,
      135,  134,  133,  130,  128,  126,  125,  122,  121,  120,
      119,  118,  117,  116,  114,  113,  112,  111,  110,  109,
      108,  107,  105,  100,   99,   97,   95,   93,   90,   88,
       87,   85,   84,   81,   80,   79,   76,   69,   68,   64,
       59,   58,   57,   56,   54,   53,   49,   44,   41,   32,
       31,   27,   24,   22,   19,   14,   13,    8,    7,    6,
        5,    4,    3, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,

     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[279] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
/* $Id$ */
/** @file parseosol.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
 *
 * \remarks
 * Copyright (C) 2005-2011, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 15 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"

#include "OSConfig.h"

#include <iostream>
#include <sstream>  

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 

//#define PARSERDEBUG
#ifdef PARSERDEBUG

	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSGeneral.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"
#include "OSoLParserData.h"

using std::cout;
using std::endl;
using std::ostringstream;









#line 103 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 2038 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osollex_init (yyscan_t* scanner);

int osollex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 113 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"


 
#line 2294 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2174 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3374 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 116 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 120 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 121 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 122 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 123 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 125 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 141 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 143 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 144 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 145 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 146 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 147 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 148 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 149 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 150 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 151 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 152 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 153 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 154 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 155 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 156 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 157 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 158 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 159 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 160 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 161 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 162 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 163 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 164 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 165 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LBDUALVALUEATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 166 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UBDUALVALUEATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 170 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 171 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 172 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 173 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 174 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 175 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 176 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 177 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 178 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 179 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 180 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 181 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 182 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 183 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 184 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 185 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 186 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 187 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 188 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 189 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 190 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 191 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 192 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 193 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 194 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 195 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 196 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 197 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 198 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 199 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 200 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 201 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 202 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 203 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 204 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 205 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 206 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 207 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 208 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 209 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 210 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 211 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 212 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 213 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 214 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 215 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 216 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 217 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 218 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 219 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 220 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 221 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 222 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 223 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 224 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 225 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 226 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 227 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 228 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 229 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 231 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 232 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 233 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 234 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 235 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 236 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 238 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 239 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 240 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 242 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{return(OSOLSTARTEMPTY);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 243 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 244 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 246 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 247 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 249 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 250 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 252 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 253 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 255 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 256 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 258 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 259 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 261 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 262 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 265 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 266 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 267 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 268 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 269 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 270 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 271 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 272 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 273 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 274 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 275 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 276 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 277 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 278 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 279 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 280 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 281 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 282 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 283 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 284 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 285 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 286 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 287 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 288 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 290 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 291 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 292 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 293 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 294 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 295 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 296 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 297 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 298 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 299 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 300 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 301 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 303 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 304 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 306 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 307 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 308 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMESTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 309 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMEEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 310 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 311 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 312 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 313 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 314 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 315 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 316 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 317 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 318 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 319 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 320 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 321 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 322 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 323 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 324 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 325 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 326 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 327 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 328 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 329 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 330 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 331 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 332 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 333 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 334 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 335 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 336 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 337 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 338 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 339 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 342 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 343 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 344 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 345 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 346 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 347 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 348 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 349 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 350 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 351 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 352 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 353 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 354 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 355 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 356 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYSTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 357 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYEND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 358 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 359 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 360 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 361 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 362 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 363 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 364 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 365 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 366 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 367 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 368 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 369 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 370 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 371 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 372 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 373 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 374 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 375 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 376 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 377 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 378 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 379 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 380 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 381 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 382 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 383 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 384 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 385 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 386 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 387 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 388 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 389 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 390 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 391 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 392 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 393 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
/* The <item> element and the children of the option header are treated specially because they may legitimately contain special characters */
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 398 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 399 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 400 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 401 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 403 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 404 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 405 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 406 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 408 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 409 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 410 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 411 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 413 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 414 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 415 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 416 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 418 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 419 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 420 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 421 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 423 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 424 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 425 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 426 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
/* environments and comments */
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 430 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 431 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 433 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 267:
#line 435 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 435 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 436 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 438 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 271:
#line 440 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 440 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 441 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 274:
/* rule 274 can match eol */
YY_RULE_SETUP
#line 444 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 275:
/* rule 275 can match eol */
YY_RULE_SETUP
#line 445 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 276:
/* rule 276 can match eol */
YY_RULE_SETUP
#line 446 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 450 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 462 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"
ECHO;
	YY_BREAK
#line 4075 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osolrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2174 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2174 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2173);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osollex_init_extra has the same functionality as osollex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osolalloc in
 * the yyextra field.
 */

int osollex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osolset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osolset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 462 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosol.l"






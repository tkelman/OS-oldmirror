#line 2 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.cpp"

#line 4 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osolrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osollex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osolrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osolrestart (FILE *input_file ,yyscan_t yyscanner );
void osol_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osol_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osol_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osolpop_buffer_state (yyscan_t yyscanner );

static void osolensure_buffer_stack (yyscan_t yyscanner );
static void osol_load_buffer_state (yyscan_t yyscanner );
static void osol_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osol_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osol_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osol_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osolalloc (yy_size_t ,yyscan_t yyscanner );
void *osolrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osolfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osol_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osolensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osolwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 262
#define YY_END_OF_BUFFER 263
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2120] =
    {   0,
        1,    1,  260,  260,  258,  258,  259,  259,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  263,  261,
        1,    2,  248,    2,  248,    6,  248,    5,  261,    4,
      248,  248,    2,  260,  262,  258,  259,  249,  251,  252,
      251,  255,  256,  255,    1,  248,  248,    6,  248,    5,
        0,    4,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,    3,    6,    6,
      248,    7,    5,    0,    0,  254,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    4,  248,  248,  260,  258,

      259,  249,    0,  257,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,    6,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  134,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        6,  253,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,

      248,  248,  248,  248,  248,  248,  248,  250,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  214,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   96,    0,
        0,    0,    0,  206,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  198,    0,    0,    0,    0,    0,
        0,  200,  248,  248,  248,  248,  248,   27,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,

       78,   79,  248,  248,  248,  248,  248,  248,  248,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  135,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  146,    0,    0,    0,    0,    0,
        0,    0,    0,  136,    0,    0,    0,  248,  248,  248,

      248,  248,   27,  248,   82,  248,  248,  248,  248,  248,
       83,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,    0,    0,    0,    0,
        0,    0,  215,    0,    0,    0,    0,    0,  135,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   97,
        0,    0,    0,    0,    0,    0,    0,    0,  207,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  199,    0,    0,    0,    0,    0,    0,    0,    0,
      201,    0,    0,    0,    0,    0,  180,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  225,  108,    0,    0,    0,    0,    0,
        0,    0,  229,    0,    0,    0,   86,   85,  122,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  248,  248,  248,   76,   77,  248,
       82,  248,  248,  248,  248,   83,  248,   48,   49,  248,
      248,  248,  248,  248,  248,   56,   57,  248,  248,  248,
       66,   67,  248,  248,  248,    0,    0,    0,    0,    0,
      215,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  226,   97,    0,    0,
        0,    0,    0,    0,    0,  230,  207,    0,    0,    0,

        0,   87,    0,    0,    0,    0,  147,    0,    0,    0,
        0,    0,    0,  199,    0,    0,    0,    0,    0,  137,
        0,    0,  201,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  188,  227,  225,    0,    0,    0,    0,    0,
        0,    0,  231,  229,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       92,    0,    0,    0,  248,  248,  248,  248,  248,  248,
      248,   46,   47,  248,  248,   84,  248,  248,  248,   28,
      248,   54,   55,  248,  248,   64,   65,  248,   70,   71,

      248,  248,    0,    0,    0,    0,    0,  181,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  226,    0,  109,    0,    0,    0,    0,
        0,    0,  230,    0,    0,    0,   87,    0,  123,    0,
        0,    0,  147,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  137,    0,    0,    0,    0,  182,  184,
        0,    0,  118,    0,    0,    0,    0,    0,    0,   90,
        0,    0,    0,    0,    0,  227,    0,    0,  112,  138,
        0,    0,    0,    0,  231,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  170,    0,    0,   94,    0,    0,

        0,    0,    0,  233,    0,  192,    0,    0,  248,  248,
      248,  248,  248,  248,  248,  248,  248,   84,  248,   52,
       53,   28,  248,  248,  248,  248,   68,   69,  248,   74,
       75,    0,    0,    0,    0,  181,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  189,  109,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  123,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  234,    0,    0,
       93,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  245,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  116,  158,
        0,    0,    0,    0,    0,    0,    0,    0,  235,  233,
        0,    0,  114,    0,  248,  248,  248,  248,  248,  248,
       42,   43,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,   50,   51,  248,  248,  248,   62,   63,
       72,   73,    0,    0,  183,    0,  185,    0,    0,    0,
      119,    0,    0,    0,    0,    0,    0,    0,    0,   91,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  189,
        0,  246,    0,  113,    0,  139,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  171,
        0,    0,    0,    0,   95,    0,    0,    0,    0,    0,
      234,    0,   93,    0,  193,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  247,  245,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  235,    0,    0,  172,  248,   34,   35,  248,  248,
      248,   40,   41,  248,  248,   80,   81,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,

      248,   60,   61,    0,  183,  185,    0,    0,  119,    0,
        0,    0,    0,    0,    0,    0,   91,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  246,  113,  139,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  117,    0,  159,  171,    0,    0,    0,    0,   95,
        0,    0,    0,    0,    0,    0,  193,    0,  115,    0,
      186,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  247,    0,    0,    0,    0,    0,    0,  202,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  100,

        0,    0,    0,    0,  190,   32,   33,  248,  248,  248,
      248,  248,  248,   10,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  117,  159,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  115,    0,
      173,    0,  210,    0,    0,    0,  222,    0,    0,  152,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  128,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  102,    0,    0,    0,
        0,  248,  248,  248,   29,  248,   30,  248,  248,   25,
      248,   10,  248,  248,  248,  248,   23,  248,  248,  248,
      248,  248,   21,  248,  248,   20,  248,  248,  248,   31,
        0,  187,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  203,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  101,    0,
        0,    0,    0,  191,  173,    0,  142,    0,    0,  237,
        0,    0,    0,  241,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  104,    0,    0,  224,    0,  130,  124,
        0,    0,  228,   98,   88,  120,    0,    0,    0,    0,
        0,    0,  220,    0,    0,    0,  248,   38,   39,   29,
       30,  248,  248,   25,  248,  248,  248,  248,   23,  248,
      248,  248,  248,  248,   21,  248,   20,  248,  248,   31,
      187,    0,    0,  211,    0,    0,  238,    0,    0,  223,
        0,  242,    0,    0,  153,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  129,    0,    0,
      203,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  103,  101,    0,    0,    0,  191,    0,  239,  237,

        0,    0,  243,  241,    0,  166,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  224,    0,  126,  228,    0,
        0,    0,    0,    0,  148,  218,    0,    0,    0,   36,
       37,  248,   45,   44,  248,  248,  248,   13,  248,  248,
      248,  248,  248,  248,  248,   12,  248,  248,  248,  248,
      248,    0,  211,    0,  143,  238,    0,  223,  242,    0,
      153,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      105,    0,    0,  131,  129,    0,  125,    0,    0,   99,
        0,   89,    0,  121,    0,    0,    0,    0,    0,    0,
      103,    0,  221,    0,    0,    0,    0,  239,    0,    0,

        0,  243,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  110,    0,
        0,  248,  248,   13,  248,    9,  248,  248,  248,  248,
      248,  248,   12,  248,  248,  248,  248,   59,   58,    0,
      143,    0,    0,    0,  167,    0,    0,    0,    0,    0,
        0,    0,    0,  105,    0,  131,  125,    0,  127,   99,
       89,  121,    0,    0,    0,    0,    0,    0,  149,  221,
        0,  219,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  168,    0,    0,    0,    0,  248,  248,    9,  248,

      248,  248,  248,  248,  248,  248,  248,  248,    0,    0,
        0,  167,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  127,    0,    0,    0,    0,    0,  149,  219,    0,
      111,    0,  132,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  156,  106,    0,    0,    0,    0,    0,
        0,    0,    0,  232,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      169,    0,    0,  111,    0,    0,    0,  150,    0,    0,
        0,  216,    0,    0,    0,    0,    0,    0,    0,  162,

        0,    0,    0,  232,  248,  248,  248,  248,  248,  248,
      248,  248,   14,  248,   15,  248,  248,   16,    0,  133,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      157,    0,  107,    0,    0,    0,  169,    0,    0,    0,
        0,    0,    0,  178,    0,    0,    0,    0,    0,    0,
        0,  244,    0,  140,    0,    0,  248,  248,  248,   17,
      248,  248,  248,  248,   14,   15,  248,   16,  133,    0,
        0,  151,    0,    0,    0,  217,    0,    0,    0,    0,
      157,  107,    0,    0,    0,  163,    0,    0,    0,    0,
      164,    0,    0,    0,    0,    0,    0,    0,  244,    0,

      144,    0,  248,   18,  248,   17,  248,  248,  248,  248,
      248,    0,  151,    0,  179,    0,  217,    0,    0,    0,
        0,    0,    0,  163,    0,  141,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   18,  248,
       11,  248,  248,  248,    8,  248,  248,    0,  165,  179,
        0,    0,    0,    0,    0,    0,    0,  141,    0,  145,
        0,    0,    0,    0,    0,    0,  174,    0,    0,    0,
        0,   11,  248,  248,    8,  248,  248,   26,  165,    0,
        0,    0,    0,    0,    0,    0,  145,    0,    0,    0,
        0,  208,  204,    0,  154,    0,    0,    0,  248,  248,

      248,   26,    0,    0,    0,    0,  175,    0,    0,    0,
        0,    0,    0,    0,  212,    0,    0,  160,    0,  248,
      248,  248,    0,    0,  209,    0,  205,  175,    0,    0,
      155,    0,    0,    0,    0,    0,    0,    0,    0,  248,
      248,  248,    0,  213,  209,  205,    0,  155,    0,    0,
      161,    0,    0,    0,    0,    0,    0,  248,  248,  248,
      213,    0,    0,  161,    0,    0,  236,    0,  240,    0,
        0,    0,  248,  248,  248,    0,    0,    0,  236,  240,
      176,    0,  196,  248,  248,  248,    0,    0,    0,    0,
      248,  248,  248,   19,    0,  177,    0,    0,  197,    0,

      248,  248,   22,   19,  177,    0,  197,    0,  248,   24,
       22,    0,  194,   24,    0,    0,  195,  195,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,   24,   25,   26,   27,   28,   29,   30,   31,   32,
        6,   33,   34,   35,   36,   37,   38,    6,    6,    6,
        1,    6,    1,    1,    6,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,    1,   65,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    5,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2132] =
    {   0,
        0,   65, 3266, 3265, 3276, 3275, 3272, 3271,    0,    0,
        0,    0, 3262, 3261,   13,   17,    3,    5, 3275, 3284,
      129, 3269,  192, 3266,   19,   38, 3255,   84,  250,   25,
     3241, 3231, 3284,    0, 3284,    0,    0,    0, 3284, 3284,
     3260, 3284, 3284, 3251,    0,    0,   24,   90, 3250,  213,
       35,   40, 3236, 3226, 3225, 3220, 3206, 3205,    3,    6,
       25,   32,    1,   52,   21, 3221, 3216, 3284,   54,  216,
      105, 3284,   60, 3249,  272, 3284, 3199, 3217, 3202,   42,
       49, 3207, 3210,   64, 3199, 3204,   81, 3211,  206,   68,
     3206,  214, 3185,   77, 3208,  107, 3223, 3215,    0,    0,

        0,    0, 3227, 3284, 3185, 3185, 3188, 3187, 3177, 3197,
      175, 3196, 3187, 3185, 3183, 3182, 3168,  163,  195, 3192,
     3176,  187, 3182, 3178, 3180,  257,  272, 3217, 3167, 3185,
     3170,  167,   73, 3175, 3178,  224, 3167, 3172,  193, 3179,
      281,  192, 3174,  284, 3153,  226, 3176,  219, 3157, 3161,
      242, 3156, 3284, 3152, 3160, 3157,  287, 3185, 3164, 3166,
     3164, 3142, 3151, 3151, 3153, 3142, 3146, 3152, 3139,  142,
     3143, 3140, 3138,  292, 3139, 3135, 3137, 3141, 3146, 3132,
      277, 3284, 3144, 3145, 3134, 3125,  350, 3127, 3123, 3142,
     3141, 3136, 3120, 3134, 3136, 3132, 3114, 3148,  352,  354,

     3120, 3128, 3111, 3130, 3110, 3108, 3121, 3284,  336, 3108,
     3112,  279, 3107,  360, 3103, 3111, 3108,  313, 3136, 3115,
     3117, 3115, 3093, 3102, 3102, 3104, 3093, 3097, 3103, 3090,
      230, 3094, 3091, 3089,  319, 3090, 3086, 3088, 3092, 3097,
     3083, 3083, 3084, 3082,  215,  316, 3092, 3093, 3090, 3081,
     3088, 3087, 3071, 3069, 3069, 3083, 3069, 3073, 3098, 3079,
     3086,  359, 3077, 3076, 3071, 3067, 3073, 3061, 3057, 3067,
     3071, 3052, 3050, 3049, 3071, 3051, 3063, 3047, 3061, 3051,
     3046, 3054, 3055, 3043,  379, 3044,  381,  383,  387, 3058,
     3046, 3037, 3074,  389,  391, 3050, 3061, 3048, 3048,  397,

     3284, 3284, 3032,  406, 3049, 3037,  408, 3043, 3039, 3029,
     3030, 3028,  303,  410, 3038, 3039, 3036,  412,  414, 3027,
     3034, 3033, 3017, 3015, 3015, 3029, 3015, 3019,  416, 3026,
     3033,  405, 3024,  418, 3019, 3015, 3021, 3009, 3005, 3015,
     3019, 3000, 2998, 2997,  428, 3000, 3012, 2996, 3010, 3000,
     2995,  434, 2991, 2988, 2994, 3033, 3005, 2987, 3005, 2991,
     2986, 3000, 2997,  381, 2983, 2991, 2979, 2997, 2990, 2991,
      437, 3012, 2980, 2984, 2998, 2982, 2985,  441, 2986,  345,
      447, 2970, 2966, 2963, 2991, 2979,  385, 2974, 2977, 2980,
     2977, 2961, 2973, 3284, 2962, 2984, 2974, 2959, 2964,  444,

      467, 2972,  453,  460,  475, 2959, 2949, 2960, 2953,  477,
      480,  482,  484, 2949, 2960, 2947, 2940, 2947,  492,  494,
     2950, 2940,  500,  502,  508, 2940, 2938, 2935, 2941, 2980,
     2952,  510,  512, 2934, 2952, 2938, 2933, 2947,  515, 2944,
      433, 2930, 2938, 2926, 2944, 2937, 2938,  517,  519,  523,
     2959, 2927, 2931, 2945, 2929, 2932,  526,  528,  530, 2933,
      406,  535, 2917, 2913, 2910,  537, 2927,  428, 2922, 2925,
      539,  544, 2928, 2925, 2909, 2921,  546, 2910, 2932,  548,
      555, 2922, 2921, 2916, 2915, 2944, 3284, 2900, 2914, 2912,
     2906, 2894, 2895, 2894, 2914, 2909, 2908,  532, 2894, 2902,

     2901,  557, 2926,  564, 3284,  520, 2891, 2905, 2883, 2888,
      569, 2921,  573, 2879, 2889, 2883,  579, 3284, 2903, 2875,
     2879, 2892, 2873, 2872, 2872, 2886, 2870, 2869, 2881, 2883,
     2871, 2860, 2881, 2879, 2862, 2863,  582, 3284, 3284, 2873,
      588, 2878, 2871, 2860, 2858,  590,  592, 2906, 2903, 2878,
      598,  600,  602, 2855,  604, 2902, 2899, 2868, 2861,  610,
     2898, 2895,  617,  619,  625, 2862, 2857, 2856, 2885,  627,
      629, 2841, 2855, 2853, 2847, 2835, 2836, 2835, 2855, 2850,
     2849,  541, 2835, 2843, 2842,  632,  634,  636,  640,  599,
     2833, 2847, 2825, 2830,  643,  645,  648, 2822, 2832, 2826,

      650,  652,  656, 2819, 2823,  659,  661, 2836, 2817, 2816,
     2816, 2830, 2814,  663, 2813, 2825, 2827, 2815,  666,  668,
     2804, 2825,  672, 2823, 2812, 2805, 2804, 2840, 2819, 2799,
     2813, 2801, 2801, 2814, 2809, 2798, 2800, 2799, 2801, 2800,
     2805, 2789, 3284,  675,  677, 2833, 2800, 2799, 2798,  458,
     2791, 2786,  679,  682, 2827, 2790, 2772, 2811, 2780,  587,
     2777, 2785, 2774, 2772, 2786, 2785,  655, 2780,  691, 2787,
     3284, 2773, 2773, 2773, 2759, 2763, 2773, 2780,  693, 2766,
     2754, 3284, 3284, 2772,  696,  686,  698,  708,  701,  703,
     2759, 3284, 3284, 2775,  716, 3284, 3284,  718, 2808, 2805,

      724,  726, 2761, 2754, 2753, 2789,  732,  734, 2768, 2748,
     2762, 2750, 2750, 2763, 2758, 2747, 2749, 2748, 2750, 2749,
     2754, 2737,  736,  739,  741,  743, 2744, 2738, 2691,  717,
     2683, 2678,  752, 2683, 2665, 2704,  754,  757,  759, 2673,
      602,    2,  761,   41,   43,   53,   83,   93,  717,  100,
      763,  182,  765,  767,  193,  215,  222,  258, 3284, 3284,
      271,  301, 3284,  313,  317,  331,  348,  384,  549, 3284,
      752,  386,  416,  430,  463,  773,  459,  775, 3284, 3284,
      464,  481,  510,  517,  782,  531,  538,  633,  648,  649,
      669,  675,  682,  674,  707,  736,  739,  757,  734,  737,

      752,  792,  779,  795,  742, 3284,  757,  758,  802,  755,
      761,  757,  809,  812,  773,  818,  804,  820,  837,  808,
      809,  825,  773,  782,  843,  845, 3284, 3284,  851,  828,
      830,  796,  858,  860,  802,  862,  804,  864,  803,  799,
      812,  811,  831,  850,  870,  863,  818,  826,  835,  843,
      886,  883,  888,  890,  893,  895,  840,  847,  868,  848,
      845,  867,  865,  911,  851,  864,  868,  874,  861,  916,
      877,  879,  920,  870,  872,  887,  925,  927,  874,  932,
      936,  938,  889,  893,  885,  892,  893,  905,  900,  901,
      904,  894,  910,  915,  918,  905,  901,  921,  923,  920,

      921,  937,  927,  910,  967,  954,  970,  923,  932,  922,
      914,  940,  937,  923,  943,  936,  930,  937, 3284, 3284,
      931,  947,  969,  952,  960,  936,  970,  956,  995,  997,
      990,  955, 3284,  946, 1002, 1004,  955,  964,  954, 1012,
     1011, 1013,  958, 1020, 1022,  973,  978,  973,  979,  993,
      996, 1003,  998, 3284, 3284, 1003,  980, 1038, 1037, 1037,
     3284, 3284,  988, 1045, 1047, 1051, 1055, 1003, 1007, 1058,
     1061, 1024, 1019, 1020, 1022, 1012, 1028, 1033, 1071, 1074,
     1039, 1026, 1021, 1041, 1043, 1040, 1041, 1057, 1047, 1087,
     1089, 1091, 1093, 1095, 1097, 1099, 1052, 1061, 1051, 1044,

     1065, 1051, 1072, 1065, 1057, 1065, 1114, 1116, 1118, 1120,
     1067, 1083, 1105, 1127, 1134, 1088, 1099, 1076, 1113, 1099,
     1138, 1095, 1143, 1145, 1147, 1149, 1086, 1090, 1115, 1097,
     1109, 1104, 1115, 1106, 1107, 1111, 1114, 1107, 1113, 1128,
     1120, 1113, 1129, 1114, 1119, 1134, 1118, 1132, 1174, 1176,
     1169, 1141, 1139, 1144, 1150, 1134, 1129, 1140, 1146, 1136,
     1147, 1149, 1158, 1160, 1148, 1149, 1146, 1173, 1152, 1148,
     1151, 1200, 1147, 1164, 3284, 1204, 1203, 1203, 1160, 1155,
     1171, 3284, 3284, 1161, 1214, 3284, 3284, 1166, 1220, 1161,
     1181, 1185, 1178, 1181, 1170, 1176, 1196, 1181, 1176, 1170,

     1191, 3284, 3284, 1172, 1235, 1237, 1202, 1184, 1241, 1198,
     1193, 1204, 1195, 1196, 1200, 1202, 1250, 1197, 1203, 1217,
     1209, 1202, 1218, 1203, 1208, 1223, 1207, 1262, 1264, 1266,
     1230, 1228, 1233, 1239, 1217, 1228, 1234, 1224, 1235, 1236,
     1278, 1280, 1282, 1284, 1286, 1255, 1257, 1245, 1246, 1294,
     1243, 1273, 1253, 1249, 1252, 1262, 1302, 1304, 1306, 1308,
     3284, 1256, 1256, 1271, 1263, 1259, 1265, 1262, 1276, 1277,
     1275, 1266, 1274, 1283, 1280, 1270, 1294, 1289, 1280, 1285,
     1282, 1332, 1286, 1294, 1296, 1298, 1293, 1298, 3284, 1289,
     1300, 1292, 1304, 1289, 1294, 1290, 1293, 1300, 1308, 3284,

     1299, 1293, 1311, 1302, 3284, 3284, 3284, 1354, 1356, 1358,
     1319, 1361, 1363, 1365, 1318, 1320, 1348, 1373, 1335, 1334,
     1340, 1380, 1324, 1383, 1333, 1388, 1390, 1332, 1337, 1352,
     1345, 1341, 1348, 1345, 1359, 1360, 1358, 1349, 1358, 1366,
     1363, 1353, 1377, 1372, 1363, 1368, 1374, 1377, 1379, 1374,
     1420, 1371, 1382, 1374, 1386, 1371, 1429, 1431, 1376, 1377,
     1380, 1388, 1396, 1438, 1389, 1383, 1401, 1443, 1445, 1447,
     1449, 1390, 3284, 1397, 1454, 1423, 3284, 1459, 1401, 3284,
     1406, 1408, 1430, 1427, 1430, 1419, 1420, 1435, 1432, 1438,
     1476, 1433, 1425, 3284, 1439, 1419, 1482, 1434, 1431, 1431,

     1431, 1455, 1464, 1453, 1451, 1452, 3284, 1444, 1444, 1479,
     1441, 1499, 1501, 1507, 1509, 1511, 1514, 1516, 1518, 1522,
     1447, 1526, 1464, 1465, 1505, 1528, 1533, 1492, 1481, 1506,
     1496, 1538, 1540, 1502, 1544, 1546, 1511, 1508, 1550, 1553,
     1555, 1559, 1496, 1562, 1510, 1566, 1535, 1571, 1573, 1513,
     1575, 1523, 1523, 1545, 1543, 1546, 1533, 1534, 1550, 1548,
     1554, 1538, 1593, 1554, 1534, 1597, 1599, 1551, 1548, 1548,
     1548, 1572, 1581, 1570, 1568, 1569, 1613, 1615, 1617, 1561,
     1568, 1603, 1621, 1623, 1625, 1608, 3284, 1631, 1614, 1634,
     1582, 1641, 1622, 1638, 1602, 1612, 1591, 1611, 1593, 1614,

     1599, 1627, 1599, 3284, 1619, 1658, 1660, 1623, 3284, 3284,
     1622, 1664, 1666, 3284, 3284, 3284, 1617, 1618, 1625, 1617,
     1633, 1619, 1620, 1629, 1623, 1624, 1680, 1679, 1679, 1686,
     1688, 1690, 1692, 1698, 1640, 1642, 1700, 1647, 1705, 1647,
     1689, 1671, 1709, 1656, 1712, 1661, 1716, 1681, 1720, 1725,
     1727, 1703, 1729, 1731, 1735, 1737, 1739, 1682, 1741, 1745,
     1747, 1753, 1702, 1757, 1759, 1717, 1697, 1718, 1705, 1725,
     1710, 1738, 1710, 1767, 1731, 1770, 1773, 1775, 1777, 1738,
     1780, 1783, 1786, 1789, 1740, 1742, 1749, 1741, 1757, 1742,
     1799, 1802, 1805, 1807, 1762, 1756, 1811, 1776, 1815, 1817,

     1810, 1801, 1823, 1825, 1812, 3284, 1771, 1792, 1783, 1787,
     1785, 1789, 1784, 1791, 1789, 1839, 1800, 3284, 1842, 1790,
     1818, 1798, 1791, 1792, 3284, 3284, 1808, 1813, 1812, 3284,
     3284, 1852, 3284, 3284, 1817, 1819, 1858, 1860, 1863, 1820,
     1815, 1829, 1831, 1824, 1870, 1873, 1820, 1847, 1830, 1879,
     1882, 1849, 1888, 1890, 1894, 1896, 1873, 1898, 1901, 1903,
     1906, 1852, 1872, 1862, 1866, 1864, 1868, 1863, 1870, 1916,
     1919, 1873, 1922, 1924, 1926, 1928, 1932, 1934, 1938, 1940,
     1944, 1946, 1950, 1954, 1876, 1909, 1894, 1892, 1896, 1956,
     1960, 1962, 1966, 1968, 1917, 1927, 1914, 1972, 1934, 1934,

     1939, 1978, 1938, 1944, 1937, 1927, 1927, 1945, 1946, 1930,
     1938, 1949, 1941, 1947, 1942, 1946, 1962, 1945, 3284, 1947,
     1957, 1954, 1944, 2001, 2003, 2005, 1949, 1958, 1963, 1954,
     1957, 1958, 2013, 1974, 1964, 1977, 2019, 3284, 3284, 1965,
     2025, 1982, 1990, 2028, 2030, 1995, 1988, 1977, 1977, 1995,
     1996, 1980, 1988, 2040, 2001, 2044, 2046, 2048, 2050, 2052,
     2054, 2056, 2013, 2008, 2012, 2028, 2011, 2064, 2066, 2068,
     2070, 2072, 2074, 2026, 2040, 2037, 2032, 2034, 2037, 2027,
     2034, 2045, 2046, 2053, 2035, 2050, 2042, 2076, 2055, 2054,
     2038, 3284, 2052, 2044, 2060, 2100, 2052, 2058, 2104, 2065,

     2052, 2067, 2064, 2065, 2056, 2057, 2057, 2059, 2079, 2069,
     2071, 2119, 2065, 2072, 2082, 2083, 2090, 2071, 2086, 2078,
     2112, 2130, 2091, 2075, 2134, 2091, 2083, 2138, 2140, 2142,
     2144, 2107, 3284, 2092, 2107, 2109, 2103, 2095, 2097, 2099,
     2138, 2119, 2125, 3284, 3284, 2105, 2119, 2106, 2121, 2114,
     2119, 2121, 2166, 2168, 2114, 2120, 2117, 2118, 2136, 2125,
     2140, 2178, 2182, 2135, 2184, 2186, 2147, 2148, 2133, 2135,
     2138, 2177, 2158, 2164, 2199, 2202, 2150, 2150, 2165, 2207,
     2209, 2162, 2168, 2215, 2174, 2180, 2164, 3284, 2180, 2168,
     2189, 3284, 2174, 2189, 2179, 2177, 2192, 2230, 2199, 3284,

     2192, 2193, 2190, 2236, 2183, 2189, 2240, 2188, 2187, 2194,
     2208, 2247, 2249, 2251, 2255, 2202, 2257, 2259, 2262, 2266,
     2208, 2268, 2215, 2237, 2273, 2224, 2239, 2230, 2228, 2280,
     2284, 2286, 2289, 2245, 2258, 2292, 2296, 2253, 2257, 2254,
     2246, 2261, 2285, 3284, 2267, 2248, 2258, 2251, 2282, 2260,
     2311, 2313, 2264, 3284, 2261, 2267, 2318, 2265, 2321, 2323,
     2288, 2282, 2273, 2281, 2330, 2333, 2286, 2337, 2339, 2300,
     2342, 2344, 2346, 2311, 2349, 2351, 2296, 2306, 2298, 2329,
     2358, 2362, 2310, 2314, 2366, 2368, 2370, 2317, 2323, 2329,
     3284, 2321, 2328, 2327, 2321, 2338, 2329, 2343, 2383, 2359,

     3284, 2344, 2388, 2390, 2392, 2394, 2351, 2339, 2398, 2359,
     2346, 2403, 2407, 2409, 2413, 2357, 2415, 2361, 2360, 2378,
     2369, 2382, 2395, 2425, 2427, 2429, 2431, 2380, 2381, 2393,
     2378, 2396, 2396, 2383, 2381, 2396, 2390, 2407, 2444, 2447,
     2449, 2401, 2411, 2453, 2455, 2428, 2458, 2462, 2464, 2468,
     2403, 2426, 2429, 2416, 2415, 2430, 2424, 2478, 2480, 2482,
     2440, 2428, 2448, 2445, 2432, 2433, 2457, 2449, 2446, 2434,
     2452, 2496, 2438, 2469, 2499, 2449, 2502, 2504, 2506, 2467,
     2454, 2455, 2511, 2472, 2469, 2457, 2517, 2478, 2475, 2465,
     2467, 3284, 3284, 2467, 3284, 2474, 2484, 2482, 2499, 2477,

     2474, 2531, 2478, 2534, 2536, 2538, 2540, 2486, 2544, 2496,
     2506, 2503, 2499, 2501, 3284, 2500, 2512, 3284, 2513, 2505,
     2502, 2515, 2561, 2563, 2565, 2567, 2569, 2571, 2519, 2574,
     2579, 2534, 2583, 2538, 2535, 2532, 2542, 2552, 2546, 2535,
     2547, 2542, 2594, 2596, 2599, 2601, 2558, 2604, 2570, 2607,
     2610, 2568, 2613, 2615, 2567, 2577, 2563, 2575, 2570, 2573,
     2624, 2576, 2586, 2631, 2573, 2633, 2635, 2637, 2639, 2598,
     2597, 2588, 2593, 2595, 2591, 2604, 2604, 2595, 2653, 2655,
     3284, 2608, 3284, 2607, 2603, 2659, 2661, 2620, 2664, 2622,
     2612, 2668, 2670, 2674, 2677, 2680, 2628, 2685, 2687, 2627,

     2689, 2693, 2695, 2697, 2701, 2635, 2704, 2644, 2708, 2710,
     2712, 2651, 3284, 2714, 2716, 2718, 2720, 2723, 3284, 2735,
     2740, 2745, 2750, 2755, 2760, 2765, 2770, 2775, 2779, 2784,
     2789
    } ;

static yyconst flex_int16_t yy_def[2132] =
    {   0,
     2120, 2120, 2121, 2121, 2122, 2122, 2123, 2123, 2124, 2124,
     2124, 2124, 2125, 2125, 2126, 2126, 2127, 2127, 2119, 2119,
     2119, 2119,   21, 2119,   23,   23,   23,   23, 2119, 2119,
       23,   23, 2119, 2128, 2119, 2129, 2130, 2131, 2119, 2119,
     2119, 2119, 2119, 2119,   21,   23,   23,   23,   23,   23,
       29, 2119,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2119,   23,   23,
       23, 2119,   23, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119,   23,   23, 2128, 2129,

     2130, 2131, 2119, 2119,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
       23, 2119,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

     2119, 2119,   23,   23,   23,   23,   23,   23,   23, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,

     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119,   23,   23,   23, 2119, 2119,   23,
       23,   23,   23,   23,   23,   23,   23, 2119, 2119,   23,
       23,   23,   23,   23,   23, 2119, 2119,   23,   23,   23,
     2119, 2119,   23,   23,   23, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,

     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119,   23,   23,   23,   23,   23,   23,
       23, 2119, 2119,   23,   23,   23,   23,   23,   23,   23,
       23, 2119, 2119,   23,   23, 2119, 2119,   23, 2119, 2119,

       23,   23, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,

     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 2119,
     2119,   23,   23,   23,   23,   23, 2119, 2119,   23, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,

     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119,   23,   23,   23,   23,   23,   23,
     2119, 2119,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 2119, 2119,   23,   23,   23, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,

     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119,   23, 2119, 2119,   23,   23,
       23, 2119, 2119,   23,   23, 2119, 2119,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,

     2119, 2119, 2119, 2119, 2119, 2119, 2119,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,

     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,

     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119,   23, 2119, 2119,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,

     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119,   23, 2119, 2119,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,

     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,

     2119, 2119, 2119, 2119,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,

     2119, 2119,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119,   23,   23,   23,   23,   23,   23,   23, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,   23,   23,

       23,   23, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,   23,
       23,   23, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,   23,
       23,   23, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119,   23,   23,   23,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119,   23,   23,   23, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119,   23,   23,   23, 2119, 2119, 2119, 2119,
       23,   23,   23,   23, 2119, 2119, 2119, 2119, 2119, 2119,

       23,   23,   23,   23, 2119, 2119, 2119, 2119,   23,   23,
       23, 2119, 2119,   23, 2119, 2119, 2119, 2119,    0, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119
    } ;

static yyconst flex_int16_t yy_nxt[3350] =
    {   0,
       20,   21,   21,   20,   22,   43,   24,   43,   25,   26,
       27,   28,   28,   28,   29,   40,   30,   20, 2119,   40,
       44,   41,   44, 2119,   31,   41,   96,   96,   48,   32,
       50,   50,   50,   48, 2119,   50,   50,   50, 2119,   69,
       69,   96,   96,   53,  109,  111, 2119,  117,   53,   70,
       70,   70, 2119,  118,  110,   69,   69,  868,  112,   71,
      122,   73,   73,  113,   33,   20,   21,   21,   20,   22,
      115,   24,  123,   25,   26,   27,   28,   28,   28,   29,
       71,   30,   20,  114,  151,   73,   73,  869,  152,   31,
      116,   69,   69,   48,   32,   50,   50,   50,  153,  870,

      154,   70,   70,   70,  119,   71,  170,  120,   96,   96,
      871,   71,  126,  126,  121,  157,  127,  127,  127,  162,
      158,  159,  214,  171,  215,  872,   71,  163,  178,   33,
       45,   45,   71,  179,   46,  873,   46,   47,   48,   49,
       50,   50,   50,   51,   46,   52,  876,   46,   46,   46,
       46,   46,   46,   53,   46,   46,   46,   46,   54,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   55,
       56,   46,   57,   58,   46,   59,   46,   46,   60,   61,
       62,   46,   46,   46,   46,   63,   64,   65,   66,   67,
       46,   46,   46,   46,   46,  189,  199,  199,  269,  270,

       46,   46,   46,   46,   46,   46, 2119,  203, 2119,  212,
      200,  190,  197,  213,   73,   73,   46,   69,   69,  198,
      879,   46,   48,  204,   50,   50,   50,   70,   70,   70,
      231,  223,   46,   46,   71,   46,   46,   71,   46,  224,
      242,   46,   46,   46,  882,  165,  243,  232,   46,   46,
       46,   46,   46,   74,  244,   71,  173,  356,   71,  166,
       75,  357,  167,  168,  169,  883,  174,   76,  127,  127,
      127,  884,  175,   69,   69,  218,  176,  239,   69,   69,
      219,  220,  240,  127,  127,  127,  339,  340,   77,   78,
       79,   80,   81,   82,   83,  247,   84,   85,  248,   86,

       87,   88,   89,   90,  885,   91,   92,   93,   94,   95,
      129,  130,  131,  132,  133,  134,  135,  886,  136,  137,
      226,  138,  139,  140,  141,  142,  234,  143,  144,  145,
      146,  147,  315,  253,  227,  316,  235,  228,  229,  230,
      254,  274,  236,  255,  256,  430,  237,  887,  275,  431,
      276,  287,  287,  199,  199,  300,  300,  310,  301,  323,
      302,  318,  318,  311,  888,  288,  324,  200,  344,  325,
      326,  312,  358,  359,  889,  345,  319,  346,  375,  376,
      400,  400,  287,  287,  403,  403,  890,  377,  404,  404,
      410,  410,  412,  412,  401,  515,  288,  516,  300,  300,

      494,  301,  405,  302,  411,  891,  413,  419,  419,  423,
      423,  432,  432,  318,  318,  439,  439,  449,  449,  458,
      458,  420,  892,  424,  454,  455,  433,  524,  319,  471,
      471,  525,  450,  456,  459,  480,  480,  495,  502,  502,
      451,  900,  511,  511,  472,  400,  400,  503,  517,  517,
      481,  512,  578,  504,  403,  403,  599,  513,  600,  401,
      460,  404,  404,  518,  473,  901,  434,  435,  537,  537,
      610,  538,  902,  539,  611,  405,  541,  541,  410,  410,
      482,  546,  546,  412,  412,  547,  547,  781,  548,  579,
      549,  782,  411,  419,  419,  555,  555,  413,  556,  903,

      557,  423,  423,  560,  560,  904,  561,  420,  562,  563,
      563,  432,  432,  571,  571,  424,  439,  439,  586,  586,
      449,  449,  908,  564,  588,  588,  433,  595,  595,  458,
      458,  597,  597,  587,  909,  450,  601,  601,  606,  606,
      471,  471,  596,  910,  459,  614,  614,  619,  619,  480,
      480,  602,  639,  607,  640,  472,  623,  623,  502,  502,
      647,  719,  620,  720,  481,  645,  645,  503,  608,  893,
      511,  511,  911,  504,  654,  654,  648,  894,  646,  512,
      517,  517,  912,  537,  537,  513,  538,  655,  539,  541,
      541,  546,  546,  547,  547,  518,  548,  913,  549,  685,

      685,  687,  687,  689,  689,  555,  555,  791,  556,  792,
      557,  560,  560,  686,  561,  688,  562,  690,  563,  563,
      698,  698,  866,  699,  867,  700,  701,  701,  707,  707,
      571,  571,  564,  586,  586,  724,  724,  588,  588,  727,
      702,  725,  725,  708,  595,  595,  733,  733,  587,  597,
      597,  601,  601,  737,  737,  728,  726,  738,  738,  596,
      606,  606,  743,  743,  614,  614,  602,  619,  619,  754,
      754,  914,  739,  623,  623,  607,  776,  776,  645,  645,
      785,  785,  620,  654,  654,  799,  740,  818,  818,  800,
      915,  646,  802,  802,  813,  813,  655,  685,  685,  687,

      687,  803,  689,  689,  822,  822,  916,  804,  814,  819,
      819,  686,  820,  688,  821,  917,  690,  825,  825,  698,
      698,  918,  699,  919,  700,  701,  701,  829,  829,  920,
      830,  826,  831,  707,  707,  836,  836,  851,  851,  702,
      724,  724,  725,  725,  853,  853,  857,  874,  708,  921,
      858,  875,  852,  733,  733,  737,  737,  726,  738,  738,
      864,  864,  743,  743,  877,  877,  880,  880,  754,  754,
      895,  896,  897,  739,  776,  776,  905,  905,  922,  878,
      923,  881,  898,  785,  785,  906,  924,  926,  899,  927,
      928,  907,  925,  802,  802,  929,  930,  930,  932,  933,

      934,  937,  803,  935,  935,  938,  939,  943,  804,  931,
      813,  813,  954,  940,  940,  955,  941,  936,  942,  944,
      944,  818,  818,  946,  814,  947,  822,  822,  948,  949,
      956,  957,  961,  945,  950,  951,  962,  952,  819,  819,
      953,  820,  963,  821,  825,  825,  958,  958,  968,  959,
      969,  960,  829,  829,  972,  830,  973,  831,  826,  964,
      964,  966,  966,  836,  836,  970,  970,  974,  975,  976,
      977,  979,  979,  986,  965,  987,  967,  988,  978,  989,
      971,  981,  982,  983,  990,  990,  980,  851,  851,  853,
      853,  991,  991,  984,  993,  993,  995,  995,  997,  985,

      998,  999,  852, 1000, 1001, 1002,  992, 1003, 1004,  994,
     1005,  996,  864,  864, 1006, 1007, 1008, 1009, 1009, 1012,
     1013, 1014, 1014, 1018, 1019, 1020,  877,  877, 1021, 1021,
     1022, 1026, 1010,  880,  880, 1027, 1015, 1023, 1023, 1024,
     1024,  878, 1028, 1029, 1030, 1031, 1032, 1033,  881, 1016,
     1034, 1035, 1036, 1037, 1025, 1017, 1038, 1039, 1011, 1040,
     1041, 1042, 1043, 1044, 1045, 1047, 1046, 1048,  905,  905,
     1049, 1050, 1050, 1052, 1053, 1054, 1055,  906, 1056, 1057,
     1058, 1059, 1060,  907, 1051, 1061, 1062, 1063, 1064, 1065,
     1067, 1066, 1068, 1069, 1070, 1071, 1072, 1072,  930,  930,

     1073, 1074, 1075,  935,  935, 1076, 1076, 1079, 1077, 1080,
     1078,  931, 1081,  940,  940, 1082,  941,  936,  942, 1083,
     1084,  944,  944, 1085, 1085, 1088, 1086, 1089, 1087, 1090,
     1091, 1092, 1093, 1097, 1095,  945, 1099, 1100, 1101,  958,
      958, 1102,  959, 1103,  960, 1104,  964,  964, 1105, 1105,
     1094, 1096,  966,  966, 1107, 1098, 1106, 1106, 1108,  970,
      970,  965, 1109, 1109, 1110, 1111, 1112,  967, 1113, 1114,
     1115, 1116,  979,  979,  971, 1117, 1117, 1118, 1119, 1120,
     1121, 1122, 1123, 1124, 1125, 1127, 1126,  980,  990,  990,
      991,  991, 1128, 1128,  993,  993, 1129, 1129,  995,  995,

     1130, 1130, 1131, 1132, 1133,  992, 1134, 1135, 1136,  994,
     1137, 1138, 1139,  996, 1140, 1141, 1141, 1143, 1143, 1009,
     1009, 1145, 1145, 1146, 1147, 1148, 1151, 1149, 1014, 1014,
     1142, 1152, 1144, 1153, 1010, 1150, 1150, 1154, 1155, 1021,
     1021, 1156, 1160, 1015, 1023, 1023, 1024, 1024, 1157, 1157,
     1158, 1158, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
     1169, 1025, 1170, 1171, 1172, 1159, 1173, 1174, 1175, 1176,
     1177, 1178, 1179, 1180, 1181, 1182, 1182, 1050, 1050, 1183,
     1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193,
     1051, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,

     1203, 1072, 1072, 1204, 1205, 1076, 1076, 1206, 1077, 1207,
     1078, 1208, 1209, 1210, 1211, 1085, 1085, 1212, 1086, 1215,
     1087, 1213, 1213, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
     1223, 1224, 1225, 1226, 1227, 1214, 1105, 1105, 1106, 1106,
     1228, 1229, 1109, 1109, 1230, 1231, 1232, 1233, 1234, 1235,
     1236, 1117, 1117, 1237, 1238, 1239, 1240, 1241, 1242, 1243,
     1244, 1245, 1246, 1128, 1128, 1129, 1129, 1130, 1130, 1247,
     1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1141,
     1141, 1257, 1257, 1143, 1143, 1258, 1258, 1145, 1145, 1259,
     1260, 1261, 1262, 1263, 1142, 1150, 1150, 1264, 1144, 1265,

     1266, 1267, 1268, 1157, 1157, 1158, 1158, 1269, 1269, 1270,
     1270, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280,
     1159, 1281, 1282, 1283, 1271, 1284, 1285, 1286, 1287, 1288,
     1289, 1290, 1291, 1182, 1182, 1292, 1293, 1294, 1295, 1296,
     1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306,
     1307, 1308, 1309, 1310, 1311, 1312, 1312, 1314, 1314, 1316,
     1316, 1318, 1319, 1319, 1213, 1213, 1322, 1322, 1323, 1313,
     1324, 1315, 1325, 1317, 1326, 1326, 1320, 1329, 1214, 1330,
     1331, 1332, 1332, 1334, 1335, 1335, 1338, 1343, 1327, 1339,
     1339, 1341, 1341, 1344, 1345, 1333, 1346, 1347, 1336, 1348,

     1349, 1350, 1351, 1340, 1352, 1353, 1342, 1354, 1355, 1356,
     1357, 1358, 1359, 1360, 1361, 1328, 1362, 1321, 1363, 1364,
     1365, 1366, 1366, 1368, 1369, 1370, 1371, 1372, 1373, 1337,
     1257, 1257, 1258, 1258, 1374, 1375, 1367, 1376, 1377, 1378,
     1378, 1380, 1381, 1382, 1383, 1383, 1269, 1269, 1270, 1270,
     1385, 1385, 1386, 1387, 1379, 1388, 1388, 1391, 1395, 1384,
     1392, 1392, 1396, 1271, 1389, 1397, 1398, 1399, 1400, 1393,
     1390, 1401, 1402, 1403, 1404, 1394, 1405, 1406, 1406, 1408,
     1409, 1410, 1411, 1412, 1412, 1414, 1415, 1416, 1417, 1418,
     1419, 1420, 1407, 1421, 1422, 1423, 1424, 1425, 1413, 1426,

     1312, 1312, 1427, 1427, 1435, 1428, 1436, 1429, 1314, 1314,
     1430, 1430, 1316, 1316, 1313, 1431, 1431, 1432, 1432, 1319,
     1319, 1437, 1315, 1434, 1434, 1438, 1317, 1322, 1322, 1326,
     1326, 1433, 1440, 1320, 1439, 1439, 1441, 1442, 1444, 1332,
     1332, 1445, 1445, 1327, 1446, 1335, 1335, 1447, 1447, 1448,
     1449, 1339, 1339, 1333, 1450, 1450, 1341, 1341, 1452, 1336,
     1451, 1451, 1443, 1453, 1453, 1340, 1455, 1456, 1456, 1458,
     1463, 1342, 1459, 1459, 1461, 1461, 1464, 1464, 1454, 1466,
     1467, 1468, 1457, 1469, 1470, 1471, 1472, 1460, 1473, 1462,
     1474, 1465, 1475, 1476, 1477, 1477, 1479, 1480, 1366, 1366,

     1481, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1478,
     1489, 1490, 1494, 1367, 1491, 1491, 1378, 1378, 1493, 1493,
     1495, 1496, 1383, 1383, 1497, 1497, 1385, 1385, 1498, 1492,
     1499, 1379, 1388, 1388, 1502, 1500, 1500, 1384, 1503, 1504,
     1504, 1389, 1392, 1392, 1506, 1507, 1508, 1390, 1501, 1509,
     1510, 1393, 1505, 1511, 1512, 1513, 1514, 1394, 1515, 1406,
     1406, 1516, 1516, 1517, 1518, 1412, 1412, 1519, 1519, 1520,
     1521, 1522, 1523, 1524, 1407, 1525, 1526, 1527, 1528, 1529,
     1413, 1427, 1427, 1530, 1428, 1531, 1429, 1430, 1430, 1431,
     1431, 1432, 1432, 1532, 1532, 1535, 1533, 1536, 1534, 1434,

     1434, 1537, 1537, 1539, 1540, 1433, 1439, 1439, 1541, 1544,
     1545, 1545, 1547, 1445, 1445, 1538, 1548, 1447, 1447, 1542,
     1549, 1550, 1550, 1552, 1546, 1543, 1450, 1450, 1451, 1451,
     1453, 1453, 1553, 1553, 1557, 1551, 1554, 1554, 1456, 1456,
     1556, 1556, 1459, 1459, 1560, 1454, 1558, 1558, 1461, 1461,
     1562, 1555, 1563, 1457, 1559, 1559, 1564, 1460, 1464, 1464,
     1561, 1561, 1565, 1462, 1566, 1567, 1568, 1569, 1570, 1570,
     1572, 1573, 1573, 1465, 1477, 1477, 1575, 1575, 1576, 1576,
     1578, 1481, 1481, 1571, 1579, 1579, 1574, 1581, 1581, 1478,
     1583, 1583, 1585, 1577, 1586, 1587, 1588, 1589, 1590, 1580,

     1491, 1491, 1582, 1591, 1591, 1584, 1493, 1493, 1592, 1592,
     1595, 1596, 1497, 1497, 1597, 1492, 1598, 1598, 1500, 1500,
     1599, 1600, 1603, 1593, 1602, 1602, 1504, 1504, 1604, 1601,
     1605, 1501, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1505,
     1516, 1516, 1613, 1519, 1519, 1614, 1615, 1616, 1617, 1618,
     1619, 1620, 1621, 1532, 1532, 1622, 1533, 1623, 1534, 1537,
     1537, 1624, 1624, 1594, 1625, 1625, 1627, 1628, 1629, 1631,
     1632, 1545, 1545, 1538, 1633, 1633, 1634, 1635, 1626, 1636,
     1550, 1550, 1630, 1637, 1637, 1546, 1638, 1640, 1639, 1553,
     1553, 1554, 1554, 1642, 1551, 1641, 1641, 1556, 1556, 1558,

     1558, 1643, 1559, 1559, 1644, 1644, 1555, 1561, 1561, 1646,
     1647, 1648, 1649, 1650, 1651, 1652, 1653, 1570, 1570, 1645,
     1654, 1654, 1655, 1573, 1573, 1656, 1656, 1575, 1575, 1576,
     1576, 1663, 1571, 1657, 1657, 1658, 1658, 1664, 1574, 1579,
     1579, 1660, 1660, 1665, 1577, 1581, 1581, 1661, 1661, 1666,
     1659, 1583, 1583, 1667, 1580, 1662, 1662, 1668, 1668, 1673,
     1582, 1591, 1591, 1592, 1592, 1674, 1584, 1670, 1670, 1671,
     1671, 1675, 1669, 1598, 1598, 1676, 1677, 1678, 1593, 1602,
     1602, 1679, 1680, 1681, 1672, 1682, 1683, 1684, 1685, 1686,
     1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696,

     1697, 1698, 1624, 1624, 1625, 1625, 1699, 1699, 1700, 1701,
     1702, 1703, 1704, 1705, 1633, 1633, 1706, 1707, 1626, 1708,
     1637, 1637, 1709, 1638, 1710, 1639, 1641, 1641, 1711, 1644,
     1644, 1712, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719,
     1720, 1654, 1654, 1721, 1645, 1656, 1656, 1657, 1657, 1658,
     1658, 1722, 1722, 1660, 1660, 1661, 1661, 1662, 1662, 1723,
     1724, 1725, 1726, 1727, 1659, 1668, 1668, 1728, 1728, 1670,
     1670, 1671, 1671, 1729, 1729, 1730, 1730, 1732, 1733, 1734,
     1669, 1735, 1736, 1737, 1738, 1739, 1672, 1740, 1741, 1742,
     1731, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751,

     1752, 1753, 1753, 1755, 1756, 1699, 1699, 1757, 1758, 1759,
     1760, 1761, 1762, 1763, 1764, 1765, 1754, 1766, 1767, 1768,
     1712, 1712, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776,
     1777, 1722, 1722, 1778, 1779, 1780, 1780, 1782, 1783, 1728,
     1728, 1729, 1729, 1730, 1730, 1784, 1784, 1785, 1786, 1787,
     1781, 1788, 1789, 1790, 1791, 1792, 1793, 1795, 1731, 1796,
     1797, 1798, 1799, 1800, 1801, 1802, 1803, 1753, 1753, 1804,
     1804, 1805, 1806, 1807, 1794, 1808, 1809, 1810, 1811, 1812,
     1812, 1816, 1754, 1814, 1814, 1817, 1817, 1819, 1819, 1821,
     1822, 1823, 1824, 1813, 1825, 1826, 1828, 1815, 1829, 1818,

     1830, 1830, 1820, 1832, 1832, 1834, 1835, 1836, 1780, 1780,
     1837, 1837, 1838, 1827, 1839, 1831, 1784, 1784, 1833, 1840,
     1841, 1842, 1843, 1781, 1844, 1845, 1846, 1847, 1848, 1849,
     1850, 1851, 1851, 1853, 1854, 1855, 1856, 1804, 1804, 1857,
     1858, 1859, 1859, 1861, 1862, 1863, 1852, 1864, 1812, 1812,
     1865, 1865, 1814, 1814, 1867, 1860, 1866, 1866, 1817, 1817,
     1868, 1868, 1813, 1819, 1819, 1870, 1815, 1869, 1869, 1871,
     1871, 1873, 1818, 1874, 1875, 1875, 1877, 1878, 1820, 1879,
     1880, 1830, 1830, 1883, 1872, 1881, 1881, 1832, 1832, 1876,
     1882, 1882, 1884, 1885, 1885, 1887, 1831, 1837, 1837, 1888,

     1889, 1890, 1833, 1891, 1892, 1893, 1894, 1895, 1886, 1896,
     1897, 1898, 1851, 1851, 1899, 1899, 1900, 1901, 1902, 1903,
     1903, 1905, 1859, 1859, 1906, 1906, 1907, 1852, 1908, 1909,
     1910, 1865, 1865, 1904, 1866, 1866, 1860, 1911, 1868, 1868,
     1869, 1869, 1912, 1871, 1871, 1913, 1913, 1914, 1914, 1916,
     1875, 1875, 1917, 1917, 1918, 1919, 1920, 1921, 1872, 1881,
     1881, 1922, 1915, 1882, 1882, 1876, 1923, 1885, 1885, 1924,
     1924, 1925, 1925, 1927, 1928, 1929, 1930, 1931, 1932, 1933,
     1934, 1935, 1886, 1936, 1899, 1899, 1926, 1937, 1938, 1903,
     1903, 1939, 1939, 1940, 1940, 1906, 1906, 1942, 1943, 1944,

     1944, 1946, 1947, 1904, 1948, 1948, 1951, 1941, 1913, 1913,
     1914, 1914, 1952, 1945, 1950, 1950, 1917, 1917, 1953, 1949,
     1954, 1955, 1956, 1957, 1961, 1915, 1924, 1924, 1925, 1925,
     1958, 1958, 1959, 1959, 1962, 1963, 1964, 1965, 1966, 1967,
     1968, 1969, 1970, 1926, 1971, 1939, 1939, 1960, 1940, 1940,
     1972, 1972, 1973, 1974, 1944, 1944, 1975, 1975, 1976, 1977,
     1977, 1980, 1941, 1948, 1948, 1979, 1979, 1981, 1945, 1950,
     1950, 1982, 1983, 1978, 1984, 1985, 1986, 1988, 1949, 1958,
     1958, 1959, 1959, 1987, 1987, 1989, 1990, 1991, 1992, 1993,
     1994, 1995, 1996, 1997, 1998, 1999, 1960, 1972, 1972, 2000,

     1975, 1975, 2001, 1977, 1977, 2002, 2002, 1979, 1979, 2003,
     2004, 2005, 2006, 2006, 2009, 2010, 2011, 1978, 1987, 1987,
     2012, 2013, 2014, 2015, 2016, 2017, 2018, 2007, 2019, 2020,
     2021, 2022, 2002, 2002, 2023, 2024, 2024, 2026, 2026, 2006,
     2006, 2028, 2028, 2029, 2008, 2030, 2030, 2032, 2033, 2034,
     2025, 2035, 2027, 2036, 2007, 2037, 2038, 2039, 2040, 2041,
     2031, 2042, 2043, 2043, 2024, 2024, 2045, 2045, 2026, 2026,
     2046, 2046, 2028, 2028, 2047, 2030, 2030, 2044, 2049, 2025,
     2048, 2048, 2052, 2027, 2050, 2050, 2053, 2054, 2055, 2056,
     2031, 2057, 2058, 2059, 2060, 2043, 2043, 2061, 2061, 2051,

     2045, 2045, 2046, 2046, 2062, 2048, 2048, 2063, 2050, 2050,
     2044, 2064, 2064, 2065, 2066, 2066, 2068, 2068, 2070, 2071,
     2072, 2073, 2074, 2051, 2075, 2061, 2061, 2076, 2077, 2067,
     2078, 2069, 2064, 2064, 2066, 2066, 2079, 2079, 2068, 2068,
     2080, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2067,
     2088, 2089, 2090, 2069, 2079, 2079, 2080, 2080, 2091, 2092,
     2093, 2093, 2095, 2095, 2097, 2098, 2098, 2100, 2101, 2102,
     2102, 2093, 2093, 2106, 2094, 2104, 2104, 2096, 2095, 2095,
     2099, 2105, 2105, 2103, 2108, 2094, 2098, 2098, 2107, 2107,
     2109, 2109, 2112, 2096, 2102, 2102, 2111, 2111, 2104, 2104,

     2113, 2099, 2105, 2105, 2110, 2107, 2107, 2115, 2103, 2109,
     2109, 2114, 2114, 2111, 2111, 2114, 2114, 2116, 2116, 2116,
     2116, 2118, 2118, 2110, 2118, 2118,  865,  863,  862,  861,
      860,  859, 2117,  856, 2117,   23,   23,   23,   23,   23,
       34,   34,   34,   34,   34,   36,   36,   36,   36,   36,
       37,   37,   37,   37,   37,   35,   35,   35,   35,   35,
       38,   38,   38,   38,   38,   39,   39,   39,   39,   39,
       42,   42,   42,   42,   42,   99,   99,   99,   99,  100,
      855,  100,  100,  100,  101,  101,  854,  101,  101,  102,
      102,  102,  850,  102,  849,  848,  847,  846,  845,  844,

      843,  842,  841,  840,  839,  838,  837,  835,  834,  833,
      832,  828,  827,  824,  823,  817,  816,  815,  812,  811,
      810,  809,  808,  807,  806,  805,  801,  798,  797,  796,
      795,  794,  793,  790,  789,  788,  787,  786,  784,  783,
      780,  779,  778,  777,  775,  774,  773,  772,  771,  770,
      769,  768,  767,  766,  765,  764,  763,  762,  761,  760,
      759,  758,  757,  756,  755,  753,  752,  751,  750,  749,
      748,  747,  746,  745,  744,  742,  741,  736,  735,  734,
      732,  731,  730,  729,  723,  722,  721,  718,  717,  716,
      715,  714,  713,  712,  711,  710,  709,  706,  705,  704,

      703,  697,  696,  695,  694,  693,  692,  691,  684,  683,
      682,  681,  680,  679,  678,  677,  676,  675,  674,  673,
      672,  671,  670,  669,  668,  667,  666,  665,  664,  663,
      662,  661,  660,  659,  658,  657,  656,  653,  652,  651,
      650,  649,  644,  643,  642,  641,  638,  637,  636,  635,
      634,  633,  632,  631,  630,  629,  628,  627,  626,  625,
      624,  622,  621,  618,  617,  616,  615,  613,  612,  609,
      605,  604,  603,  598,  594,  593,  592,  591,  590,  589,
      585,  584,  583,  582,  581,  580,  577,  576,  575,  574,
      573,  572,  570,  569,  568,  567,  566,  565,  559,  558,

      554,  553,  552,  551,  550,  545,  544,  543,  542,  540,
      536,  535,  534,  533,  532,  531,  530,  529,  528,  527,
      526,  523,  522,  521,  520,  519,  514,  510,  509,  508,
      507,  506,  505,  501,  500,  499,  498,  497,  496,  493,
      492,  491,  490,  489,  488,  487,  486,  485,  484,  483,
      479,  478,  477,  476,  475,  474,  470,  469,  468,  467,
      466,  465,  464,  463,  462,  461,  457,  453,  452,  448,
      447,  446,  445,  444,  443,  442,  441,  440,  438,  437,
      436,  429,  428,  427,  426,  425,  422,  421,  418,  417,
      416,  415,  414,  409,  408,  407,  406,  402,  399,  398,

      397,  396,  395,  394,  393,  392,  391,  390,  389,  388,
      387,  386,  385,  384,  383,  382,  381,  380,  379,  378,
      374,  373,  372,  371,  370,  369,  368,  367,  366,  365,
      364,  363,  362,  361,  360,  355,  354,  353,  352,  351,
      350,  349,  348,  347,  343,  342,  341,  338,  337,  336,
      335,  334,  333,  332,  331,  330,  329,  328,  327,  322,
      321,  320,  317,  314,  313,  309,  308,  307,  306,  305,
      304,  303,  299,  298,  297,  296,  295,  294,  293,  292,
      291,  290,  289,  286,  285,  284,  283,  282,  281,  280,
      279,  278,  277,  273,  272,  271,  268,  267,  266,  265,

      264,  263,  262,  261,  260,  259,  258,  257,  252,  251,
      250,  249,  246,  245,  241,  238,  233,  225,  222,  221,
      217,  216,  211,  210,  209,  208,  207,  206,  205,  202,
      201,  196,  195,  194,  193,  192,  191,  188,  187,  186,
      185,  184,  183,  182,  181,  181,  180,  177,  172,  164,
      161,  160,  156,  155,  150,  149,  148,  128,  125,  124,
      108,  107,  106,  105,   98,   97,   72,  104,  103,   98,
       97,   72,   68,   68, 2119,   35,   35,   35,   35,   35,
       35,   35,   35,   19, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,

     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119
    } ;

static yyconst flex_int16_t yy_chk[3350] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,    0,   16,
       17,   15,   18,    0,    1,   16,   30,   30,   25,    1,
       25,   25,   25,   47,    0,   47,   47,   47,   51,   26,
       26,   52,   52,   25,   59,   60,    0,   63,   47,   26,
       26,   26,   51,   63,   59,   69,   69,  742,   60,   26,
       65,   73,   73,   61,    1,    2,    2,    2,    2,    2,
       62,    2,   65,    2,    2,    2,    2,    2,    2,    2,
       26,    2,    2,   61,   80,   28,   28,  744,   80,    2,
       62,   48,   48,   28,    2,   28,   28,   28,   81,  745,

       81,   48,   48,   48,   64,   28,   90,   64,   96,   96,
      746,   48,   71,   71,   64,   84,   71,   71,   71,   87,
       84,   84,  133,   90,  133,  747,   28,   87,   94,    2,
       21,   21,   48,   94,   21,  748,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,  750,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   23,   23,  111,  119,  119,  170,  170,

       23,   23,   23,   23,   23,   23,   23,  122,   23,  132,
      119,  111,  118,  132,   50,   50,   23,   70,   70,  118,
      752,   23,   50,  122,   50,   50,   50,   70,   70,   70,
      142,  139,   23,   23,   50,   23,   23,   70,   23,  139,
      148,   23,   23,   23,  755,   89,  148,  142,   23,   23,
       23,   23,   23,   29,  148,   50,   92,  245,   70,   89,
       29,  245,   89,   89,   89,  756,   92,   29,  126,  126,
      126,  757,   92,  127,  127,  136,   92,  146,  181,  181,
      136,  136,  146,  127,  127,  127,  231,  231,   29,   29,
       29,   29,   29,   29,   29,  151,   29,   29,  151,   29,

       29,   29,   29,   29,  758,   29,   29,   29,   29,   29,
       75,   75,   75,   75,   75,   75,   75,  761,   75,   75,
      141,   75,   75,   75,   75,   75,  144,   75,   75,   75,
       75,   75,  212,  157,  141,  212,  144,  141,  141,  141,
      157,  174,  144,  157,  157,  313,  144,  762,  174,  313,
      174,  187,  187,  199,  199,  200,  200,  209,  200,  218,
      200,  214,  214,  209,  764,  187,  218,  199,  235,  218,
      218,  209,  246,  246,  765,  235,  214,  235,  262,  262,
      285,  285,  287,  287,  288,  288,  766,  262,  289,  289,
      294,  294,  295,  295,  285,  380,  287,  380,  300,  300,

      364,  300,  289,  300,  294,  767,  295,  304,  304,  307,
      307,  314,  314,  318,  318,  319,  319,  329,  329,  334,
      334,  304,  768,  307,  332,  332,  314,  387,  318,  345,
      345,  387,  329,  332,  334,  352,  352,  364,  371,  371,
      329,  772,  378,  378,  345,  400,  400,  371,  381,  381,
      352,  378,  441,  371,  403,  403,  461,  378,  461,  400,
      334,  404,  404,  381,  345,  773,  314,  314,  401,  401,
      468,  401,  774,  401,  468,  404,  405,  405,  410,  410,
      352,  411,  411,  412,  412,  413,  413,  650,  413,  441,
      413,  650,  410,  419,  419,  420,  420,  412,  420,  775,

      420,  423,  423,  424,  424,  777,  424,  419,  424,  425,
      425,  432,  432,  433,  433,  423,  439,  439,  448,  448,
      449,  449,  781,  425,  450,  450,  432,  457,  457,  458,
      458,  459,  459,  448,  782,  449,  462,  462,  466,  466,
      471,  471,  457,  783,  458,  472,  472,  477,  477,  480,
      480,  462,  498,  466,  498,  471,  481,  481,  502,  502,
      506,  582,  477,  582,  480,  504,  504,  502,  466,  769,
      511,  511,  784,  502,  513,  513,  506,  769,  504,  511,
      517,  517,  786,  537,  537,  511,  537,  513,  537,  541,
      541,  546,  546,  547,  547,  517,  547,  787,  547,  551,

      551,  552,  552,  553,  553,  555,  555,  660,  555,  660,
      555,  560,  560,  551,  560,  552,  560,  553,  563,  563,
      564,  564,  741,  564,  741,  564,  565,  565,  570,  570,
      571,  571,  563,  586,  586,  587,  587,  588,  588,  590,
      565,  589,  589,  570,  595,  595,  596,  596,  586,  597,
      597,  601,  601,  602,  602,  590,  589,  603,  603,  595,
      606,  606,  607,  607,  614,  614,  601,  619,  619,  620,
      620,  788,  603,  623,  623,  606,  644,  644,  645,  645,
      653,  653,  619,  654,  654,  667,  603,  686,  686,  667,
      789,  645,  669,  669,  679,  679,  654,  685,  685,  687,

      687,  669,  689,  689,  690,  690,  790,  669,  679,  688,
      688,  685,  688,  687,  688,  791,  689,  695,  695,  698,
      698,  792,  698,  793,  698,  701,  701,  702,  702,  794,
      702,  695,  702,  707,  707,  708,  708,  723,  723,  701,
      724,  724,  725,  725,  726,  726,  730,  749,  707,  795,
      730,  749,  723,  733,  733,  737,  737,  725,  738,  738,
      739,  739,  743,  743,  751,  751,  753,  753,  754,  754,
      771,  771,  771,  738,  776,  776,  778,  778,  796,  751,
      797,  753,  771,  785,  785,  778,  798,  799,  771,  800,
      801,  778,  798,  802,  802,  803,  804,  804,  805,  807,

      808,  810,  802,  809,  809,  811,  812,  815,  802,  804,
      813,  813,  820,  814,  814,  821,  814,  809,  814,  816,
      816,  818,  818,  817,  813,  817,  822,  822,  817,  817,
      823,  824,  830,  816,  817,  817,  831,  817,  819,  819,
      817,  819,  832,  819,  825,  825,  826,  826,  835,  826,
      837,  826,  829,  829,  839,  829,  840,  829,  825,  833,
      833,  834,  834,  836,  836,  838,  838,  841,  842,  843,
      844,  845,  845,  847,  833,  848,  834,  849,  844,  850,
      838,  846,  846,  846,  852,  852,  845,  851,  851,  853,
      853,  854,  854,  846,  855,  855,  856,  856,  857,  846,

      858,  859,  851,  860,  861,  862,  854,  863,  865,  855,
      866,  856,  864,  864,  867,  868,  869,  870,  870,  871,
      872,  873,  873,  874,  875,  876,  877,  877,  878,  878,
      879,  883,  870,  880,  880,  884,  873,  881,  881,  882,
      882,  877,  885,  886,  887,  888,  889,  890,  880,  873,
      891,  892,  893,  894,  882,  873,  895,  896,  870,  897,
      898,  899,  900,  901,  902,  903,  902,  904,  905,  905,
      906,  907,  907,  908,  909,  910,  911,  905,  912,  913,
      914,  915,  916,  905,  907,  917,  918,  921,  922,  923,
      924,  923,  925,  926,  927,  928,  929,  929,  930,  930,

      931,  932,  934,  935,  935,  936,  936,  937,  936,  938,
      936,  930,  939,  940,  940,  941,  940,  935,  940,  942,
      943,  944,  944,  945,  945,  946,  945,  947,  945,  947,
      948,  949,  950,  952,  951,  944,  953,  956,  957,  958,
      958,  959,  958,  960,  958,  963,  964,  964,  965,  965,
      950,  951,  966,  966,  968,  952,  967,  967,  969,  970,
      970,  964,  971,  971,  972,  973,  974,  966,  975,  976,
      977,  978,  979,  979,  970,  980,  980,  981,  982,  983,
      984,  985,  986,  987,  988,  989,  988,  979,  990,  990,
      991,  991,  992,  992,  993,  993,  994,  994,  995,  995,

      996,  996,  997,  998,  999,  991, 1000, 1001, 1002,  993,
     1003, 1004, 1005,  995, 1006, 1007, 1007, 1008, 1008, 1009,
     1009, 1010, 1010, 1011, 1012, 1013, 1016, 1013, 1014, 1014,
     1007, 1017, 1008, 1018, 1009, 1015, 1015, 1019, 1020, 1021,
     1021, 1022, 1027, 1014, 1023, 1023, 1024, 1024, 1025, 1025,
     1026, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
     1036, 1024, 1037, 1038, 1039, 1026, 1040, 1041, 1042, 1043,
     1044, 1045, 1046, 1047, 1048, 1049, 1049, 1050, 1050, 1051,
     1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
     1050, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,

     1071, 1072, 1072, 1073, 1074, 1076, 1076, 1077, 1076, 1078,
     1076, 1079, 1080, 1081, 1084, 1085, 1085, 1088, 1085, 1090,
     1085, 1089, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
     1098, 1099, 1100, 1101, 1104, 1089, 1105, 1105, 1106, 1106,
     1107, 1108, 1109, 1109, 1110, 1111, 1112, 1113, 1114, 1115,
     1116, 1117, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
     1125, 1126, 1127, 1128, 1128, 1129, 1129, 1130, 1130, 1131,
     1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141,
     1141, 1142, 1142, 1143, 1143, 1144, 1144, 1145, 1145, 1146,
     1147, 1148, 1149, 1151, 1141, 1150, 1150, 1152, 1143, 1153,

     1154, 1155, 1156, 1157, 1157, 1158, 1158, 1159, 1159, 1160,
     1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
     1158, 1171, 1172, 1173, 1160, 1174, 1175, 1176, 1177, 1178,
     1179, 1180, 1181, 1182, 1182, 1183, 1184, 1185, 1186, 1187,
     1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198,
     1199, 1201, 1202, 1203, 1204, 1208, 1208, 1209, 1209, 1210,
     1210, 1211, 1212, 1212, 1213, 1213, 1214, 1214, 1215, 1208,
     1216, 1209, 1217, 1210, 1218, 1218, 1212, 1219, 1213, 1220,
     1221, 1222, 1222, 1223, 1224, 1224, 1225, 1228, 1218, 1226,
     1226, 1227, 1227, 1229, 1230, 1222, 1231, 1232, 1224, 1233,

     1234, 1235, 1236, 1226, 1237, 1238, 1227, 1239, 1240, 1241,
     1242, 1243, 1244, 1245, 1246, 1218, 1247, 1212, 1248, 1249,
     1250, 1251, 1251, 1252, 1253, 1254, 1255, 1256, 1259, 1224,
     1257, 1257, 1258, 1258, 1260, 1261, 1251, 1262, 1263, 1264,
     1264, 1265, 1266, 1267, 1268, 1268, 1269, 1269, 1270, 1270,
     1271, 1271, 1272, 1274, 1264, 1275, 1275, 1276, 1279, 1268,
     1278, 1278, 1281, 1270, 1275, 1282, 1283, 1284, 1285, 1278,
     1275, 1286, 1287, 1288, 1289, 1278, 1290, 1291, 1291, 1292,
     1293, 1295, 1296, 1297, 1297, 1298, 1299, 1300, 1301, 1302,
     1303, 1304, 1291, 1305, 1306, 1308, 1309, 1310, 1297, 1311,

     1312, 1312, 1313, 1313, 1321, 1313, 1323, 1313, 1314, 1314,
     1315, 1315, 1316, 1316, 1312, 1317, 1317, 1318, 1318, 1319,
     1319, 1324, 1314, 1320, 1320, 1325, 1316, 1322, 1322, 1326,
     1326, 1318, 1328, 1319, 1327, 1327, 1329, 1330, 1331, 1332,
     1332, 1333, 1333, 1326, 1334, 1335, 1335, 1336, 1336, 1337,
     1338, 1339, 1339, 1332, 1340, 1340, 1341, 1341, 1343, 1335,
     1342, 1342, 1330, 1344, 1344, 1339, 1345, 1346, 1346, 1347,
     1350, 1341, 1348, 1348, 1349, 1349, 1351, 1351, 1344, 1352,
     1353, 1354, 1346, 1355, 1356, 1357, 1358, 1348, 1359, 1349,
     1360, 1351, 1361, 1362, 1363, 1363, 1364, 1365, 1366, 1366,

     1367, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1363,
     1375, 1376, 1380, 1366, 1377, 1377, 1378, 1378, 1379, 1379,
     1381, 1382, 1383, 1383, 1384, 1384, 1385, 1385, 1386, 1377,
     1389, 1378, 1388, 1388, 1391, 1390, 1390, 1383, 1393, 1394,
     1394, 1388, 1392, 1392, 1395, 1396, 1397, 1388, 1390, 1398,
     1399, 1392, 1394, 1400, 1401, 1402, 1403, 1392, 1405, 1406,
     1406, 1407, 1407, 1408, 1411, 1412, 1412, 1413, 1413, 1417,
     1418, 1419, 1420, 1421, 1406, 1422, 1423, 1424, 1425, 1426,
     1412, 1427, 1427, 1428, 1427, 1429, 1427, 1430, 1430, 1431,
     1431, 1432, 1432, 1433, 1433, 1435, 1433, 1436, 1433, 1434,

     1434, 1437, 1437, 1438, 1440, 1432, 1439, 1439, 1441, 1442,
     1443, 1443, 1444, 1445, 1445, 1437, 1446, 1447, 1447, 1441,
     1448, 1449, 1449, 1452, 1443, 1441, 1450, 1450, 1451, 1451,
     1453, 1453, 1454, 1454, 1458, 1449, 1455, 1455, 1456, 1456,
     1457, 1457, 1459, 1459, 1463, 1453, 1460, 1460, 1461, 1461,
     1466, 1455, 1467, 1456, 1462, 1462, 1468, 1459, 1464, 1464,
     1465, 1465, 1469, 1461, 1470, 1471, 1472, 1473, 1474, 1474,
     1475, 1476, 1476, 1464, 1477, 1477, 1478, 1478, 1479, 1479,
     1480, 1481, 1481, 1474, 1482, 1482, 1476, 1483, 1483, 1477,
     1484, 1484, 1485, 1479, 1486, 1487, 1488, 1489, 1490, 1482,

     1491, 1491, 1483, 1492, 1492, 1484, 1493, 1493, 1494, 1494,
     1495, 1496, 1497, 1497, 1498, 1491, 1499, 1499, 1500, 1500,
     1501, 1502, 1505, 1494, 1503, 1503, 1504, 1504, 1507, 1502,
     1508, 1500, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1504,
     1516, 1516, 1517, 1519, 1519, 1520, 1521, 1522, 1523, 1524,
     1527, 1528, 1529, 1532, 1532, 1535, 1532, 1536, 1532, 1537,
     1537, 1538, 1538, 1494, 1539, 1539, 1540, 1541, 1542, 1543,
     1544, 1545, 1545, 1537, 1546, 1546, 1547, 1548, 1539, 1549,
     1550, 1550, 1542, 1551, 1551, 1545, 1551, 1552, 1551, 1553,
     1553, 1554, 1554, 1557, 1550, 1555, 1555, 1556, 1556, 1558,

     1558, 1557, 1559, 1559, 1560, 1560, 1554, 1561, 1561, 1562,
     1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1570, 1560,
     1571, 1571, 1572, 1573, 1573, 1574, 1574, 1575, 1575, 1576,
     1576, 1585, 1570, 1577, 1577, 1578, 1578, 1586, 1573, 1579,
     1579, 1580, 1580, 1587, 1576, 1581, 1581, 1582, 1582, 1588,
     1578, 1583, 1583, 1589, 1579, 1584, 1584, 1590, 1590, 1595,
     1581, 1591, 1591, 1592, 1592, 1596, 1583, 1593, 1593, 1594,
     1594, 1597, 1590, 1598, 1598, 1599, 1600, 1601, 1592, 1602,
     1602, 1603, 1604, 1605, 1594, 1606, 1607, 1608, 1609, 1610,
     1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1620, 1621,

     1622, 1623, 1624, 1624, 1625, 1625, 1626, 1626, 1627, 1628,
     1629, 1630, 1631, 1632, 1633, 1633, 1634, 1635, 1625, 1636,
     1637, 1637, 1640, 1637, 1642, 1637, 1641, 1641, 1643, 1644,
     1644, 1645, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652,
     1653, 1654, 1654, 1655, 1644, 1656, 1656, 1657, 1657, 1658,
     1658, 1659, 1659, 1660, 1660, 1661, 1661, 1662, 1662, 1663,
     1664, 1665, 1666, 1667, 1658, 1668, 1668, 1669, 1669, 1670,
     1670, 1671, 1671, 1672, 1672, 1673, 1673, 1674, 1675, 1676,
     1668, 1677, 1678, 1679, 1680, 1681, 1671, 1682, 1683, 1684,
     1673, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1693, 1694,

     1695, 1696, 1696, 1697, 1698, 1699, 1699, 1700, 1701, 1702,
     1703, 1704, 1705, 1706, 1707, 1708, 1696, 1709, 1710, 1711,
     1712, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720,
     1721, 1722, 1722, 1723, 1724, 1725, 1725, 1726, 1727, 1728,
     1728, 1729, 1729, 1730, 1730, 1731, 1731, 1732, 1734, 1735,
     1725, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1730, 1743,
     1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1753, 1754,
     1754, 1755, 1756, 1757, 1741, 1758, 1759, 1760, 1761, 1762,
     1762, 1764, 1753, 1763, 1763, 1765, 1765, 1766, 1766, 1767,
     1768, 1769, 1770, 1762, 1771, 1772, 1773, 1763, 1774, 1765,

     1775, 1775, 1766, 1776, 1776, 1777, 1778, 1779, 1780, 1780,
     1781, 1781, 1782, 1772, 1783, 1775, 1784, 1784, 1776, 1785,
     1786, 1787, 1789, 1780, 1790, 1791, 1793, 1794, 1795, 1796,
     1797, 1798, 1798, 1799, 1801, 1802, 1803, 1804, 1804, 1805,
     1806, 1807, 1807, 1808, 1809, 1810, 1798, 1811, 1812, 1812,
     1813, 1813, 1814, 1814, 1816, 1807, 1815, 1815, 1817, 1817,
     1818, 1818, 1812, 1819, 1819, 1821, 1814, 1820, 1820, 1822,
     1822, 1823, 1817, 1824, 1825, 1825, 1826, 1827, 1819, 1828,
     1829, 1830, 1830, 1834, 1822, 1831, 1831, 1832, 1832, 1825,
     1833, 1833, 1835, 1836, 1836, 1838, 1830, 1837, 1837, 1839,

     1840, 1841, 1832, 1842, 1843, 1845, 1846, 1847, 1836, 1848,
     1849, 1850, 1851, 1851, 1852, 1852, 1853, 1855, 1856, 1857,
     1857, 1858, 1859, 1859, 1860, 1860, 1861, 1851, 1862, 1863,
     1864, 1865, 1865, 1857, 1866, 1866, 1859, 1867, 1868, 1868,
     1869, 1869, 1870, 1871, 1871, 1872, 1872, 1873, 1873, 1874,
     1875, 1875, 1876, 1876, 1877, 1878, 1879, 1880, 1871, 1881,
     1881, 1883, 1873, 1882, 1882, 1875, 1884, 1885, 1885, 1886,
     1886, 1887, 1887, 1888, 1889, 1890, 1892, 1893, 1894, 1895,
     1896, 1897, 1885, 1898, 1899, 1899, 1887, 1900, 1902, 1903,
     1903, 1904, 1904, 1905, 1905, 1906, 1906, 1907, 1908, 1909,

     1909, 1910, 1911, 1903, 1912, 1912, 1916, 1905, 1913, 1913,
     1914, 1914, 1918, 1909, 1915, 1915, 1917, 1917, 1919, 1912,
     1920, 1921, 1922, 1923, 1928, 1914, 1924, 1924, 1925, 1925,
     1926, 1926, 1927, 1927, 1929, 1930, 1931, 1932, 1933, 1934,
     1935, 1936, 1937, 1925, 1938, 1939, 1939, 1927, 1940, 1940,
     1941, 1941, 1942, 1943, 1944, 1944, 1945, 1945, 1946, 1947,
     1947, 1951, 1940, 1948, 1948, 1949, 1949, 1952, 1944, 1950,
     1950, 1953, 1954, 1947, 1955, 1956, 1957, 1961, 1948, 1958,
     1958, 1959, 1959, 1960, 1960, 1962, 1963, 1964, 1965, 1966,
     1967, 1968, 1969, 1970, 1971, 1973, 1959, 1972, 1972, 1974,

     1975, 1975, 1976, 1977, 1977, 1978, 1978, 1979, 1979, 1980,
     1981, 1982, 1983, 1983, 1984, 1985, 1986, 1977, 1987, 1987,
     1988, 1989, 1990, 1991, 1994, 1996, 1997, 1983, 1998, 1999,
     2000, 2001, 2002, 2002, 2003, 2004, 2004, 2005, 2005, 2006,
     2006, 2007, 2007, 2008, 1983, 2009, 2009, 2010, 2011, 2012,
     2004, 2013, 2005, 2014, 2006, 2016, 2017, 2019, 2020, 2021,
     2009, 2022, 2023, 2023, 2024, 2024, 2025, 2025, 2026, 2026,
     2027, 2027, 2028, 2028, 2029, 2030, 2030, 2023, 2032, 2024,
     2031, 2031, 2034, 2026, 2033, 2033, 2035, 2036, 2037, 2038,
     2030, 2039, 2040, 2041, 2042, 2043, 2043, 2044, 2044, 2033,

     2045, 2045, 2046, 2046, 2047, 2048, 2048, 2049, 2050, 2050,
     2043, 2051, 2051, 2052, 2053, 2053, 2054, 2054, 2055, 2056,
     2057, 2058, 2059, 2050, 2060, 2061, 2061, 2062, 2063, 2053,
     2065, 2054, 2064, 2064, 2066, 2066, 2067, 2067, 2068, 2068,
     2069, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2066,
     2077, 2078, 2082, 2068, 2079, 2079, 2080, 2080, 2084, 2085,
     2086, 2086, 2087, 2087, 2088, 2089, 2089, 2090, 2091, 2092,
     2092, 2093, 2093, 2097, 2086, 2094, 2094, 2087, 2095, 2095,
     2089, 2096, 2096, 2092, 2100, 2093, 2098, 2098, 2099, 2099,
     2101, 2101, 2106, 2095, 2102, 2102, 2103, 2103, 2104, 2104,

     2108, 2098, 2105, 2105, 2101, 2107, 2107, 2112, 2102, 2109,
     2109, 2110, 2110, 2111, 2111, 2114, 2114, 2115, 2115, 2116,
     2116, 2117, 2117, 2109, 2118, 2118,  740,  736,  735,  734,
      732,  731, 2115,  729, 2116, 2120, 2120, 2120, 2120, 2120,
     2121, 2121, 2121, 2121, 2121, 2122, 2122, 2122, 2122, 2122,
     2123, 2123, 2123, 2123, 2123, 2124, 2124, 2124, 2124, 2124,
     2125, 2125, 2125, 2125, 2125, 2126, 2126, 2126, 2126, 2126,
     2127, 2127, 2127, 2127, 2127, 2128, 2128, 2128, 2128, 2129,
      728, 2129, 2129, 2129, 2130, 2130,  727, 2130, 2130, 2131,
     2131, 2131,  722, 2131,  721,  720,  719,  718,  717,  716,

      715,  714,  713,  712,  711,  710,  709,  706,  705,  704,
      703,  700,  699,  694,  691,  684,  681,  680,  678,  677,
      676,  675,  674,  673,  672,  670,  668,  666,  665,  664,
      663,  662,  661,  659,  658,  657,  656,  655,  652,  651,
      649,  648,  647,  646,  642,  641,  640,  639,  638,  637,
      636,  635,  634,  633,  632,  631,  630,  629,  628,  627,
      626,  625,  624,  622,  621,  618,  617,  616,  615,  613,
      612,  611,  610,  609,  608,  605,  604,  600,  599,  598,
      594,  593,  592,  591,  585,  584,  583,  581,  580,  579,
      578,  577,  576,  575,  574,  573,  572,  569,  568,  567,

      566,  562,  561,  559,  558,  557,  556,  554,  550,  549,
      548,  545,  544,  543,  542,  540,  536,  535,  534,  533,
      532,  531,  530,  529,  528,  527,  526,  525,  524,  523,
      522,  521,  520,  519,  516,  515,  514,  512,  510,  509,
      508,  507,  503,  501,  500,  499,  497,  496,  495,  494,
      493,  492,  491,  490,  489,  488,  486,  485,  484,  483,
      482,  479,  478,  476,  475,  474,  473,  470,  469,  467,
      465,  464,  463,  460,  456,  455,  454,  453,  452,  451,
      447,  446,  445,  444,  443,  442,  440,  438,  437,  436,
      435,  434,  431,  430,  429,  428,  427,  426,  422,  421,

      418,  417,  416,  415,  414,  409,  408,  407,  406,  402,
      399,  398,  397,  396,  395,  393,  392,  391,  390,  389,
      388,  386,  385,  384,  383,  382,  379,  377,  376,  375,
      374,  373,  372,  370,  369,  368,  367,  366,  365,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  354,  353,
      351,  350,  349,  348,  347,  346,  344,  343,  342,  341,
      340,  339,  338,  337,  336,  335,  333,  331,  330,  328,
      327,  326,  325,  324,  323,  322,  321,  320,  317,  316,
      315,  312,  311,  310,  309,  308,  306,  305,  303,  299,
      298,  297,  296,  293,  292,  291,  290,  286,  284,  283,

      282,  281,  280,  279,  278,  277,  276,  275,  274,  273,
      272,  271,  270,  269,  268,  267,  266,  265,  264,  263,
      261,  260,  259,  258,  257,  256,  255,  254,  253,  252,
      251,  250,  249,  248,  247,  244,  243,  242,  241,  240,
      239,  238,  237,  236,  234,  233,  232,  230,  229,  228,
      227,  226,  225,  224,  223,  222,  221,  220,  219,  217,
      216,  215,  213,  211,  210,  207,  206,  205,  204,  203,
      202,  201,  198,  197,  196,  195,  194,  193,  192,  191,
      190,  189,  188,  186,  185,  184,  183,  180,  179,  178,
      177,  176,  175,  173,  172,  171,  169,  168,  167,  166,

      165,  164,  163,  162,  161,  160,  159,  158,  156,  155,
      154,  152,  150,  149,  147,  145,  143,  140,  138,  137,
      135,  134,  131,  130,  129,  128,  125,  124,  123,  121,
      120,  117,  116,  115,  114,  113,  112,  110,  109,  108,
      107,  106,  105,  103,   98,   97,   95,   93,   91,   88,
       86,   85,   83,   82,   79,   78,   77,   74,   67,   66,
       58,   57,   56,   55,   54,   53,   49,   44,   41,   32,
       31,   27,   24,   22,   19,   14,   13,    8,    7,    6,
        5,    4,    3, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,

     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
     2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[263] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 
    1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
/* $Id$ */
/** @file parseosol.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
 *
 * \remarks
 * Copyright (C) 2005-2011, Horand Gassmann, Jun Ma, Kipp Martin,
 * Dalhousie University, Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 15 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"

#include "OSConfig.h"

#include <iostream>
#include <sstream>  

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CTIME
# include <ctime>
#else
# ifdef HAVE_TIME_H
#  include <time.h>
# else
#  error "don't have header file for time"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 

//#define PARSERDEBUG
#ifdef PARSERDEBUG

	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSGeneral.h"
#include "OSParseosol.tab.hpp"
#include "OSOption.h"
#include "OSoLParserData.h"

using std::cout;
using std::endl;
using std::ostringstream;









#line 103 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
#define YY_EXTRA_TYPE OSoLParserData*
#line 2002 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.cpp"

#define INITIAL 0
#define osolattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osollex_init (yyscan_t* scanner);

int osollex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osollex_destroy (yyscan_t yyscanner );

int osolget_debug (yyscan_t yyscanner );

void osolset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osolget_extra (yyscan_t yyscanner );

void osolset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osolget_in (yyscan_t yyscanner );

void osolset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osolget_out (yyscan_t yyscanner );

void osolset_out  (FILE * out_str ,yyscan_t yyscanner );

int osolget_leng (yyscan_t yyscanner );

char *osolget_text (yyscan_t yyscanner );

int osolget_lineno (yyscan_t yyscanner );

void osolset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osolget_lval (yyscan_t yyscanner );

void osolset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osolget_lloc (yyscan_t yyscanner );
    
        void osolset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osolwrap (yyscan_t yyscanner );
#else
extern int osolwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osollex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osollex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 113 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"


 
#line 2258 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osolensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osol_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2120 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3284 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 116 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 120 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 121 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 122 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 123 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 125 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 141 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 143 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROPTIONSATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 144 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFJOBIDSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 145 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 146 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 147 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHSATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 148 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 149 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPATHPAIRSATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 150 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFPROCESSESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 151 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 152 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 153 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 154 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLEOPTIONSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 155 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 156 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 157 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVEOPTIONSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 158 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 159 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTOPTIONSATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 160 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 161 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(NUMBEROFSOLVEROPTIONSATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 162 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 163 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSIDXATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 164 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GROUPWEIGHTATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 165 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LBDUALVALUEATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 166 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UBDUALVALUEATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 170 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 171 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 172 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 173 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 174 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 175 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 176 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 177 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 178 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 179 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYLBVALUEATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 180 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 181 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LBVALUEATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 182 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 183 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(LOCATIONTYPEATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 184 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 185 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 186 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 187 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 188 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 189 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYSOLVERATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 190 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 191 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(SOLVERATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 192 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 193 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 194 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 195 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 196 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 197 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TRANSPORTTYPEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 198 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 199 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUBVALUEATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 200 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 201 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UBVALUEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 202 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 203 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 204 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 205 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 206 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 207 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 208 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 209 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 210 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 211 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(EMPTYWEIGHTATT);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 212 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 213 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTATT);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 215 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(FROMATT);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 216 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(FROMATT);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 217 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TOATT);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 218 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TOATT);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 219 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 220 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(MAKECOPYATT);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 222 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 223 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 224 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 226 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{return(OSOLSTARTEMPTY);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 227 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; BEGIN osolattributetext;  return(OSOLSTART);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 228 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OSOLEND);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 230 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 231 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 233 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 234 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 236 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 237 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 239 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 240 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 242 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 243 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 245 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 246 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 249 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURISTART);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 250 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICEURIEND);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 251 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMESTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 252 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICENAMEEND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 253 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMESTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 254 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCENAMEEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 255 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 256 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INSTANCELOCATIONEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 257 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 258 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(JOBIDEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 259 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKESTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 260 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVERTOINVOKEEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 261 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSESTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 262 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(LICENSEEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 263 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMESTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 264 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(USERNAMEEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 265 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDSTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 266 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PASSWORDEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 267 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTSTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 268 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONTACTEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 269 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSSTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 270 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEROPTIONSEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 271 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 272 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 274 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACESTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 275 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINDISKSPACEEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 276 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYSTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 277 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINMEMORYEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 278 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDSTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 279 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUSPEEDEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 280 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBERSTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 281 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MINCPUNUMBEREND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 282 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 283 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 284 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 285 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 287 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPESTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 288 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SERVICETYPEEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 290 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMESTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 291 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(MAXTIMEEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 292 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMESTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 293 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUESTEDSTARTTIMEEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 294 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 295 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DEPENDENCIESEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 296 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 297 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDDIRECTORIESEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 298 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 299 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 300 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESSTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 301 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(REQUIREDFILESEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 302 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKESTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 303 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTOMAKEEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 304 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKESTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 305 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTOMAKEEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 306 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 307 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 308 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVESTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 309 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INPUTFILESTOMOVEEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 310 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIRSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 311 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PATHPAIREND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 312 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVESTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 313 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTDIRECTORIESTOMOVEEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 314 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVESTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 315 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OUTPUTFILESTOMOVEEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 316 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETESTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 317 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(DIRECTORIESTODELETEEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 318 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETESTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 319 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(FILESTODELETEEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 320 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 321 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSESTOKILLEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 322 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSSTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 323 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(PROCESSEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 326 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 327 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 328 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 329 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 330 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGSTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 331 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALVARIABLEVALUESSTRINGEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 332 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSSTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 333 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALBASISSTATUSEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 334 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 335 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 336 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 337 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 338 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 339 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 340 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYSTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 341 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ATEQUALITYEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 342 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 343 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 344 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 345 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 346 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 347 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 348 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 349 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INTEGERVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 350 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSSTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 351 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSVARIABLEBRANCHINGWEIGHTSEND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 352 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 353 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOSEND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 354 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 355 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 356 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 357 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 358 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESSTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 359 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEVALUESEND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 360 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 361 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 362 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 363 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALOBJECTIVEBOUNDSEND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 364 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 365 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 366 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 367 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALCONSTRAINTVALUESEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 368 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 369 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 370 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 371 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(INITIALDUALVALUESEND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 372 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSSTART);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 373 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSEND);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 374 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONSTART);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 375 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT; return(SOLVEROPTIONEND);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 376 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 377 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
/* The <item> element and the children of the option header are treated specially because they may legitimately contain special characters */
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 382 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 383 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 384 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 385 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 387 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 388 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 389 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 390 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 392 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 393 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 394 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 395 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 397 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 398 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 399 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 400 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 402 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 403 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 404 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 405 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 244:
/* rule 244 can match eol */
YY_RULE_SETUP
#line 407 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 408 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 409 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 410 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
/* environments and comments */
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 414 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 415 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 417 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
BEGIN comment;
	YY_BREAK
case 251:
#line 419 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 419 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 420 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 422 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
BEGIN xmldeclaration;
	YY_BREAK
case 255:
#line 424 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 424 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 425 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
BEGIN 0;
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 428 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 429 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);   /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 430 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{YY_PRINT;  BEGIN 0;  /*yylval->sval = strdup(yytext);*/   yylval->sval = yytext;   return(OSOLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 434 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
{  
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << endl;
	outStr << "See line number: " << yylineno << endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 446 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"
ECHO;
	YY_BREAK
#line 3943 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osolattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osollex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osolwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osollex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osolrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osolrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osolrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2120 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2120 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2119);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osolrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osolwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osolrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osolensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osol_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osol_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osol_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osol_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osolpop_buffer_state();
	 *		osolpush_buffer_state(new_buffer);
     */
	osolensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osol_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osolwrap()) processing, but the only time this flag
	 * is looked at is after osolwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osol_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osol_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osolalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osol_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osol_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osol_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osolfree((void *) b->yy_ch_buf ,yyscanner );

	osolfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osolrestart() or at EOF.
 */
    static void osol_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osol_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osol_init_buffer was _probably_
     * called from osolrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osol_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osol_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osolpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osolensure_buffer_stack(yyscanner);

	/* This block is copied from osol_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osol_switch_to_buffer. */
	osol_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osolpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osol_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osolensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osolrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osolensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osol_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osolalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osol_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osollex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osol_scan_bytes() instead.
 */
YY_BUFFER_STATE osol_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osol_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osollex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osol_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osolalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osol_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osol_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osol_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osolget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osolget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osolget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osolget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osolget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osolget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osolset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osolset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osolset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osol_switch_to_buffer
 */
void osolset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osolset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osolget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osolset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osolget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osolset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osolget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osolset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osollex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osollex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osollex_init_extra has the same functionality as osollex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osolalloc in
 * the yyextra field.
 */

int osollex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osolset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osolalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osolset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osollex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osollex_init()
     */
    return 0;
}

/* osollex_destroy is for both reentrant and non-reentrant scanners. */
int osollex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osol_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osolpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osolfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osolfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osollex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osolfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osolalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osolrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osolfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osolrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 446 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosol.l"






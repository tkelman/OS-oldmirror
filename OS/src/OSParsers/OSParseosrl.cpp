#line 2 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.cpp"

#line 4 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 240
#define YY_END_OF_BUFFER 241
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1896] =
    {   0,
        1,    1,  238,  238,  236,  236,  237,  237,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  241,  239,
        1,    2,  226,    2,  226,    6,  226,    5,  239,    4,
      226,  226,  238,  240,  236,  237,  227,  229,  230,  229,
      233,  234,  233,    1,  226,  226,    6,  226,    5,    0,
        4,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,    3,    6,    6,  226,    7,    5,    0,
        0,  232,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        4,  226,  226,  238,  236,  237,  227,    0,  235,  226,

      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,    6,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  114,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    6,
      231,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  228,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  104,    0,    0,
        0,    0,    0,    0,    0,  124,    0,    0,    0,   76,
        0,    0,    0,  132,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  196,  226,  226,  226,   28,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  115,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   76,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  172,    0,
        0,    0,    0,    0,    0,    0,  226,  226,   28,  226,
       29,  226,   30,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  105,    0,    0,    0,    0,  115,    0,

        0,    0,    0,    0,  125,    0,    0,    0,    0,   77,
        0,    0,    0,    0,    0,  133,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  197,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   98,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  203,  128,    0,    0,    0,    0,  207,    0,
        0,   66,   65,  138,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  226,  226,   29,   30,  226,

       43,   44,  226,  226,  226,  226,   51,   52,  226,   55,
       56,  226,  226,  226,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  105,    0,    0,    0,    0,    0,    0,
        0,    0,  125,    0,    0,    0,  204,   77,    0,    0,
        0,    0,  208,  133,    0,    0,    0,   67,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  173,    0,    0,    0,    0,    0,    0,    0,    0,
      197,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      126,  205,  203,    0,    0,    0,  209,  207,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  162,
        0,    0,    0,   72,    0,    0,    0,    0,    0,    0,
        0,    0,  192,  200,    0,  226,  226,   41,   42,  226,
      226,   31,  226,   49,   50,   53,   54,  226,   59,   60,
      226,    0,    0,    0,    0,    0,    0,    0,    0,   99,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  204,    0,  129,    0,    0,  208,    0,    0,   67,
        0,  139,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  173,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   84,

       86,    0,    0,    0,    0,    0,    0,    0,    0,  116,
        0,    0,   70,    0,  205,    0,    0,  130,  209,    0,
        0,    0,    0,    0,    0,    0,   74,    0,    0,    0,
        0,    0,  211,    0,    0,    0,   72,    0,    0,    0,
        0,    0,  182,    0,    0,    0,    0,    0,  226,  226,
      226,   31,  226,   57,   58,  226,    0,    0,    0,    0,
        0,    0,    0,   99,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  127,  129,    0,    0,    0,
        0,  139,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  212,    0,  163,    0,    0,    0,    0,   73,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  193,
        0,    0,  201,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   70,    0,    0,
        0,    0,    0,  223,    0,    0,    0,    0,    0,    0,
        0,   74,    0,    0,  156,    0,    0,  213,  211,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,    0,    0,    0,   85,
        0,   87,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  117,    0,    0,    0,   71,    0,    0,  127,

        0,  224,    0,  131,    0,    0,    0,    0,    0,    0,
        0,   75,    0,    0,    0,    0,    0,  212,  163,    0,
        0,    0,   73,    0,    0,    0,    0,    0,    0,  183,
        0,    0,    0,    0,  193,    0,  201,    0,    0,    0,
        0,  102,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  225,  223,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      213,    0,    0,  166,    0,    0,    0,  176,    0,    0,
        0,    0,    0,    0,    0,  198,  226,   35,   36,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,

      226,  226,  226,    0,    0,   85,   87,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  117,    0,    0,   71,
        0,    0,  224,  131,    0,    0,    0,    0,    0,    0,
        0,   75,    0,    0,    0,    0,  157,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  183,    0,    0,
        0,    0,    0,    0,    0,   82,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  112,    0,    0,    0,    0,
        0,  225,    0,    0,  134,    0,    0,    0,    0,    0,
        0,    0,  152,    0,    0,    0,    0,  164,  168,    0,
        0,    0,    0,    0,    0,    0,  190,    0,   33,   34,

      226,  226,  226,   10,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,    0,    0,    0,    0,    0,
        0,  103,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  157,    0,    0,    0,    0,  167,    0,
        0,    0,    0,  177,    0,    0,    0,    0,    0,    0,
        0,    0,  199,    0,    0,    0,    0,    0,  100,  106,
        0,    0,    0,  118,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  150,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  226,

      226,  226,    8,  226,   10,  226,  226,   12,  226,  226,
       14,  226,  226,  226,  226,  226,  226,  226,   25,  226,
      226,  226,  226,    0,    0,   83,    0,    0,    0,  103,
        0,    0,    0,    0,    0,    0,    0,  113,    0,    0,
        0,    0,    0,  135,    0,    0,    0,    0,    0,    0,
        0,    0,  153,    0,    0,    0,    0,  165,  167,    0,
      169,    0,    0,  177,    0,    0,    0,    0,    0,    0,
      191,    0,  199,    0,    0,    0,    0,    0,    0,  110,
        0,    0,  215,    0,    0,  219,    0,  122,    0,  202,
        0,    0,  206,   78,  140,    0,    0,   68,    0,    0,

        0,  160,    0,    0,    0,    0,    0,    0,  186,    0,
      194,  226,   39,   40,    8,  226,  226,   12,  226,   14,
      226,  226,  226,  226,  226,  226,   25,  226,  226,  226,
      226,    0,   83,    0,    0,    0,    0,    0,  101,    0,
      107,    0,    0,    0,  216,  113,    0,  119,    0,  220,
        0,    0,  135,    0,    0,    0,    0,    0,    0,    0,
      151,  153,    0,    0,    0,  165,  169,    0,    0,    0,
        0,    0,    0,    0,  191,    0,    0,    0,    0,    0,
        0,    0,    0,  217,  215,    0,  221,  219,    0,  120,
      202,    0,  206,    0,    0,    0,    0,    0,  158,    0,

        0,    0,    0,    0,  184,  188,   37,   38,  226,  226,
      226,   13,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,   24,  226,  226,  226,  226,    0,    0,    0,
        0,    0,    0,  101,  107,    0,    0,  111,  216,  119,
      220,    0,    0,  123,    0,   79,    0,    0,  141,    0,
        0,    0,   69,    0,  151,    0,    0,    0,  161,    0,
        0,    0,    0,    0,    0,  187,    0,    0,  195,    0,
        0,    0,    0,    0,    0,    0,  217,    0,  221,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      180,  226,  226,   13,  226,  226,  226,  226,  226,  226,

      226,  226,  226,   24,  226,   27,  226,  226,  226,    0,
        0,    0,    0,    0,    0,    0,  111,    0,  121,  123,
       79,    0,  141,    0,    0,   69,    0,    0,    0,  159,
      161,    0,    0,    0,    0,    0,  185,  187,    0,  189,
      195,   80,    0,    0,    0,   94,    0,  108,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,   27,  226,  226,  226,  226,    0,    0,    0,    0,
        0,    0,    0,  121,    0,    0,    0,    0,    0,  159,
        0,    0,    0,    0,  181,  185,  189,    0,    0,    0,

       96,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      210,    0,    0,    0,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,    0,
       81,    0,    0,    0,    0,   95,    0,    0,  109,    0,
        0,    0,    0,    0,    0,    0,    0,  181,    0,   90,
        0,    0,    0,    0,    0,    0,  146,    0,    0,  210,
      170,    0,  178,  226,  226,  226,  226,  226,  226,  226,
      226,  226,   21,  226,  226,  226,   26,  226,  226,  226,
       81,    0,    0,    0,   95,    0,   97,  109,    0,    0,
        0,    0,    0,    0,    0,    0,   88,   92,    0,    0,

        0,  222,    0,    0,  148,  154,  174,  226,  226,  226,
       15,  226,  226,  226,  226,  226,   21,  226,  226,   26,
      226,   32,  226,  226,  226,    0,    0,   91,    0,   97,
        0,    0,    0,  147,    0,    0,    0,  171,    0,    0,
      179,    0,    0,  222,    0,  142,  226,    9,  226,   15,
      226,  226,  226,  226,  226,  226,  226,   23,   32,  226,
      226,  226,   63,   64,    0,   89,   91,    0,   93,    0,
        0,  147,    0,  149,    0,  155,  171,    0,  175,  179,
        0,    0,    0,  144,    9,  226,   11,  226,  226,  226,
       18,  226,  226,  226,   23,  226,   47,   48,   61,   62,

       89,   93,    0,    0,  143,    0,  149,  155,  175,    0,
        0,    0,   11,  226,  226,   18,  226,  226,  226,   22,
       45,   46,    0,  143,    0,  145,    0,    0,    0,  226,
      226,  226,  226,   22,    0,  145,    0,    0,    0,  226,
      226,  226,  226,    0,    0,    0,    0,  226,  226,  226,
      226,    0,    0,    0,    0,  226,  226,  226,  226,    0,
        0,  214,    0,  218,  136,  226,  226,  226,  226,    0,
      214,  218,  226,  226,  226,  226,    0,  137,  226,  226,
      226,   19,  226,   20,  137,  226,  226,   17,   19,   20,
      226,   16,   17,   16,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,   24,   25,   26,    6,   27,   28,   29,   30,   31,
        6,   32,   33,   34,   35,   36,    6,    6,    6,    6,
        1,    6,    1,    1,    6,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[63] =
    {   0,
        1,    2,    2,    1,    3,    2,    4,    2,    2,    2,
        2,    2,    2,    2,    5,    2,    6,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2
    } ;

static yyconst flex_int16_t yy_base[1909] =
    {   0,
        0,   29, 3705, 3704, 3715, 3714, 3711, 3710,    0,    0,
        0,    0, 3701, 3700,   13,   17,    3,    5, 3714, 3723,
       57, 3708,   20, 3705,   38,   76,   47,  116,  154,   25,
       58,   66,    0, 3723,    0,    0,    0, 3723, 3723, 3702,
     3723, 3723, 3693,  211,   77,  110,  134,   84,  269,   91,
       54,  124,  117,  125,  128,  166,   93,  161,  144,  170,
      151,  200,  212, 3723,  171,  232,  280, 3723,  240, 3700,
      274, 3723,  121, 3671,   54,    4,  132, 3662, 3665,  208,
     3654, 3659, 3662, 3665,  247, 3660,  294,  119,   30, 3663,
       74,  215,  261,    0,    0,    0,    0, 3682, 3723,  224,

      281,  289,  322,  260,  292,  323,  327,  331,  339,  342,
      345,  349,  356,  393, 3689,  319, 3660,  133,    8,  315,
     3651, 3654,  342, 3643, 3648, 3651, 3654,  348, 3649,  360,
      214,  250, 3652, 3632,  299, 3650, 3631, 3635, 3630, 3628,
     3645, 3723,   64, 3633, 3630, 3619, 3623, 3654, 3635, 3637,
     3635, 3618, 3623, 3625, 3614, 3615, 3624, 3612, 3622, 3611,
      270, 3627,  181, 3608, 3613, 3605, 3613, 3618,  299,  410,
     3723,  361,  403,  420,  409,  373,  413,  417,  416,  366,
      423,  424,  428,  429, 3723, 3602,  425, 3620, 3601, 3605,
     3600, 3598, 3615,  448,  327, 3603, 3600, 3589, 3593, 3624,

     3605, 3607, 3605, 3588, 3593, 3595, 3584, 3585, 3594, 3582,
     3592, 3581,  295, 3597,  249, 3578, 3583, 3575, 3583, 3588,
      326, 3571, 3574, 3575, 3573, 3579,  122, 3568, 3568, 3582,
     3572, 3585, 3569, 3576, 3575, 3723, 3559, 3560, 3564,  446,
     3571, 3556, 3569, 3568, 3563, 3559, 3565, 3548, 3563, 3545,
      357, 3548, 3545,  404, 3559, 3543,  417, 3561, 3547, 3556,
     3538,  431,  451,  452,  471,  475,  480,  496,  499,  464,
      474,  492,  515,  519,  508,  493, 3537, 3540, 3541, 3539,
     3545,  505,  524, 3535, 3549, 3539,  526,  517, 3552, 3536,
     3543, 3542,  537, 3526, 3527, 3531,  542, 3538, 3523, 3536,

      545, 3531, 3527, 3533, 3516, 3531, 3513,  494, 3516, 3513,
      506, 3527, 3511,  512, 3529, 3515, 3524, 3506,  563, 3525,
     3504, 3501, 3507, 3510, 3501, 3542,   45, 3499, 3513, 3499,
     3516, 3506, 3509, 3529, 3494, 3510, 3505,  561,  566, 3524,
     3494, 3506,  572, 3503, 3492,  568, 3486, 3491, 3498, 3492,
     3480, 3494, 3495, 3476, 3487, 3475, 3476, 3488, 3495, 3477,
     3478, 3474,  556, 3483, 3483, 3485,  541,  576,  579,  595,
      598,  601,  617,  620,  623,  590,  612,  616,  640,  643,
      649,  666,  659,  624, 3484, 3463, 3460, 3466, 3469, 3460,
     3501,  445,  675,  682, 3458, 3472, 3458, 3475,  684, 3465,

     3468, 3488, 3453,  686,  688, 3469, 3464,  691,  693,  695,
     3483, 3453, 3465,  697,  699,  702, 3462, 3451,  704, 3445,
     3450, 3457, 3451, 3439, 3453, 3454, 3435, 3446, 3434, 3435,
     3447,  709, 3437, 3438, 3434,  697, 3443,  717,  720, 3443,
     3445, 3433, 3443, 3438, 3437, 3440, 3439, 3462, 3723, 3441,
     3419, 3422, 3426, 3433, 3420, 3414, 3413, 3429, 3415, 3423,
      726, 3446,  729, 3723, 3423, 3418,  736, 3443,  733, 3403,
     3413,  738, 3723,  713, 3401, 3399, 3416, 3409, 3399, 3411,
     3396, 3394, 3412, 3410, 3398,  546, 3403, 3419, 3385, 3412,
     3397, 3400, 3385, 3379, 3400,  698,  734,  754,  757,  760,

     3432, 3429,  749,  778,  753,  782, 3430, 3427,  798, 3428,
     3425,  804,  807,  761, 3383, 3393, 3388, 3387, 3390, 3389,
     3412,  814, 3391,  788, 3369, 3372, 3376, 3383, 3370, 3364,
     3363, 3379,  823, 3365, 3373,  825,  827,  830,  832, 3374,
     3369,  834,  836,  838, 3355, 3365,  841,  843,  845, 3353,
     3351, 3368, 3361, 3351, 3363, 3348, 3346, 3364, 3362, 3350,
      850,  852,  558, 3355, 3371, 3337, 3364, 3349, 3352, 3337,
      854, 3331, 3352, 3356, 3340, 3333, 3332, 3347, 3328, 3364,
     3326, 3344, 3324, 3327, 3330, 3336, 3339, 3334, 3326, 3334,
     3723,  857,  861, 3361, 3330, 3329,  863,  866, 3358, 3323,

     3305, 3325, 3314, 3340, 3315, 3321, 3310,  445,  868, 3723,
     3326, 3303, 3321,  870, 3303, 3319, 3330, 3303, 3303, 3317,
     3296, 3301, 3316, 3723, 3300,  865,  869, 3723, 3723,  781,
      872,  888,  632, 3723, 3723, 3723, 3723,  891, 3342, 3339,
      882, 3312, 3296, 3289, 3288, 3303, 3284, 3320,  898,  907,
     3282, 3300, 3280, 3283, 3286, 3292, 3295, 3290, 3282, 3290,
      910,  914,  916,  918, 3287, 3286,  921, 3281, 3263,  926,
      928,  932, 3283, 3272, 3298, 3273, 3279, 3268,  565,  934,
      936, 3284, 3261, 3279,  938,  940, 3261, 3277, 3288, 3261,
     3261, 3275, 3254, 3259,  944,  947, 3259, 3250, 3260, 3723,

     3723, 3256, 3246, 3257, 3264, 3255,  728, 3243, 3241, 3723,
     3241, 3259,  954, 3254,  956, 3249,  963, 3723,  965, 3243,
     3234, 3254, 3235, 3241, 3247, 3246,  967, 3236, 3234, 3220,
      973, 3253,  970, 3215, 3202, 3153,  976, 3156, 3147, 3155,
     3153, 3164, 3723,  630, 3154, 3149, 3143, 3156,  989,  887,
      978, 1007,  937, 3723, 3723,  971, 3136, 3141, 1013, 1015,
     3133, 3120, 3129,  979, 3133, 3114,  778, 3094, 3090, 1017,
     3087, 3105, 1023, 3097, 1025, 1033, 1035, 1041, 1043, 3071,
     3086, 1045, 3065, 3062, 3064, 3055, 1047, 3041, 3038, 3026,
     1049, 1051, 1060, 1065, 3020, 3001, 2992, 1067, 1069, 2994,

     2968, 2974, 2953, 2957, 1071,  759, 2944, 2917, 1076, 1078,
     2907, 1083, 1087, 2910, 2893, 2867, 2878, 2862, 2865, 2853,
     2857, 2852, 2845, 2848, 2849, 2836, 2813, 1089, 2809,  115,
       96, 1092,  154, 1095,  215,  221,  218,  322, 1044,  382,
      421, 1102,  456,  677, 3723,  445,  468, 1104, 1109,  531,
      511,  518,  561,  567,  579,  601,  625,  624,  625,  672,
      694,  676,  696,  703, 1111, 1114,  982, 1006, 1103, 1108,
     1117, 1118, 1014, 1024, 1121, 1122,  736,  726, 1139, 1141,
     1144, 1147,  767,  763,  800,  805,  833,  841,  851,  866,
      873, 1155, 1163,  899,  892, 1165, 1168,  904,  933, 1174,

     1176, 1178, 1181, 1183,  930,  933,  937, 1130,  970,  973,
     1187, 1189, 1018, 1043, 1192, 1007, 1027, 1194, 1197, 1038,
     1041, 1063, 1199, 1073, 1077, 1078, 1098, 1090, 1203, 1205,
     1095, 1102, 1126, 1109, 1208, 1120, 1210, 1148, 1160, 1154,
     1196, 3723, 1181, 1162, 1165, 1184, 1186, 1174, 1171, 1176,
     1177, 1192, 1193, 1190, 1230, 1232, 1225, 1188, 1183, 1194,
     1192, 1185, 1201, 1203, 1211, 1196, 1221, 1203, 1198, 1198,
     1249, 1198, 1213, 3723, 1216, 1205, 1218, 3723, 1207, 1226,
     1211, 1220, 1210, 1202, 1219, 3723, 1263, 1262, 1262, 1256,
     1257, 1273, 1262, 1266, 1267, 1270, 1276, 1277, 1280, 1281,

     1284, 1285, 1288, 1232, 1243, 1307, 1309, 1293, 1320, 1278,
     1260, 1271, 1290, 1292, 1280, 1277, 1333, 1282, 1288, 1338,
     1305, 1306, 1342, 1344, 1293, 1304, 1302, 1295, 1311, 1313,
     1321, 1353, 1308, 1333, 1314, 1358, 1360, 1313, 1313, 1325,
     1365, 1330, 1319, 1332, 1370, 1323, 1343, 1375, 1330, 1339,
     1329, 1322, 1339, 1383, 1332, 3723, 1358, 1345, 1350, 1338,
     1338, 1339, 1375, 1340, 1347, 3723, 1348, 1345, 1345, 1353,
     1354, 1402, 1358, 1366, 3723, 1357, 1353, 1365, 1357, 1371,
     1357, 1373, 3723, 1367, 1369, 1360, 1367, 3723, 3723, 1365,
     1379, 1367, 1371, 1385, 1383, 1388, 3723, 1376, 3723, 3723,

     1425, 1428, 1431, 1434, 1435, 1451, 1440, 1456, 1445, 1446,
     1459, 1460, 1477, 1470, 1483, 1373, 1479, 1401, 1390, 1397,
     1488, 1462, 1385, 1401, 1414, 1450, 1422, 1438, 1504, 1445,
     1445, 1452, 1460, 1508, 1461, 1457, 1470, 1462, 1476, 1462,
     1478, 1525, 1472, 1527, 1476, 1474, 1530, 1532, 1534, 1536,
     1486, 1500, 1541, 1543, 1494, 1499, 1513, 1511, 1517, 1553,
     1507, 1557, 1559, 1529, 1529, 1510, 1517, 1506, 3723, 3723,
     1517, 1528, 1569, 3723, 1573, 1516, 1536, 1576, 1536, 1580,
     1535, 1532, 1537, 1559, 1537, 1555, 3723, 1549, 1554, 1540,
     1541, 1550, 1567, 1552, 1579, 1562, 1564, 1566, 1563, 1605,

     1608, 1614, 1624, 1597, 1630, 1619, 1635, 1640, 1629, 1646,
     1656, 1639, 1649, 1650, 1653, 1657, 1660, 1680, 1683, 1664,
     1672, 1673, 1684, 1575, 1690, 1616, 1589, 1573, 1586, 1708,
     1579, 1714, 1717, 1618, 1635, 1719, 1722, 1724, 1726, 1730,
     1623, 1650, 1735, 1738, 1652, 1650, 1657, 1682, 1660, 1693,
     1742, 1746, 1748, 1690, 1701, 1690, 1751, 1753, 1755, 1758,
     1762, 1713, 1733, 1767, 1718, 1748, 1731, 1733, 1735, 1774,
     1776, 1737, 1779, 1738, 1755, 1738, 1735, 1766, 1732, 3723,
     1790, 1773, 1793, 1795, 1777, 1800, 1744, 3723, 1802, 1807,
     1761, 1811, 1814, 1778, 3723, 1768, 1763, 3723, 1767, 1760,

     1783, 3723, 1770, 1788, 1770, 1790, 1792, 1776, 3723, 1790,
     3723, 1830, 1829, 1829, 1836, 1825, 1826, 1846, 1852, 1855,
     1829, 1845, 1849, 1835, 1856, 1880, 1884, 1859, 1873, 1883,
     1887, 1811, 1889, 1874, 1812, 1833, 1884, 1906, 1910, 1912,
     1914, 1849, 1918, 1922, 1924, 1928, 1930, 1934, 1942, 1946,
     1855, 1948, 1950, 1952, 1954, 1868, 1865, 1958, 1874, 1960,
     1964, 1970, 1872, 1898, 1976, 1978, 1980, 1903, 1886, 1909,
     1921, 1910, 1984, 1927, 1986, 1988, 1921, 1917, 1924, 1951,
     1938, 1957, 1945, 1994, 1996, 1989, 2000, 2004, 1993, 3723,
     2006, 1969, 2010, 1963, 1983, 1960, 1961, 1981, 3723, 1981,

     1965, 1985, 1967, 1970, 3723, 3723, 3723, 3723, 2010, 2011,
     2027, 2034, 2016, 2017, 2024, 2023, 2035, 2038, 2039, 2042,
     2043, 2063, 2067, 2085, 2056, 2066, 2074, 1986, 1988, 1994,
     2030, 2013, 2037, 2074, 2090, 2035, 2092, 2094, 2103, 2108,
     2110, 2112, 2114, 2118, 2120, 2122, 2047, 2124, 2130, 2071,
     2052, 2132, 2136, 2062, 2140, 2091, 2142, 2144, 2148, 2074,
     2099, 2084, 2094, 2150, 2152, 2154, 2160, 2162, 2168, 2117,
     2111, 2125, 2116, 2111, 2117, 2118, 2173, 2138, 2178, 2140,
     2133, 2136, 2144, 2134, 2153, 2132, 2148, 2145, 2137, 2147,
     3723, 2178, 2179, 2195, 2184, 2187, 2188, 2191, 2192, 2196,

     2199, 2200, 2203, 2224, 2228, 2249, 2207, 2204, 2221, 2159,
     2176, 2187, 2180, 2186, 2197, 2198, 2253, 2256, 2259, 2265,
     2267, 2215, 2269, 2224, 2222, 2273, 2243, 2222, 2278, 2280,
     2282, 2241, 2233, 2243, 2287, 2289, 2291, 2294, 2296, 2298,
     2300, 3723, 2267, 2266, 2271, 3723, 2272, 3723, 2269, 2266,
     2273, 2257, 2260, 2259, 2272, 2273, 2317, 2270, 2266, 2272,
     2309, 2310, 2313, 2314, 2320, 2321, 2324, 2325, 2328, 2329,
     2332, 2348, 2341, 2349, 2345, 2356, 2350, 2294, 2292, 2311,
     2373, 2320, 2377, 2389, 2311, 2317, 2317, 2332, 2339, 2396,
     2335, 2332, 2342, 2398, 2400, 2402, 2404, 2354, 2368, 2370,

     3723, 2355, 2363, 2371, 2357, 2357, 2360, 2368, 2367, 2417,
     2419, 2373, 2383, 2375, 2411, 2412, 2415, 2416, 2420, 2421,
     2424, 2425, 2441, 2430, 2433, 2449, 2438, 2456, 2460, 2476,
     2458, 2405, 2409, 2415, 2482, 2484, 2486, 2489, 2492, 2412,
     2419, 2425, 2434, 2439, 2446, 2456, 2450, 2499, 2450, 3723,
     2466, 2469, 2468, 2508, 2467, 2465, 3723, 2473, 2466, 2515,
     3723, 2479, 3723, 2505, 2506, 2524, 2513, 2514, 2517, 2518,
     2521, 2549, 2540, 2529, 2530, 2559, 2566, 2575, 2565, 2585,
     2546, 2470, 2591, 2496, 2551, 2593, 2569, 2595, 2505, 2510,
     2601, 2538, 2534, 2609, 2549, 2611, 3723, 3723, 2545, 2585,

     2613, 2617, 2556, 2553, 3723, 3723, 3723, 2619, 2608, 2629,
     2635, 2612, 2624, 2625, 2636, 2640, 2645, 2639, 2656, 2662,
     2681, 2687, 2690, 2697, 2713, 2664, 2706, 2672, 2708, 2683,
     2566, 2568, 2719, 2724, 2729, 2731, 2735, 2737, 2739, 2741,
     2747, 2588, 2589, 2751, 2611, 2613, 2757, 2760, 2763, 2766,
     2702, 2740, 2784, 2767, 2773, 2774, 2790, 2793, 2801, 2809,
     2825, 2831, 2665, 2669, 2768, 2817, 2819, 2841, 2847, 2628,
     2849, 2851, 2853, 2857, 2859, 2861, 2865, 2869, 2871, 2875,
     2630, 2650, 2661, 3723, 2877, 2880, 2885, 2874, 2798, 2896,
     2903, 2893, 2899, 2919, 2924, 2935, 2696, 2696, 3723, 3723,

     2882, 2926, 2691, 2930, 2941, 2943, 2946, 2951, 2953, 2673,
     2698, 2689, 2955, 2944, 2947, 2963, 2952, 2956, 2972, 2979,
     3723, 3723, 2695, 2974, 2981, 2983, 2716, 2708, 2730, 2975,
     2984, 2820, 2987, 3003, 2739, 3006, 2743, 2746, 2746, 2995,
     2996, 2999, 3000, 2753, 2773, 2777, 2784, 3004, 3007, 3012,
     3013, 2788, 3029, 3031, 2792, 3020, 3023, 3024, 3028, 2802,
     3050, 3047, 3052, 3060, 3723, 3051, 3055, 3058, 3059, 3076,
     3079, 3083, 3072, 3075, 3092, 3100, 3095, 3098, 3089, 3116,
     3119, 3122, 3138, 3143, 3124, 3146, 3149, 3154, 3165, 3170,
     3173, 3176, 3181, 3192, 3723, 3209, 3215, 3221, 3227, 3233,

     3239, 3245, 3251, 3256, 3262, 3267, 3273, 3279
    } ;

static yyconst flex_int16_t yy_def[1909] =
    {   0,
     1896, 1896, 1897, 1897, 1898, 1898, 1899, 1899, 1900, 1900,
     1900, 1900, 1901, 1901, 1902, 1902, 1903, 1903, 1895, 1895,
     1904, 1895, 1904, 1895, 1904, 1904, 1904, 1904, 1895, 1895,
     1904, 1904, 1905, 1895, 1906, 1907, 1908, 1895, 1895, 1895,
     1895, 1895, 1895, 1904, 1904, 1904, 1904, 1904, 1904,   29,
     1895, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1895, 1904, 1904, 1904, 1895, 1904, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1904, 1904, 1905, 1906, 1907, 1908, 1895, 1895, 1904,

     1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1904, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1904,
     1895, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1904, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,

     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1904, 1904, 1904, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,

     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1904, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,

     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1904, 1904, 1904, 1904, 1904,

     1895, 1895, 1904, 1904, 1904, 1904, 1895, 1895, 1904, 1895,
     1895, 1904, 1904, 1904, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,

     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1904, 1904, 1895, 1895, 1904,
     1904, 1904, 1904, 1895, 1895, 1895, 1895, 1904, 1895, 1895,
     1904, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,

     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1904, 1904,
     1904, 1904, 1904, 1895, 1895, 1904, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,

     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1904, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1904, 1904, 1904, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,

     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1904, 1895, 1895, 1904,
     1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,

     1904, 1904, 1904, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,

     1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1904, 1904, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1904,

     1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,

     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1904, 1895, 1895, 1904, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,
     1904, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,

     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1904, 1904,
     1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1904, 1904, 1904, 1904, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,

     1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1904, 1904, 1904, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,

     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1904, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1904, 1904, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,

     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1904, 1904, 1904,
     1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1904, 1904, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1904, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1904, 1904, 1904, 1895, 1895, 1895, 1895,

     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1904,
     1904, 1904, 1904, 1904, 1895, 1895, 1895, 1895, 1895, 1904,
     1904, 1904, 1904, 1895, 1895, 1895, 1895, 1904, 1904, 1904,
     1904, 1895, 1895, 1895, 1895, 1904, 1904, 1904, 1904, 1895,
     1895, 1895, 1895, 1895, 1895, 1904, 1904, 1904, 1904, 1895,
     1895, 1895, 1904, 1904, 1904, 1904, 1895, 1895, 1904, 1904,
     1904, 1904, 1904, 1904, 1895, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1904,    0, 1895, 1895, 1895, 1895, 1895,

     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895
    } ;

static yyconst flex_int16_t yy_nxt[3786] =
    {   0,
       20,   21,   21,   20,   22,   42,   24,   42,   25,   26,
       27,   28,   28,   28,   29,   39,   30,   20, 1895,   39,
       43,   40,   43, 1895,   31,   40,   91,   91,   32,   20,
       21,   21,   20,   22, 1895,   24, 1895,   25,   26,   27,
       28,   28,   28,   29,  140,   30,   20,   47,  192,   49,
       49,   49, 1895,   31, 1895,   91,   91,   32,   44,   44,
      141, 1895,   52,   68,  193,   46,   47,   48,   49,   49,
       49,   50, 1895,   51, 1895,   91,   91,   65,   65,  167,
     1895,   52, 1895,  449,  168,   53,   92,   66,   66,   66,
     1895, 1895, 1895, 1895, 1895,   54,   55,   67, 1895,  450,

       68,   56,   93,  232,  138,   57,   58, 1895, 1895, 1895,
      139,   59,   60,   61,   62,   63,   67,   69,   69,   47,
      233,   49,   49,   49, 1895,   47, 1895,   49,   49,   49,
     1895, 1895, 1895, 1895,   52,   65,   65,   67, 1895, 1895,
     1895, 1895, 1895,  953, 1895,   66,   66,   66, 1895,  104,
     1895,  954,   92,   93,  325,   67,   67,   70, 1895,  134,
     1895,  100,  326,  165,   71, 1895,  327, 1895,  101,  166,
      955,   72,   65,   65,   67, 1895,  135, 1895,  136,  142,
     1895,  143, 1895,  190, 1895, 1895, 1895, 1895,  107,  191,
       73,   74,   75,   76,   77,   78,   79,  105,   80,   81,

      110,   82,   83,   84,   85,  102,  108,   86,   87,   88,
       89,   90,   44,   44, 1895,  103, 1895,  106,  254,   46,
       47,   48,   49,   49,   49,   50, 1895,   51, 1895, 1895,
      109, 1895,  255,   65,   65,   52,  111,  170, 1895,   53,
     1895,   69,   69,   66,   66,   66, 1895,  146, 1895,   54,
       55,  958,  112,   67, 1895,   56, 1895,  147,  217,   57,
       58,  959,  148,  149,  218,   59,   60,   61,   62,   63,
       69,   69,   67,  960, 1895, 1895, 1895, 1895,   47,  172,
       49,   49,   49, 1895,  154, 1895,  311,  113,  113,  170,
       67,  114,  114,  114, 1895, 1895, 1895, 1895,  155,  219,

      312,  156,  157, 1895,  220, 1895, 1895,  176, 1895,   67,
      116,  117,  118,  119,  120,  121,  122,  251,  123,  124,
      223,  125,  126,  127,  128,  224,  252,  129,  130,  131,
      132,  133,  159,  225,  160,  173, 1895, 1895, 1895, 1895,
      177, 1895,  308, 1895,  161, 1895,  261, 1895,  174,  162,
      163,  309,  262, 1895,  164, 1895, 1895,  186, 1895, 1895,
      175, 1895,  194, 1895,  195, 1895,  289,  114,  114,  114,
     1895,  178, 1895,  318,  187, 1895,  188, 1895,  961,  319,
     1895,  198, 1895,  290,  180,  206,  182, 1895,  179, 1895,
      181,  199,  183,  184,   65,   65,  200,  201,  211,  207,

      212,  263,  208,  209,  114,  114,  114, 1895,  272, 1895,
      213,   65,   65,  351,  352,  214,  215, 1895,  964, 1895,
      216,  265,  265, 1895, 1895, 1895, 1895, 1895,  268, 1895,
     1895, 1895, 1895, 1895, 1895,  266, 1895, 1895, 1895, 1895,
     1895,  264, 1895, 1895, 1895, 1895,  278,  339,  339,  287,
      287,  279,  355,  269,  270,  365,  271,  359,  356,  280,
      965,  360,  267,  273,  288, 1895, 1895, 1895, 1895,  729,
      340,  276,  265,  265,  730,  366,  369,  369, 1895,  274,
     1895,  370,  370,  522,  275, 1895,  266, 1895, 1895, 1895,
     1895, 1895,  966,  367, 1895,  371, 1895,  372,  372,  523,

      374,  374,  969,  377,  376,  368, 1895, 1895, 1895, 1895,
     1895,  373, 1895, 1895,  375, 1895,  379,  379,  399,  399,
      381,  381, 1895,  970, 1895,  393,  393,  287,  287, 1895,
      380, 1895,  378, 1895,  382, 1895,  384,  390,  404,  404,
      394,  972,  288,  409,  409,  391,  415,  415,  383,  392,
      424,  425,  432,  405,  428, 1895,  433, 1895,  410,  973,
      429,  416,  461,  461,  438,  438,  411,  339,  339,  472,
      472,  462,  974,  467,  467,  490,  491,  463,  395,  439,
      369,  369,  468,  492,  473,  417,  615,  440,  469,  789,
     1895,  496, 1895, 1895,  790, 1895,  370,  370,  687,  498,

      498,  616,  372,  372, 1895,  975, 1895,  441,  976, 1895,
      371, 1895, 1895,  688, 1895, 1895,  373, 1895,  499,  499,
      497,  374,  374,  977,  500,  500, 1895,  501, 1895,  502,
     1895, 1895, 1895, 1895, 1895,  375, 1895, 1895, 1895, 1895,
     1895,  379,  379,  503,  506,  506, 1895,  507, 1895,  508,
      381,  381,  978,  504, 1895,  380, 1895, 1895,  859, 1895,
      512,  512,  860, 1895,  382, 1895,  979,  509,  509,  753,
      510,  505,  511, 1895,  513, 1895,  393,  393,  980,  514,
     1895,  981, 1895,  524,  524,  399,  399,  404,  404,  533,
      533,  394,  536,  536,  409,  409,  538,  538,  542,  542,

      415,  415,  405,  544,  544,  547,  547,  537,  967,  410,
      561,  561, 1895,  543, 1895,  416,  567,  568,  438,  438,
      548,  571,  571,  982,  569,  562,  983,  461,  461,  984,
      593,  593,  968,  439,  598,  598,  462,  467,  467,  472,
      472,  563,  463,  594,  602,  603,  468,  599, 1895,  985,
     1895,  626,  469,  822,  473,  498,  498,  986,  499,  499,
      823,  500,  500, 1895,  501, 1895,  502, 1895, 1895, 1895,
     1895, 1895, 1004, 1895, 1895, 1895, 1895, 1895,  630,  631,
      631, 1005,  633,  506,  506,  627,  507,  931,  508,  524,
      524,  932, 1895,  632, 1895, 1895, 1895, 1895, 1895,  509,

      509,  641,  510,  888,  511,  512,  512, 1008,  638,  638,
      889,  639, 1895,  640, 1895,  649,  649, 1009, 1895,  513,
     1895, 1895,  751, 1895,  533,  533,  536,  536,  662,  662,
      650,  538,  538,  663,  663,  542,  542,  667,  667,  544,
      544,  537,  547,  547,  670,  670,  671,  671,  664, 1010,
      543,  561,  561,  686,  686,  571,  571,  548,  715,  715,
     1011,  672,  593,  593,  719,  719,  562,  598,  598,  731,
      731,  737,  737,  631,  631,  594,  673,  674,  732, 1895,
      599, 1895, 1012, 1895,  733, 1895, 1895,  632, 1895,  752,
      752, 1013,  638,  638,  738,  639, 1895,  640, 1895,  649,

      649, 1895, 1895, 1895, 1895, 1895, 1014, 1895,  764,  764,
     1015,  775,  775, 1016,  650,  662,  662,  663,  663,  777,
      777,  756,  667,  667,  750,  749,  776,  670,  670,  671,
      671,  867,  664,  782,  782,  791,  791,  793,  793,  798,
      798,  686,  686, 1018,  672,  809,  809, 1019,  812,  812,
      792, 1895,  794, 1895,  799,  828,  828,  715,  715, 1021,
      810, 1022,  800,  813,  832,  832,  719,  719,  842,  842,
     1025,  849,  849,  833,  731,  731,  811,  737,  737,  834,
      764,  764,  875,  732,  850, 1895,  829, 1895, 1026,  733,
      865,  865, 1895, 1027, 1895,  843, 1895,  868, 1895,  869,

      876,  844,  870, 1895,  866, 1895, 1030,  871,  752,  752,
      872,  873, 1031,  874,  879,  879,  881,  881,  892,  892,
     1895, 1895, 1895, 1895,  896,  896,  775,  775, 1895,  880,
     1895,  882,  990,  893,  900,  900,  777,  777, 1895,  897,
     1895,  776,  901,  901,  903,  903,  782,  782,  911,  911,
      791,  791,  918,  918, 1033,  898,  991,  902, 1000,  904,
     1001,  793,  793,  912, 1038,  792,  919,  919,  798,  798,
      923,  923,  929,  929, 1034,  913,  794,  809,  809,  935,
      935,  914, 1039,  799,  812,  812, 1040,  930,  937,  937,
      828,  828,  810,  832,  832, 1041,  956,  956, 1035,  813,

      962,  963,  833,  842,  842,  971,  971, 1042,  834,  957,
      849,  849,  865,  865, 1043,  987,  987, 1895,  988, 1895,
      989, 1044, 1895,  850, 1895, 1895,  866, 1895, 1895, 1045,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1046,
      879,  879, 1006, 1006, 1047,  881,  881,  994, 1007, 1007,
      992, 1049,  993, 1050,  996,  880,  892,  892, 1051, 1003,
      882, 1002, 1052,  995, 1017, 1017,  896,  896,  998, 1020,
     1020,  893,  997, 1053,  999,  900,  900,  901,  901, 1023,
     1023,  897,  903,  903, 1024, 1024, 1028, 1029,  911,  911,
     1032, 1032,  902, 1036, 1036,  918,  918,  904,  919,  919,

      923,  923, 1054,  912,  929,  929, 1048, 1048, 1037,  935,
      935,  937,  937, 1055, 1056, 1057, 1058, 1060, 1061,  930,
     1062, 1063, 1064, 1059, 1065, 1066, 1067, 1068, 1069, 1070,
     1071, 1072, 1072,  956,  956, 1073, 1074, 1075, 1076, 1077,
     1078, 1079, 1080, 1081, 1082, 1083,  957, 1084, 1085, 1086,
      971,  971, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
     1095, 1096, 1097, 1098,  987,  987, 1099,  988, 1100,  989,
     1895, 1895, 1895, 1895, 1103, 1103, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1116, 1895, 1895, 1104, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,

     1895, 1895, 1895, 1117, 1895, 1101, 1102, 1107, 1006, 1006,
     1007, 1007, 1118, 1119, 1123, 1108, 1124, 1111, 1105, 1109,
     1120, 1121, 1121, 1114, 1110, 1106, 1125, 1126, 1127, 1112,
     1128, 1129, 1130, 1115, 1017, 1017, 1122, 1113, 1131, 1020,
     1020, 1132, 1133, 1023, 1023, 1024, 1024, 1134, 1135, 1136,
     1137, 1138, 1139, 1140, 1032, 1032, 1141, 1142, 1143, 1036,
     1036, 1144, 1144, 1145, 1146, 1147, 1148, 1148, 1150, 1151,
     1152, 1153, 1153, 1155, 1037, 1156, 1048, 1048, 1157, 1158,
     1159, 1149, 1160, 1161, 1162, 1162, 1154, 1164, 1165, 1166,
     1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1163,

     1176, 1177, 1178, 1072, 1072, 1179, 1180, 1181, 1182, 1183,
     1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193,
     1194, 1195, 1196, 1197, 1198, 1199, 1200, 1200, 1224, 1202,
     1202, 1227, 1103, 1103, 1228, 1205, 1205, 1229, 1231, 1895,
     1201, 1895, 1895, 1203, 1895, 1895, 1104, 1895, 1895, 1895,
     1895, 1895, 1207, 1207, 1895, 1232, 1895, 1210, 1210, 1895,
     1895, 1895, 1895, 1230, 1230, 1895, 1208, 1895, 1233, 1234,
     1895, 1211, 1895, 1895, 1895, 1895, 1895, 1235, 1218, 1218,
     1225, 1225, 1204, 1206, 1895, 1213, 1895, 1236, 1209, 1121,
     1121, 1895, 1219, 1895, 1239, 1226, 1212, 1895, 1240, 1895,

     1217, 1220, 1214, 1215, 1122, 1237, 1237, 1241, 1242, 1243,
     1243, 1245, 1246, 1216, 1247, 1248, 1249, 1250, 1251, 1254,
     1238, 1221, 1255, 1223, 1244, 1222, 1252, 1252, 1144, 1144,
     1256, 1257, 1257, 1148, 1148, 1259, 1259, 1260, 1260, 1262,
     1263, 1253, 1153, 1153, 1264, 1264, 1258, 1265, 1149, 1266,
     1267, 1268, 1261, 1269, 1270, 1270, 1272, 1154, 1162, 1162,
     1273, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1271,
     1281, 1281, 1287, 1163, 1284, 1284, 1288, 1289, 1289, 1282,
     1291, 1292, 1292, 1285, 1294, 1283, 1295, 1296, 1297, 1286,
     1298, 1299, 1290, 1300, 1301, 1302, 1293, 1303, 1304, 1305,

     1306, 1307, 1308, 1309, 1310, 1311, 1200, 1200, 1332, 1312,
     1312, 1895, 1313, 1895, 1314, 1202, 1202, 1333, 1333, 1895,
     1201, 1895, 1895, 1334, 1895, 1315, 1315, 1335, 1895, 1203,
     1895, 1205, 1205, 1895, 1336, 1895, 1207, 1207, 1895, 1337,
     1895, 1318, 1318, 1895, 1895, 1895, 1895, 1210, 1210, 1895,
     1208, 1895, 1316, 1895, 1895, 1895, 1895, 1320, 1320, 1317,
     1895, 1211, 1895, 1895, 1895, 1895, 1895, 1895, 1342, 1895,
     1895, 1895, 1895, 1895, 1895, 1343, 1895, 1321, 1895, 1351,
     1895, 1218, 1218, 1319, 1327, 1327, 1895, 1895, 1895, 1895,
     1352, 1225, 1225, 1324, 1895, 1219, 1895, 1895, 1895, 1895,

     1895, 1354, 1322, 1328, 1355, 1323, 1226, 1356, 1329, 1230,
     1230, 1357, 1325, 1358, 1326, 1338, 1338, 1330, 1340, 1340,
     1344, 1344, 1331, 1237, 1237, 1346, 1346, 1347, 1347, 1359,
     1339, 1349, 1349, 1341, 1363, 1345, 1243, 1243, 1238, 1353,
     1353, 1364, 1348, 1360, 1360, 1365, 1350, 1252, 1252, 1362,
     1362, 1244, 1257, 1257, 1366, 1366, 1259, 1259, 1361, 1260,
     1260, 1368, 1253, 1367, 1367, 1369, 1370, 1258, 1264, 1264,
     1371, 1372, 1373, 1374, 1261, 1270, 1270, 1375, 1375, 1376,
     1273, 1273, 1377, 1378, 1380, 1381, 1382, 1379, 1383, 1384,
     1271, 1281, 1281, 1387, 1385, 1385, 1284, 1284, 1390, 1392,

     1282, 1388, 1388, 1289, 1289, 1285, 1283, 1386, 1391, 1391,
     1394, 1286, 1292, 1292, 1389, 1393, 1393, 1395, 1290, 1396,
     1397, 1398, 1399, 1400, 1401, 1402, 1403, 1293, 1404, 1405,
     1406, 1312, 1312, 1407, 1313, 1408, 1314, 1315, 1315, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1318, 1318, 1895,
     1895, 1895, 1895, 1411, 1411, 1428, 1320, 1320, 1431, 1895,
     1895, 1895, 1895, 1895, 1414, 1895, 1895, 1412, 1895, 1895,
     1895, 1895, 1895, 1895, 1415, 1895, 1416, 1417, 1409, 1410,
     1418, 1422, 1422, 1432, 1413, 1327, 1327, 1895, 1420, 1895,
     1333, 1333, 1421, 1419, 1895, 1423, 1895, 1895, 1895, 1895,

     1895, 1895, 1429, 1895, 1433, 1436, 1430, 1338, 1338, 1442,
     1425, 1434, 1434, 1340, 1340, 1435, 1435, 1450, 1424, 1437,
     1437, 1451, 1339, 1344, 1344, 1439, 1439, 1454, 1341, 1346,
     1346, 1347, 1347, 1456, 1438, 1440, 1440, 1457, 1345, 1460,
     1426, 1461, 1427, 1349, 1349, 1462, 1348, 1441, 1441, 1443,
     1443, 1353, 1353, 1445, 1445, 1448, 1448, 1463, 1350, 1452,
     1452, 1360, 1360, 1464, 1444, 1455, 1455, 1467, 1446, 1470,
     1449, 1362, 1362, 1471, 1453, 1472, 1361, 1458, 1458, 1366,
     1366, 1367, 1367, 1473, 1447, 1465, 1465, 1375, 1375, 1468,
     1468, 1474, 1459, 1475, 1476, 1477, 1477, 1385, 1385, 1478,

     1466, 1479, 1479, 1480, 1469, 1388, 1388, 1391, 1391, 1481,
     1386, 1393, 1393, 1482, 1483, 1484, 1485, 1486, 1389, 1487,
     1488, 1489, 1490, 1491, 1895, 1895, 1895, 1895, 1411, 1411,
     1895, 1895, 1895, 1895, 1510, 1494, 1494, 1895, 1895, 1895,
     1895, 1895, 1412, 1895, 1511, 1512, 1492, 1493, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1495, 1497, 1513, 1498, 1422, 1422, 1514, 1496, 1504, 1504,
     1895, 1502, 1895, 1515, 1500, 1434, 1434, 1895, 1423, 1895,
     1895, 1895, 1895, 1895, 1516, 1499, 1505, 1505, 1895, 1501,
     1895, 1435, 1435, 1437, 1437, 1517, 1517, 1522, 1503, 1895,

     1506, 1895, 1524, 1507, 1439, 1439, 1508, 1525, 1438, 1440,
     1440, 1441, 1441, 1518, 1518, 1443, 1443, 1527, 1509, 1520,
     1520, 1445, 1445, 1521, 1521, 1448, 1448, 1528, 1519, 1532,
     1444, 1523, 1523, 1452, 1452, 1533, 1446, 1526, 1526, 1534,
     1449, 1455, 1455, 1529, 1529, 1458, 1458, 1535, 1453, 1531,
     1531, 1536, 1536, 1465, 1465, 1538, 1538, 1542, 1530, 1543,
     1459, 1539, 1539, 1468, 1468, 1544, 1537, 1545, 1466, 1541,
     1541, 1546, 1547, 1548, 1477, 1477, 1540, 1549, 1469, 1479,
     1479, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
     1559, 1560, 1895, 1895, 1895, 1895, 1494, 1494, 1895, 1577,

     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1561, 1895, 1578, 1504, 1504, 1579, 1574, 1505,
     1505, 1580, 1575, 1565, 1562, 1895, 1564, 1895, 1895, 1567,
     1895, 1563, 1895, 1506, 1895, 1566, 1581, 1573, 1569, 1568,
     1572, 1572, 1582, 1583, 1517, 1517, 1570, 1518, 1518, 1571,
     1584, 1584, 1585, 1895, 1586, 1895, 1520, 1520, 1521, 1521,
     1523, 1523, 1519, 1587, 1526, 1526, 1588, 1589, 1576, 1529,
     1529, 1590, 1590, 1531, 1531, 1591, 1592, 1593, 1594, 1594,
     1536, 1536, 1596, 1596, 1530, 1538, 1538, 1539, 1539, 1597,

     1597, 1541, 1541, 1595, 1598, 1537, 1599, 1600, 1601, 1602,
     1603, 1604, 1540, 1605, 1606, 1607, 1608, 1609, 1610, 1610,
     1612, 1613, 1614, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1632, 1633, 1611, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1634, 1895, 1572,
     1572, 1630, 1630, 1617, 1616, 1895, 1637, 1895, 1615, 1895,
     1619, 1895, 1895, 1895, 1895, 1895, 1631, 1640, 1618, 1622,
     1895, 1641, 1895, 1642, 1635, 1635, 1643, 1620, 1638, 1638,
     1621, 1628, 1623, 1644, 1624, 1645, 1625, 1646, 1627, 1636,
     1584, 1584, 1647, 1639, 1649, 1626, 1629, 1590, 1590, 1594,

     1594, 1648, 1648, 1596, 1596, 1597, 1597, 1650, 1651, 1652,
     1653, 1654, 1655, 1656, 1595, 1657, 1658, 1659, 1610, 1610,
     1660, 1660, 1661, 1662, 1663, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1611, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1672, 1672, 1895, 1682, 1895, 1895, 1683, 1895,
     1676, 1676, 1895, 1684, 1895, 1895, 1673, 1895, 1668, 1681,
     1681, 1671, 1665, 1895, 1677, 1895, 1664, 1689, 1669, 1666,
     1895, 1667, 1895, 1675, 1895, 1690, 1895, 1630, 1630, 1670,
     1691, 1674, 1692, 1635, 1635, 1685, 1685, 1686, 1686, 1693,
     1638, 1638, 1631, 1688, 1688, 1694, 1695, 1678, 1636, 1696,

     1648, 1648, 1687, 1697, 1679, 1639, 1698, 1699, 1700, 1701,
     1701, 1703, 1704, 1705, 1680, 1706, 1660, 1660, 1707, 1895,
     1895, 1895, 1895, 1726, 1702, 1710, 1710, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1729, 1895, 1895, 1711,
     1895, 1717, 1717, 1895, 1895, 1895, 1895, 1681, 1681, 1731,
     1672, 1672, 1685, 1685, 1895, 1709, 1895, 1732, 1716, 1708,
     1676, 1676, 1715, 1895, 1673, 1895, 1712, 1720, 1720, 1713,
     1730, 1730, 1714, 1895, 1677, 1895, 1721, 1721, 1735, 1895,
     1895, 1895, 1895, 1736, 1719, 1718, 1724, 1724, 1739, 1895,
     1722, 1895, 1727, 1727, 1686, 1686, 1688, 1688, 1742, 1895,

     1725, 1895, 1733, 1733, 1743, 1723, 1745, 1728, 1746, 1687,
     1737, 1737, 1740, 1740, 1701, 1701, 1770, 1734, 1744, 1744,
     1747, 1747, 1895, 1771, 1895, 1738, 1895, 1741, 1895, 1702,
     1710, 1710, 1781, 1895, 1748, 1895, 1750, 1750, 1895, 1895,
     1895, 1895, 1782, 1895, 1711, 1895, 1717, 1717, 1751, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1757, 1757, 1895,
     1783, 1895, 1749, 1720, 1720, 1765, 1765, 1784, 1752, 1799,
     1895, 1758, 1895, 1767, 1767, 1800, 1895, 1803, 1895, 1753,
     1766, 1810, 1721, 1721, 1730, 1730, 1754, 1755, 1759, 1759,
     1811, 1760, 1760, 1812, 1756, 1895, 1722, 1895, 1724, 1724,

     1821, 1895, 1822, 1895, 1895, 1761, 1895, 1727, 1727, 1768,
     1768, 1895, 1725, 1895, 1762, 1762, 1895, 1763, 1895, 1764,
     1733, 1733, 1728, 1823, 1769, 1772, 1772, 1895, 1827, 1895,
     1773, 1773, 1775, 1775, 1828, 1734, 1737, 1737, 1777, 1777,
     1778, 1778, 1740, 1740, 1829, 1774, 1788, 1776, 1780, 1780,
     1835, 1738, 1744, 1744, 1895, 1779, 1895, 1741, 1747, 1747,
     1837, 1785, 1785, 1838, 1786, 1786, 1839, 1750, 1750, 1765,
     1765, 1895, 1748, 1895, 1895, 1844, 1895, 1895, 1787, 1895,
     1895, 1895, 1895, 1895, 1766, 1790, 1790, 1895, 1895, 1895,
     1895, 1757, 1757, 1845, 1795, 1795, 1846, 1789, 1895, 1791,

     1895, 1847, 1759, 1759, 1895, 1758, 1895, 1895, 1852, 1895,
     1760, 1760, 1895, 1793, 1895, 1895, 1792, 1895, 1801, 1801,
     1767, 1767, 1853, 1895, 1761, 1895, 1796, 1796, 1794, 1797,
     1854, 1798, 1762, 1762, 1895, 1763, 1895, 1764, 1815, 1895,
     1855, 1895, 1768, 1768, 1860, 1895, 1865, 1895, 1802, 1802,
     1804, 1804, 1772, 1772, 1773, 1773, 1870, 1769, 1807, 1807,
     1775, 1775, 1808, 1808,  952, 1805, 1777, 1777,  951, 1774,
     1778, 1778, 1809, 1809, 1842, 1776, 1780, 1780, 1785, 1785,
      950, 1786, 1786, 1801, 1801, 1779, 1813, 1813, 1895,  949,
     1895, 1895,  948, 1895, 1895, 1787, 1895, 1790, 1790, 1895,

      947, 1895,  946, 1806, 1816, 1816,  945, 1895,  944, 1895,
     1895, 1791, 1895, 1895,  943, 1895,  942, 1895,  941, 1895,
     1819, 1819,  940, 1814, 1817, 1795, 1795, 1802, 1802,  939,
     1818, 1804, 1804, 1895, 1820, 1895, 1796, 1796, 1895, 1797,
     1895, 1798, 1824, 1824, 1825, 1825, 1805, 1807, 1807, 1895,
      938, 1895, 1808, 1808, 1809, 1809, 1813, 1813, 1895, 1826,
     1895, 1895,  936, 1895, 1816, 1816, 1895,  934, 1895, 1895,
     1895, 1895, 1895, 1819, 1819, 1824, 1824, 1895, 1831, 1895,
     1834, 1834, 1825, 1825, 1836, 1836, 1895, 1820, 1895, 1895,
      933, 1895, 1832, 1895,  928, 1895, 1833, 1826, 1895, 1830,

     1895, 1895,  927, 1895, 1834, 1834, 1840, 1836, 1836, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895,  926, 1895, 1841,  925, 1895, 1895, 1895, 1895,
     1861, 1861, 1863, 1863, 1895, 1848, 1895, 1895, 1895, 1895,
     1895, 1843, 1895,  924, 1895, 1862,  922, 1864, 1871, 1871,
     1849, 1861, 1861, 1863, 1863, 1850, 1851,  921, 1856, 1858,
     1859, 1872, 1872, 1857,  920, 1895, 1862, 1895, 1864, 1895,
     1867, 1895, 1895, 1895, 1895, 1895, 1866, 1877, 1877, 1868,
     1871, 1871,  917, 1869, 1872, 1872, 1895,  916, 1895, 1895,
      915, 1895, 1878, 1881, 1881,  910, 1877, 1877, 1873, 1885,

     1885, 1883, 1883, 1895,  909, 1895, 1895, 1882, 1895,  908,
     1874, 1878, 1875, 1876, 1895, 1884, 1895, 1887, 1887,  907,
     1881, 1881,  906, 1889, 1889, 1885, 1885, 1879,  905, 1880,
     1895, 1888, 1895, 1895, 1882, 1895, 1895,  899, 1895, 1883,
     1883,  895,  894, 1886, 1890, 1890,  891, 1891, 1891,  890,
     1887, 1887, 1895, 1884, 1895, 1893, 1893, 1895,  887, 1895,
     1895, 1892, 1895, 1895, 1888, 1895, 1889, 1889, 1895,  886,
     1895, 1890, 1890,  885, 1891, 1891,  884, 1894, 1894, 1895,
      883, 1895, 1893, 1893, 1895,  878, 1895, 1895, 1892, 1895,
     1895,  877, 1895, 1894, 1894, 1895,  864, 1895,  863,  862,

      861,  858,  857,  856,  855,  854, 1895,  853, 1895,   23,
       23,   23,   23,   23,   23,   33,   33,   33,   33,   33,
       33,   35,   35,   35,   35,   35,   35,   36,   36,   36,
       36,   36,   36,   34,   34,   34,   34,   34,   34,   37,
       37,   37,   37,   37,   37,   38,   38,   38,   38,   38,
       38,   41,   41,   41,   41,   41,   41,   45,  852,  851,
       45,   45,   94,   94,   94,   94,   94,   95,   95,  848,
       95,   95,   95,   96,   96,   96,  847,   96,   96,   97,
       97,   97,   97,  846,   97,  845,  841,  840,  839,  838,
      837,  836,  835,  831,  830,  827,  826,  825,  824,  821,

      820,  819,  818,  817,  816,  815,  814,  808,  807,  806,
      805,  804,  803,  802,  801,  797,  796,  795,  788,  787,
      786,  785,  784,  783,  781,  780,  779,  778,  774,  773,
      772,  771,  770,  769,  768,  767,  766,  765,  763,  762,
      761,  760,  759,  758,  757,  755,  754,  748,  747,  746,
      745,  744,  743,  742,  741,  740,  739,  736,  735,  734,
      728,  727,  726,  725,  724,  723,  722,  721,  720,  718,
      717,  716,  714,  713,  712,  711,  710,  709,  708,  707,
      706,  705,  704,  703,  702,  701,  700,  699,  698,  697,
      696,  695,  694,  693,  692,  691,  690,  689,  685,  684,

      683,  682,  681,  680,  679,  678,  677,  676,  675,  669,
      668,  666,  665,  661,  660,  659,  658,  657,  656,  655,
      654,  653,  652,  651,  648,  647,  646,  645,  644,  643,
      642,  637,  636,  635,  634,  629,  628,  625,  624,  623,
      622,  621,  620,  619,  618,  617,  614,  613,  612,  611,
      610,  609,  608,  607,  606,  605,  604,  601,  600,  597,
      596,  595,  592,  591,  590,  589,  588,  587,  586,  585,
      584,  583,  582,  581,  580,  579,  578,  577,  576,  575,
      574,  573,  572,  570,  566,  565,  564,  560,  559,  558,
      557,  556,  555,  554,  553,  552,  551,  550,  549,  546,

      545,  541,  540,  539,  535,  534,  532,  531,  530,  529,
      528,  527,  526,  525,  521,  520,  519,  518,  517,  516,
      515,  495,  494,  493,  489,  488,  487,  486,  485,  484,
      483,  482,  481,  480,  479,  478,  477,  476,  475,  474,
      471,  470,  466,  465,  464,  460,  459,  458,  457,  456,
      455,  454,  453,  452,  451,  448,  447,  446,  445,  444,
      443,  442,  437,  436,  435,  434,  431,  430,  427,  426,
      423,  422,  421,  420,  419,  418,  414,  413,  412,  408,
      407,  406,  403,  402,  401,  400,  398,  397,  396,  389,
      388,  387,  386,  385,  364,  363,  362,  361,  358,  357,

      354,  353,  350,  349,  348,  347,  346,  345,  344,  343,
      342,  341,  338,  337,  336,  335,  334,  333,  332,  331,
      330,  329,  328,  324,  323,  322,  321,  320,  317,  316,
      315,  314,  313,  310,  307,  306,  305,  304,  303,  302,
      301,  300,  299,  298,  297,  296,  295,  294,  293,  292,
      291,  286,  285,  284,  283,  282,  281,  277,  260,  259,
      258,  257,  256,  253,  250,  249,  248,  247,  246,  245,
      244,  243,  242,  241,  240,  239,  238,  237,  236,  235,
      234,  231,  230,  229,  228,  227,  226,  222,  221,  210,
      205,  204,  203,  202,  197,  196,  189,  185,  171,  169,

      158,  153,  152,  151,  150,  145,  144,  137,  115,   99,
       98,   64,   64, 1895,   34,   34,   34,   34,   34,   34,
       34,   34,   19, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895
    } ;

static yyconst flex_int16_t yy_chk[3786] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,    0,   16,
       17,   15,   18,    0,    1,   16,   30,   30,    1,    2,
        2,    2,    2,    2,   23,    2,   23,    2,    2,    2,
        2,    2,    2,    2,   76,    2,    2,   25,  119,   25,
       25,   25,   25,    2,   25,   51,   51,    2,   21,   21,
       76,   27,   25,   27,  119,   21,   21,   21,   21,   21,
       21,   21,   31,   21,   31,   91,   91,   26,   26,   89,
       32,   21,   32,  327,   89,   21,   31,   26,   26,   26,
       26,   45,   26,   45,   50,   21,   21,   26,   48,  327,

       48,   21,   32,  143,   75,   21,   21,   57,   50,   57,
       75,   21,   21,   21,   21,   21,   26,   28,   28,   46,
      143,   46,   46,   46,   46,   28,   46,   28,   28,   28,
       28,   53,   28,   53,   46,   47,   47,   28,   52,   54,
       52,   54,   55,  830,   55,   47,   47,   47,   47,   57,
       47,  831,   52,   53,  227,   47,   28,   29,   59,   73,
       59,   54,  227,   88,   29,   61,  227,   61,   55,   88,
      833,   29,   65,   65,   47,   58,   73,   58,   73,   77,
       56,   77,   56,  118,   60,   65,   60,   65,   59,  118,
       29,   29,   29,   29,   29,   29,   29,   58,   29,   29,

       61,   29,   29,   29,   29,   56,   60,   29,   29,   29,
       29,   29,   44,   44,   62,   56,   62,   58,  163,   44,
       44,   44,   44,   44,   44,   44,   63,   44,   63,   92,
       60,   92,  163,   66,   66,   44,   62,   92,  100,   44,
      100,   69,   69,   66,   66,   66,   66,   80,   66,   44,
       44,  835,   63,   66,   69,   44,   69,   80,  131,   44,
       44,  836,   80,   80,  131,   44,   44,   44,   44,   44,
       49,   49,   66,  837,  104,   93,  104,   93,   49,  100,
       49,   49,   49,   49,   85,   49,  215,   67,   67,   93,
       49,   67,   67,   67,   67,  101,   67,  101,   85,  132,

      215,   85,   85,  102,  132,  102,  105,  104,  105,   49,
       71,   71,   71,   71,   71,   71,   71,  161,   71,   71,
      135,   71,   71,   71,   71,  135,  161,   71,   71,   71,
       71,   71,   87,  135,   87,  101,  103,  106,  103,  106,
      105,  107,  213,  107,   87,  108,  169,  108,  102,   87,
       87,  213,  169,  109,   87,  109,  110,  116,  110,  111,
      103,  111,  120,  112,  120,  112,  195,  113,  113,  113,
      113,  106,  113,  221,  116,  172,  116,  172,  838,  221,
      180,  123,  180,  195,  108,  128,  110,  176,  107,  176,
      109,  123,  111,  112,  114,  114,  123,  123,  130,  128,

      130,  172,  128,  128,  114,  114,  114,  114,  180,  114,
      130,  170,  170,  251,  251,  130,  130,  173,  840,  173,
      130,  174,  174,  175,  170,  175,  170,  177,  176,  177,
      179,  178,  179,  178,  174,  174,  174,  181,  182,  181,
      182,  173,  183,  184,  183,  184,  187,  240,  240,  194,
      194,  187,  254,  177,  178,  262,  179,  257,  254,  187,
      841,  257,  175,  181,  194,  263,  264,  263,  264,  608,
      240,  184,  265,  265,  608,  262,  266,  266,  270,  182,
      270,  267,  267,  392,  183,  265,  265,  265,  271,  266,
      271,  266,  843,  263,  267,  267,  267,  268,  268,  392,

      269,  269,  846,  271,  270,  264,  272,  276,  272,  276,
      268,  268,  268,  269,  269,  269,  273,  273,  288,  288,
      274,  274,  275,  847,  275,  283,  283,  287,  287,  273,
      273,  273,  272,  274,  274,  274,  276,  282,  293,  293,
      283,  850,  287,  297,  297,  282,  301,  301,  275,  282,
      308,  308,  314,  293,  311,  367,  314,  367,  297,  851,
      311,  301,  338,  338,  319,  319,  297,  339,  339,  346,
      346,  338,  852,  343,  343,  363,  363,  338,  283,  319,
      369,  369,  343,  363,  346,  301,  486,  319,  343,  679,
      368,  367,  368,  369,  679,  369,  370,  370,  563,  371,

      371,  486,  372,  372,  376,  853,  376,  319,  854,  370,
      370,  370,  371,  563,  371,  372,  372,  372,  373,  373,
      368,  374,  374,  855,  375,  375,  377,  375,  377,  375,
      378,  373,  378,  373,  374,  374,  374,  375,  384,  375,
      384,  379,  379,  376,  380,  380,  633,  380,  633,  380,
      381,  381,  856,  377,  379,  379,  379,  380,  744,  380,
      383,  383,  744,  381,  381,  381,  857,  382,  382,  633,
      382,  378,  382,  383,  383,  383,  393,  393,  858,  384,
      382,  859,  382,  394,  394,  399,  399,  404,  404,  405,
      405,  393,  408,  408,  409,  409,  410,  410,  414,  414,

      415,  415,  404,  416,  416,  419,  419,  408,  844,  409,
      432,  432,  496,  414,  496,  415,  436,  436,  438,  438,
      419,  439,  439,  860,  436,  432,  861,  461,  461,  862,
      463,  463,  844,  438,  469,  469,  461,  467,  467,  472,
      472,  432,  461,  463,  474,  474,  467,  469,  497,  863,
      497,  496,  467,  707,  472,  498,  498,  864,  499,  499,
      707,  500,  500,  503,  500,  503,  500,  505,  498,  505,
      498,  499,  877,  499,  500,  514,  500,  514,  503,  504,
      504,  878,  505,  506,  506,  497,  506,  806,  506,  524,
      524,  806,  504,  504,  504,  630,  506,  630,  506,  509,

      509,  514,  509,  767,  509,  512,  512,  883,  513,  513,
      767,  513,  509,  513,  509,  522,  522,  884,  512,  512,
      512,  513,  630,  513,  533,  533,  536,  536,  537,  537,
      522,  538,  538,  539,  539,  542,  542,  543,  543,  544,
      544,  536,  547,  547,  548,  548,  549,  549,  539,  885,
      542,  561,  561,  562,  562,  571,  571,  547,  592,  592,
      886,  549,  593,  593,  597,  597,  561,  598,  598,  609,
      609,  614,  614,  631,  631,  593,  549,  549,  609,  626,
      598,  626,  887,  627,  609,  627,  631,  631,  631,  632,
      632,  888,  638,  638,  614,  638,  641,  638,  641,  649,

      649,  750,  632,  750,  632,  638,  889,  638,  650,  650,
      890,  661,  661,  891,  649,  662,  662,  663,  663,  664,
      664,  641,  667,  667,  627,  626,  661,  670,  670,  671,
      671,  750,  663,  672,  672,  680,  680,  681,  681,  685,
      685,  686,  686,  894,  671,  695,  695,  895,  696,  696,
      680,  753,  681,  753,  685,  713,  713,  715,  715,  898,
      695,  899,  685,  696,  717,  717,  719,  719,  727,  727,
      905,  733,  733,  717,  731,  731,  695,  737,  737,  717,
      764,  764,  753,  731,  733,  756,  713,  756,  906,  731,
      749,  749,  751,  907,  751,  727,  867,  751,  867,  751,

      756,  727,  751,  749,  749,  749,  909,  751,  752,  752,
      751,  751,  910,  751,  759,  759,  760,  760,  770,  770,
      868,  752,  868,  752,  773,  773,  775,  775,  873,  759,
      873,  760,  867,  770,  776,  776,  777,  777,  874,  773,
      874,  775,  778,  778,  779,  779,  782,  782,  787,  787,
      791,  791,  792,  792,  913,  773,  868,  778,  873,  779,
      874,  793,  793,  787,  916,  791,  794,  794,  798,  798,
      799,  799,  805,  805,  914,  787,  793,  809,  809,  810,
      810,  787,  917,  798,  812,  812,  920,  805,  813,  813,
      828,  828,  809,  832,  832,  921,  834,  834,  914,  812,

      839,  839,  832,  842,  842,  848,  848,  922,  832,  834,
      849,  849,  865,  865,  924,  866,  866,  869,  866,  869,
      866,  925,  870,  849,  870,  865,  865,  865,  866,  926,
      866,  871,  872,  871,  872,  875,  876,  875,  876,  927,
      879,  879,  880,  880,  928,  881,  881,  870,  882,  882,
      869,  931,  869,  932,  871,  879,  892,  892,  933,  876,
      881,  875,  934,  870,  893,  893,  896,  896,  872,  897,
      897,  892,  871,  936,  872,  900,  900,  901,  901,  902,
      902,  896,  903,  903,  904,  904,  908,  908,  911,  911,
      912,  912,  901,  915,  915,  918,  918,  903,  919,  919,

      923,  923,  938,  911,  929,  929,  930,  930,  915,  935,
      935,  937,  937,  939,  940,  941,  941,  943,  944,  929,
      945,  946,  947,  941,  948,  949,  950,  951,  952,  953,
      954,  955,  955,  956,  956,  957,  958,  959,  960,  961,
      962,  963,  964,  965,  966,  967,  956,  968,  969,  970,
      971,  971,  972,  973,  975,  976,  977,  979,  980,  981,
      982,  983,  984,  985,  987,  987,  988,  987,  989,  987,
      990,  991,  990,  991,  992,  992,  993,  987,  993,  987,
      994,  995,  994,  995,  996, 1004,  996,  992,  992,  992,
      997,  998,  997,  998,  999, 1000,  999, 1000, 1001, 1002,

     1001, 1002, 1003, 1005, 1003,  990,  991,  995, 1006, 1006,
     1007, 1007, 1008, 1008, 1010,  996, 1011,  999,  993,  997,
     1008, 1009, 1009, 1002,  998,  994, 1012, 1013, 1014, 1000,
     1015, 1016, 1018, 1003, 1017, 1017, 1009, 1001, 1019, 1020,
     1020, 1021, 1022, 1023, 1023, 1024, 1024, 1025, 1026, 1027,
     1028, 1029, 1030, 1031, 1032, 1032, 1033, 1034, 1035, 1036,
     1036, 1037, 1037, 1038, 1039, 1040, 1041, 1041, 1042, 1043,
     1044, 1045, 1045, 1046, 1036, 1047, 1048, 1048, 1049, 1050,
     1051, 1041, 1052, 1053, 1054, 1054, 1045, 1055, 1057, 1058,
     1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1054,

     1069, 1070, 1071, 1072, 1072, 1073, 1074, 1076, 1077, 1078,
     1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1090, 1091,
     1092, 1093, 1094, 1095, 1096, 1098, 1101, 1101, 1116, 1102,
     1102, 1118, 1103, 1103, 1119, 1104, 1104, 1120, 1123, 1101,
     1101, 1101, 1102, 1102, 1102, 1103, 1103, 1103, 1104, 1105,
     1104, 1105, 1106, 1106, 1107, 1124, 1107, 1108, 1108, 1109,
     1110, 1109, 1110, 1122, 1122, 1106, 1106, 1106, 1125, 1126,
     1108, 1108, 1108, 1111, 1112, 1111, 1112, 1127, 1113, 1113,
     1117, 1117, 1102, 1105, 1114, 1109, 1114, 1128, 1107, 1121,
     1121, 1113, 1113, 1113, 1130, 1117, 1108, 1115, 1131, 1115,

     1112, 1113, 1110, 1110, 1121, 1129, 1129, 1132, 1133, 1134,
     1134, 1135, 1136, 1111, 1137, 1138, 1139, 1140, 1141, 1143,
     1129, 1113, 1145, 1115, 1134, 1114, 1142, 1142, 1144, 1144,
     1146, 1147, 1147, 1148, 1148, 1149, 1149, 1150, 1150, 1151,
     1152, 1142, 1153, 1153, 1154, 1154, 1147, 1155, 1148, 1156,
     1157, 1158, 1150, 1159, 1160, 1160, 1161, 1153, 1162, 1162,
     1163, 1163, 1164, 1165, 1166, 1167, 1168, 1171, 1172, 1160,
     1173, 1173, 1176, 1162, 1175, 1175, 1177, 1178, 1178, 1173,
     1179, 1180, 1180, 1175, 1181, 1173, 1182, 1183, 1184, 1175,
     1185, 1186, 1178, 1188, 1189, 1190, 1180, 1191, 1192, 1193,

     1194, 1195, 1196, 1197, 1198, 1199, 1200, 1200, 1224, 1201,
     1201, 1204, 1201, 1204, 1201, 1202, 1202, 1226, 1226, 1200,
     1200, 1200, 1201, 1227, 1201, 1203, 1203, 1228, 1202, 1202,
     1202, 1205, 1205, 1206, 1229, 1206, 1207, 1207, 1203, 1231,
     1203, 1208, 1208, 1209, 1205, 1209, 1205, 1210, 1210, 1207,
     1207, 1207, 1204, 1212, 1208, 1212, 1208, 1211, 1211, 1206,
     1210, 1210, 1210, 1213, 1214, 1213, 1214, 1215, 1234, 1215,
     1211, 1216, 1211, 1216, 1217, 1235, 1217, 1212, 1220, 1241,
     1220, 1218, 1218, 1209, 1219, 1219, 1221, 1222, 1221, 1222,
     1242, 1225, 1225, 1215, 1218, 1218, 1218, 1219, 1223, 1219,

     1223, 1245, 1213, 1220, 1246, 1214, 1225, 1247, 1221, 1230,
     1230, 1248, 1216, 1249, 1217, 1232, 1232, 1222, 1233, 1233,
     1236, 1236, 1223, 1237, 1237, 1238, 1238, 1239, 1239, 1250,
     1232, 1240, 1240, 1233, 1254, 1236, 1243, 1243, 1237, 1244,
     1244, 1255, 1239, 1251, 1251, 1256, 1240, 1252, 1252, 1253,
     1253, 1243, 1257, 1257, 1258, 1258, 1259, 1259, 1251, 1260,
     1260, 1262, 1252, 1261, 1261, 1263, 1265, 1257, 1264, 1264,
     1266, 1267, 1268, 1269, 1260, 1270, 1270, 1271, 1271, 1272,
     1273, 1273, 1274, 1275, 1276, 1277, 1278, 1275, 1279, 1282,
     1270, 1281, 1281, 1285, 1283, 1283, 1284, 1284, 1287, 1291,

     1281, 1286, 1286, 1289, 1289, 1284, 1281, 1283, 1290, 1290,
     1294, 1284, 1292, 1292, 1286, 1293, 1293, 1296, 1289, 1297,
     1299, 1300, 1301, 1303, 1304, 1305, 1306, 1292, 1307, 1308,
     1310, 1312, 1312, 1313, 1312, 1314, 1312, 1315, 1315, 1316,
     1317, 1316, 1317, 1321, 1312, 1321, 1312, 1318, 1318, 1324,
     1315, 1324, 1315, 1319, 1319, 1332, 1320, 1320, 1335, 1322,
     1318, 1322, 1318, 1323, 1322, 1323, 1319, 1319, 1319, 1320,
     1325, 1320, 1325, 1328, 1322, 1328, 1322, 1322, 1316, 1317,
     1322, 1326, 1326, 1336, 1321, 1327, 1327, 1329, 1324, 1329,
     1333, 1333, 1325, 1323, 1326, 1326, 1326, 1330, 1327, 1330,

     1327, 1331, 1334, 1331, 1337, 1342, 1334, 1338, 1338, 1351,
     1329, 1339, 1339, 1340, 1340, 1341, 1341, 1356, 1328, 1343,
     1343, 1357, 1338, 1344, 1344, 1345, 1345, 1359, 1340, 1346,
     1346, 1347, 1347, 1363, 1343, 1348, 1348, 1364, 1344, 1368,
     1330, 1369, 1331, 1349, 1349, 1370, 1347, 1350, 1350, 1352,
     1352, 1353, 1353, 1354, 1354, 1355, 1355, 1371, 1349, 1358,
     1358, 1360, 1360, 1372, 1352, 1361, 1361, 1374, 1354, 1377,
     1355, 1362, 1362, 1378, 1358, 1379, 1360, 1365, 1365, 1366,
     1366, 1367, 1367, 1380, 1354, 1373, 1373, 1375, 1375, 1376,
     1376, 1381, 1365, 1382, 1383, 1384, 1384, 1385, 1385, 1386,

     1373, 1387, 1387, 1389, 1376, 1388, 1388, 1391, 1391, 1392,
     1385, 1393, 1393, 1394, 1395, 1396, 1397, 1398, 1388, 1400,
     1401, 1402, 1403, 1404, 1409, 1410, 1409, 1410, 1411, 1411,
     1413, 1414, 1413, 1414, 1428, 1412, 1412, 1416, 1415, 1416,
     1415, 1411, 1411, 1411, 1429, 1430, 1409, 1410, 1412, 1417,
     1412, 1417, 1418, 1419, 1418, 1419, 1420, 1421, 1420, 1421,
     1413, 1415, 1431, 1416, 1422, 1422, 1432, 1414, 1423, 1423,
     1425, 1420, 1425, 1433, 1418, 1434, 1434, 1422, 1422, 1422,
     1426, 1423, 1426, 1423, 1436, 1417, 1424, 1424, 1427, 1419,
     1427, 1435, 1435, 1437, 1437, 1438, 1438, 1447, 1421, 1424,

     1424, 1424, 1450, 1425, 1439, 1439, 1426, 1451, 1437, 1440,
     1440, 1441, 1441, 1442, 1442, 1443, 1443, 1454, 1427, 1444,
     1444, 1445, 1445, 1446, 1446, 1448, 1448, 1456, 1442, 1460,
     1443, 1449, 1449, 1452, 1452, 1461, 1445, 1453, 1453, 1462,
     1448, 1455, 1455, 1457, 1457, 1458, 1458, 1463, 1452, 1459,
     1459, 1464, 1464, 1465, 1465, 1466, 1466, 1470, 1457, 1471,
     1458, 1467, 1467, 1468, 1468, 1472, 1464, 1473, 1465, 1469,
     1469, 1474, 1475, 1476, 1477, 1477, 1467, 1478, 1468, 1479,
     1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
     1489, 1490, 1492, 1493, 1492, 1493, 1494, 1494, 1495, 1510,

     1495, 1496, 1497, 1496, 1497, 1498, 1499, 1498, 1499, 1494,
     1500, 1494, 1500, 1501, 1502, 1501, 1502, 1503, 1508, 1503,
     1508, 1507, 1492, 1507, 1511, 1504, 1504, 1512, 1508, 1505,
     1505, 1513, 1508, 1497, 1493, 1509, 1496, 1509, 1504, 1499,
     1504, 1495, 1505, 1505, 1505, 1498, 1514, 1507, 1501, 1500,
     1506, 1506, 1515, 1516, 1517, 1517, 1502, 1518, 1518, 1503,
     1519, 1519, 1522, 1506, 1524, 1506, 1520, 1520, 1521, 1521,
     1523, 1523, 1518, 1525, 1526, 1526, 1527, 1528, 1509, 1529,
     1529, 1530, 1530, 1531, 1531, 1532, 1533, 1534, 1535, 1535,
     1536, 1536, 1537, 1537, 1529, 1538, 1538, 1539, 1539, 1540,

     1540, 1541, 1541, 1535, 1543, 1536, 1544, 1545, 1547, 1549,
     1550, 1551, 1539, 1552, 1553, 1554, 1555, 1556, 1557, 1557,
     1558, 1559, 1560, 1561, 1562, 1561, 1562, 1563, 1564, 1563,
     1564, 1578, 1579, 1557, 1565, 1566, 1565, 1566, 1567, 1568,
     1567, 1568, 1569, 1570, 1569, 1570, 1571, 1580, 1571, 1572,
     1572, 1577, 1577, 1563, 1562, 1573, 1582, 1573, 1561, 1575,
     1565, 1575, 1572, 1574, 1572, 1574, 1577, 1585, 1564, 1568,
     1576, 1586, 1576, 1587, 1581, 1581, 1588, 1566, 1583, 1583,
     1567, 1575, 1569, 1589, 1570, 1591, 1571, 1592, 1574, 1581,
     1584, 1584, 1593, 1583, 1598, 1573, 1576, 1590, 1590, 1594,

     1594, 1595, 1595, 1596, 1596, 1597, 1597, 1599, 1600, 1602,
     1603, 1604, 1605, 1606, 1594, 1607, 1608, 1609, 1610, 1610,
     1611, 1611, 1612, 1613, 1614, 1615, 1616, 1615, 1616, 1617,
     1618, 1617, 1618, 1610, 1619, 1620, 1619, 1620, 1621, 1622,
     1621, 1622, 1623, 1623, 1624, 1632, 1624, 1625, 1633, 1625,
     1626, 1626, 1627, 1634, 1627, 1623, 1623, 1623, 1619, 1631,
     1631, 1622, 1616, 1626, 1626, 1626, 1615, 1640, 1620, 1617,
     1628, 1618, 1628, 1625, 1629, 1641, 1629, 1630, 1630, 1621,
     1642, 1624, 1643, 1635, 1635, 1636, 1636, 1637, 1637, 1644,
     1638, 1638, 1630, 1639, 1639, 1645, 1646, 1627, 1635, 1647,

     1648, 1648, 1637, 1649, 1628, 1638, 1651, 1652, 1653, 1654,
     1654, 1655, 1656, 1658, 1629, 1659, 1660, 1660, 1662, 1664,
     1665, 1664, 1665, 1682, 1654, 1666, 1666, 1667, 1668, 1667,
     1668, 1669, 1670, 1669, 1670, 1671, 1684, 1671, 1666, 1666,
     1666, 1673, 1673, 1674, 1675, 1674, 1675, 1681, 1681, 1689,
     1672, 1672, 1685, 1685, 1673, 1665, 1673, 1690, 1671, 1664,
     1676, 1676, 1670, 1672, 1672, 1672, 1667, 1677, 1677, 1668,
     1687, 1687, 1669, 1676, 1676, 1676, 1678, 1678, 1692, 1679,
     1677, 1679, 1677, 1693, 1675, 1674, 1680, 1680, 1695, 1678,
     1678, 1678, 1683, 1683, 1686, 1686, 1688, 1688, 1699, 1680,

     1680, 1680, 1691, 1691, 1700, 1679, 1703, 1683, 1704, 1686,
     1694, 1694, 1696, 1696, 1701, 1701, 1731, 1691, 1702, 1702,
     1708, 1708, 1709, 1732, 1709, 1694, 1712, 1696, 1712, 1701,
     1710, 1710, 1742, 1708, 1708, 1708, 1711, 1711, 1713, 1714,
     1713, 1714, 1743, 1710, 1710, 1710, 1717, 1717, 1712, 1711,
     1715, 1711, 1715, 1718, 1716, 1718, 1716, 1719, 1719, 1717,
     1745, 1717, 1709, 1720, 1720, 1726, 1726, 1746, 1713, 1763,
     1719, 1719, 1719, 1728, 1728, 1764, 1720, 1770, 1720, 1714,
     1726, 1781, 1721, 1721, 1730, 1730, 1715, 1716, 1722, 1722,
     1782, 1723, 1723, 1783, 1718, 1721, 1721, 1721, 1724, 1724,

     1797, 1722, 1798, 1722, 1723, 1723, 1723, 1727, 1727, 1729,
     1729, 1724, 1724, 1724, 1725, 1725, 1751, 1725, 1751, 1725,
     1733, 1733, 1727, 1803, 1729, 1734, 1734, 1725, 1810, 1725,
     1735, 1735, 1736, 1736, 1811, 1733, 1737, 1737, 1738, 1738,
     1739, 1739, 1740, 1740, 1812, 1735, 1751, 1736, 1741, 1741,
     1823, 1737, 1744, 1744, 1752, 1739, 1752, 1740, 1747, 1747,
     1827, 1748, 1748, 1828, 1749, 1749, 1829, 1750, 1750, 1765,
     1765, 1747, 1747, 1747, 1748, 1835, 1748, 1749, 1749, 1749,
     1750, 1754, 1750, 1754, 1765, 1753, 1753, 1755, 1756, 1755,
     1756, 1757, 1757, 1837, 1758, 1758, 1838, 1752, 1753, 1753,

     1753, 1839, 1759, 1759, 1757, 1757, 1757, 1758, 1844, 1758,
     1760, 1760, 1789, 1755, 1789, 1759, 1754, 1759, 1766, 1766,
     1767, 1767, 1845, 1760, 1760, 1760, 1761, 1761, 1756, 1761,
     1846, 1761, 1762, 1762, 1832, 1762, 1832, 1762, 1789, 1761,
     1847, 1761, 1768, 1768, 1852, 1762, 1855, 1762, 1769, 1769,
     1771, 1771, 1772, 1772, 1773, 1773, 1860, 1768, 1774, 1774,
     1775, 1775, 1776, 1776,  829, 1771, 1777, 1777,  827, 1773,
     1778, 1778, 1779, 1779, 1832, 1775, 1780, 1780, 1785, 1785,
      826, 1786, 1786, 1801, 1801, 1778, 1787, 1787, 1788,  825,
     1788, 1785,  824, 1785, 1786, 1786, 1786, 1790, 1790, 1787,

      823, 1787,  822, 1771, 1791, 1791,  821, 1792,  820, 1792,
     1790, 1790, 1790, 1793,  819, 1793,  818, 1791,  817, 1791,
     1794, 1794,  816, 1788, 1792, 1795, 1795, 1802, 1802,  815,
     1793, 1804, 1804, 1794, 1794, 1794, 1796, 1796, 1795, 1796,
     1795, 1796, 1805, 1805, 1806, 1806, 1804, 1807, 1807, 1796,
      814, 1796, 1808, 1808, 1809, 1809, 1813, 1813, 1814, 1806,
     1814, 1815,  811, 1815, 1816, 1816, 1817,  808, 1817, 1813,
     1818, 1813, 1818, 1819, 1819, 1824, 1824, 1816, 1815, 1816,
     1820, 1820, 1825, 1825, 1826, 1826, 1819, 1819, 1819, 1830,
      807, 1830, 1817, 1820,  804, 1820, 1818, 1825, 1831, 1814,

     1831, 1833,  803, 1833, 1834, 1834, 1830, 1836, 1836, 1840,
     1841, 1840, 1841, 1842, 1843, 1842, 1843, 1834, 1848, 1834,
     1848, 1849,  802, 1849, 1831,  801, 1850, 1851, 1850, 1851,
     1853, 1853, 1854, 1854, 1856, 1840, 1856, 1857, 1858, 1857,
     1858, 1833, 1859,  800, 1859, 1853,  797, 1854, 1862, 1862,
     1841, 1861, 1861, 1863, 1863, 1842, 1843,  796, 1848, 1850,
     1851, 1864, 1864, 1849,  795, 1866, 1861, 1866, 1863, 1867,
     1857, 1867, 1868, 1869, 1868, 1869, 1856, 1870, 1870, 1858,
     1871, 1871,  790, 1859, 1872, 1872, 1873,  789, 1873, 1874,
      788, 1874, 1870, 1875, 1875,  786, 1877, 1877, 1866, 1878,

     1878, 1876, 1876, 1879,  785, 1879, 1875, 1875, 1875,  784,
     1867, 1877, 1868, 1869, 1876, 1876, 1876, 1880, 1880,  783,
     1881, 1881,  781, 1882, 1882, 1885, 1885, 1873,  780, 1874,
     1880, 1880, 1880, 1881, 1881, 1881, 1882,  774, 1882, 1883,
     1883,  772,  771, 1879, 1884, 1884,  769, 1886, 1886,  768,
     1887, 1887, 1883, 1883, 1883, 1888, 1888, 1884,  766, 1884,
     1886, 1886, 1886, 1887, 1887, 1887, 1889, 1889, 1888,  765,
     1888, 1890, 1890,  763, 1891, 1891,  762, 1892, 1892, 1889,
      761, 1889, 1893, 1893, 1890,  758, 1890, 1891, 1891, 1891,
     1892,  757, 1892, 1894, 1894, 1893,  748, 1893,  747,  746,

      745,  742,  741,  740,  739,  738, 1894,  736, 1894, 1896,
     1896, 1896, 1896, 1896, 1896, 1897, 1897, 1897, 1897, 1897,
     1897, 1898, 1898, 1898, 1898, 1898, 1898, 1899, 1899, 1899,
     1899, 1899, 1899, 1900, 1900, 1900, 1900, 1900, 1900, 1901,
     1901, 1901, 1901, 1901, 1901, 1902, 1902, 1902, 1902, 1902,
     1902, 1903, 1903, 1903, 1903, 1903, 1903, 1904,  735,  734,
     1904, 1904, 1905, 1905, 1905, 1905, 1905, 1906, 1906,  732,
     1906, 1906, 1906, 1907, 1907, 1907,  730, 1907, 1907, 1908,
     1908, 1908, 1908,  729, 1908,  728,  726,  725,  724,  723,
      722,  721,  720,  716,  714,  712,  711,  709,  708,  706,

      705,  704,  703,  702,  699,  698,  697,  694,  693,  692,
      691,  690,  689,  688,  687,  684,  683,  682,  678,  677,
      676,  675,  674,  673,  669,  668,  666,  665,  660,  659,
      658,  657,  656,  655,  654,  653,  652,  651,  648,  647,
      646,  645,  644,  643,  642,  640,  639,  625,  623,  622,
      621,  620,  619,  618,  617,  616,  615,  613,  612,  611,
      607,  606,  605,  604,  603,  602,  601,  600,  599,  596,
      595,  594,  590,  589,  588,  587,  586,  585,  584,  583,
      582,  581,  580,  579,  578,  577,  576,  575,  574,  573,
      572,  570,  569,  568,  567,  566,  565,  564,  560,  559,

      558,  557,  556,  555,  554,  553,  552,  551,  550,  546,
      545,  541,  540,  535,  534,  532,  531,  530,  529,  528,
      527,  526,  525,  523,  521,  520,  519,  518,  517,  516,
      515,  511,  510,  508,  507,  502,  501,  495,  494,  493,
      492,  491,  490,  489,  488,  487,  485,  484,  483,  482,
      481,  480,  479,  478,  477,  476,  475,  471,  470,  468,
      466,  465,  462,  460,  459,  458,  457,  456,  455,  454,
      453,  452,  451,  450,  448,  447,  446,  445,  444,  443,
      442,  441,  440,  437,  435,  434,  433,  431,  430,  429,
      428,  427,  426,  425,  424,  423,  422,  421,  420,  418,

      417,  413,  412,  411,  407,  406,  403,  402,  401,  400,
      398,  397,  396,  395,  391,  390,  389,  388,  387,  386,
      385,  366,  365,  364,  362,  361,  360,  359,  358,  357,
      356,  355,  354,  353,  352,  351,  350,  349,  348,  347,
      345,  344,  342,  341,  340,  337,  336,  335,  334,  333,
      332,  331,  330,  329,  328,  326,  325,  324,  323,  322,
      321,  320,  318,  317,  316,  315,  313,  312,  310,  309,
      307,  306,  305,  304,  303,  302,  300,  299,  298,  296,
      295,  294,  292,  291,  290,  289,  286,  285,  284,  281,
      280,  279,  278,  277,  261,  260,  259,  258,  256,  255,

      253,  252,  250,  249,  248,  247,  246,  245,  244,  243,
      242,  241,  239,  238,  237,  235,  234,  233,  232,  231,
      230,  229,  228,  226,  225,  224,  223,  222,  220,  219,
      218,  217,  216,  214,  212,  211,  210,  209,  208,  207,
      206,  205,  204,  203,  202,  201,  200,  199,  198,  197,
      196,  193,  192,  191,  190,  189,  188,  186,  168,  167,
      166,  165,  164,  162,  160,  159,  158,  157,  156,  155,
      154,  153,  152,  151,  150,  149,  148,  147,  146,  145,
      144,  141,  140,  139,  138,  137,  136,  134,  133,  129,
      127,  126,  125,  124,  122,  121,  117,  115,   98,   90,

       86,   84,   83,   82,   81,   79,   78,   74,   70,   43,
       40,   24,   22,   19,   14,   13,    8,    7,    6,    5,
        4,    3, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[241] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 
    0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
/* $Id$ */
/** @file parseosrl.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
 *
 * \remarks
 * Copyright (C) 2005-2011, Horand Gassmann, Jun Ma, Kipp Martin,
 * Dalhousie University, Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 15 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"

#include "OSConfig.h"

#include <iostream>
#include <sstream> 
 
#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 

//#define PARSERDEBUG

#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSGeneral.h"
#include "OSParseosrl.tab.hpp"
#include "OSResult.h"
#include "OSrLParserData.h"

using std::cout;
using std::endl;
using std::ostringstream;
     








#line 103 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 2023 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.cpp"

#define INITIAL 0
#define osrlattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osrllex_init (yyscan_t* scanner);

int osrllex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 113 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"



#line 2279 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1896 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3723 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 116 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 120 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 121 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 122 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;     return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 123 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 125 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 141 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* attributes returning numeric values*/
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 145 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 146 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 147 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 148 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 149 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFIDXATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 150 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 151 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 152 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 153 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTRESULTSATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 154 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVERESULTSATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 155 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERRESULTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 156 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERSOLUTIONRESULTSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 157 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLERESULTSATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 158 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 159 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLVEROUTPUTSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 160 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSUBSTATUSESATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 161 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFTIMESATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 162 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 163 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 164 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 166 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 167 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 168 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 169 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 170 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TARGETOBJECTIVEIDXATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 174 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 175 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 176 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 177 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 178 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 179 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 180 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 181 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 182 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 183 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 184 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 185 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 186 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTARGETOBJECTIVENAMEATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 187 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTARGETOBJECTIVENAMEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 188 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TARGETOBJECTIVENAMEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 189 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TARGETOBJECTIVENAMEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 190 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 191 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 192 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 193 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 194 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 195 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 196 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 197 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 198 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 199 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 200 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 201 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 202 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYWEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 203 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYWEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 204 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 205 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTEDOBJECTIVESATT);}
	YY_BREAK
/* top level elements */
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 209 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{return(OSRLSTARTEMPTY);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 210 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 211 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 213 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 214 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 216 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 217 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 219 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 220 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 222 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 223 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 225 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 226 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 228 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 229 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
/* Remaining elements, sorted alpabetically. */
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 234 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ACTUALSTARTTIMESTART);}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 235 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ACTUALSTARTTIMEEND);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 236 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATEQUALITYSTART);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 237 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATEQUALITYEND);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 238 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 239 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 240 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 241 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 242 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLECPUNUMBERSTART);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 243 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLECPUNUMBEREND);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 244 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLECPUSPEEDSTART);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 245 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLECPUSPEEDEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 246 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLEDISKSPACESTART);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 247 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLEDISKSPACEEND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 248 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLEMEMORYSTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 249 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLEMEMORYEND);}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 250 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 251 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 252 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 253 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 254 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BASISSTATUSSTART);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 255 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASISSTATUSEND);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 256 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BASSTATUSSTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 257 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASSTATUSEND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 258 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 259 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 260 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 261 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 262 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTJOBCOUNTSTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 263 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTJOBCOUNTEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 264 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTSTATESTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 265 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTSTATEEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 266 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 267 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 268 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 269 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 270 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDTIMESTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 271 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDTIMEEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 272 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 273 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 274 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 275 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 276 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 277 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 278 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXSTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 279 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 280 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 281 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 282 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 283 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 284 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 285 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 286 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 287 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 288 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 289 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 290 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OPTIMIZATIONSOLUTIONSTATUSSTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 291 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSOLUTIONSTATUSEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 292 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 293 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 294 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERRESULTSSTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 295 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERRESULTSEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 296 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 297 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLUTIONRESULTEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 298 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 299 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 300 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLVEROUTPUTSTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 301 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLVEROUTPUTEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 302 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SCHEDULEDSTARTTIMESTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 303 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SCHEDULEDSTARTTIMEEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 304 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 305 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 306 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 307 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 308 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEUTILIZATIONSTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 309 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEUTILIZATIONEND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 310 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 311 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 312 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVERINVOKEDSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 313 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVERINVOKEDEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 314 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVEROUTPUTSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 315 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVEROUTPUTEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 316 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 317 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 318 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBMITTIMESTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 319 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBMITTIMEEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 320 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBSTATUSSTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 321 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBSTATUSEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 322 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 323 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 324 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SYSTEMINFORMATIONSTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 325 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SYSTEMINFORMATIONEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 326 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 327 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMEEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 328 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESERVICESTARTEDSTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 329 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESERVICESTARTEDEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 330 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTAMPSTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 331 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTAMPEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 332 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TIMINGINFORMATIONSTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 333 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMINGINFORMATIONEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 334 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TOTALJOBSSOFARSTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 335 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TOTALJOBSSOFAREND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 336 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 337 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 338 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUNUMBERSTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 339 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUNUMBEREND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 340 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUSPEEDSTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 341 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUSPEEDEND);} 
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 342 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDDISKSPACESTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 343 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDDISKSPACEEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 344 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDMEMORYSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 345 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDMEMORYEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 346 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 347 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 348 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VALUESSTRINGSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 349 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VALUESSTRINGEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 350 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 351 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 352 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 353 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 354 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIDXSTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 355 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIDXEND);}
	YY_BREAK
/* The <item> element and the children of the option header are treated specially because they may legitimately contain special characters */
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 360 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 361 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 362 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 363 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 365 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 366 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 367 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 368 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 370 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 371 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 372 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 373 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 375 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 376 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 377 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 378 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 380 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 381 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 382 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 383 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 385 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 386 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 387 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 388 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
/* environments and comments */
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 392 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 393 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 395 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
BEGIN comment;
	YY_BREAK
case 229:
#line 397 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 397 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 398 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 400 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 233:
#line 402 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 402 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 403 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 406 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 407 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 408 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/  yylval->sval = yytext; return(OSRLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 412 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ 
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 424 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
ECHO;
	YY_BREAK
#line 3835 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osrlrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1896 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1896 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1895);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osrllex_init_extra has the same functionality as osrllex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osrlalloc in
 * the yyextra field.
 */

int osrllex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osrlset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osrlset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 424 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"






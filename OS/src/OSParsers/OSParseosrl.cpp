#line 2 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.cpp"

#line 4 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osrlrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE osrllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osrlrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osrlrestart (FILE *input_file ,yyscan_t yyscanner );
void osrl_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osrl_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrl_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void osrlpop_buffer_state (yyscan_t yyscanner );

static void osrlensure_buffer_stack (yyscan_t yyscanner );
static void osrl_load_buffer_state (yyscan_t yyscanner );
static void osrl_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osrl_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osrl_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osrl_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osrlalloc (yy_size_t ,yyscan_t yyscanner );
void *osrlrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osrlfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osrl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osrlensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define osrlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 256
#define YY_END_OF_BUFFER 257
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1950] =
    {   0,
        1,    1,  254,  254,  252,  252,  253,  253,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  257,  255,
        1,    2,  242,    2,  242,    6,  242,    5,  255,    4,
      242,  242,  254,  256,  252,  253,  243,  245,  246,  245,
      249,  250,  249,    1,  242,  242,    6,  242,    5,    0,
        4,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,    3,    6,    6,  242,    7,
        5,    0,    0,  248,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    4,  242,  242,  254,  252,  253,  243,    0,

      251,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,    6,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  130,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    6,  247,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  244,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  120,    0,    0,    0,
        0,    0,    0,    0,  140,    0,    0,    0,   92,    0,
        0,    0,  148,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      212,  242,  242,  242,  242,  242,   28,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      131,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   92,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  188,    0,    0,    0,    0,    0,    0,    0,  242,
      242,  242,  242,   28,  242,   29,  242,   30,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,

      242,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      121,    0,    0,    0,    0,  131,    0,    0,    0,    0,
        0,  141,    0,    0,    0,    0,   93,    0,    0,    0,
        0,    0,  149,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  213,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  114,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  219,
      144,    0,    0,    0,    0,  223,    0,    0,   82,   81,
      154,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  242,  242,  242,  242,   29,   30,  242,   43,
       44,  242,  242,  242,  242,  242,   63,   64,  242,   67,
       68,  242,  242,  242,  242,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  121,    0,    0,    0,    0,    0,
        0,    0,    0,  141,    0,    0,    0,  220,   93,    0,
        0,    0,    0,  224,  149,    0,    0,    0,   83,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  189,    0,    0,    0,    0,    0,    0,    0,
        0,  213,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  142,  221,  219,    0,    0,    0,  225,  223,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      178,    0,    0,    0,   88,    0,    0,    0,    0,    0,
        0,    0,    0,  208,  216,    0,  242,  242,  242,  242,
       41,   42,  242,  242,  242,   31,  242,   61,   62,   65,
       66,  242,   71,   72,  242,  242,    0,    0,    0,    0,
        0,    0,    0,    0,  115,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  220,    0,  145,    0,
        0,  224,    0,    0,   83,    0,  155,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      189,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  100,  102,    0,    0,    0,    0,
        0,    0,    0,    0,  132,    0,    0,   86,    0,  221,
        0,    0,  146,  225,    0,    0,    0,    0,    0,    0,
        0,   90,    0,    0,    0,    0,    0,  227,    0,    0,
        0,   88,    0,    0,    0,    0,    0,  198,    0,    0,
        0,    0,    0,  242,  242,  242,  242,  242,  242,  242,
      242,   31,  242,   69,   70,  242,  242,  242,    0,    0,
        0,    0,    0,    0,    0,  115,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  143,  145,    0,
        0,    0,    0,  155,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  228,    0,  179,    0,    0,    0,    0,
       89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  209,    0,    0,  217,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   86,
        0,    0,    0,    0,    0,  239,    0,    0,    0,    0,
        0,    0,    0,   90,    0,    0,  172,    0,    0,  229,
      227,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  242,  242,  242,   51,

       52,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,   59,   60,  242,  242,   75,   76,  242,    0,
        0,    0,  101,    0,  103,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  133,    0,    0,    0,   87,
        0,    0,  143,    0,  240,    0,  147,    0,    0,    0,
        0,    0,    0,    0,   91,    0,    0,    0,    0,    0,
      228,  179,    0,    0,    0,   89,    0,    0,    0,    0,
        0,    0,  199,    0,    0,    0,    0,  209,    0,  217,
        0,    0,    0,    0,  118,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  241,  239,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  229,    0,    0,  182,    0,    0,    0,
      192,    0,    0,    0,    0,    0,    0,    0,  214,  242,
       35,   36,   49,   50,  242,  242,   55,   56,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,   57,
       58,  242,   73,   74,  242,    0,    0,  101,  103,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  133,    0,
        0,   87,    0,    0,  240,  147,    0,    0,    0,    0,
        0,    0,    0,   91,    0,    0,    0,    0,  173,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  199,

        0,    0,    0,    0,    0,    0,    0,   98,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  128,    0,    0,
        0,    0,    0,  241,    0,    0,  150,    0,    0,    0,
        0,    0,    0,    0,  168,    0,    0,    0,    0,  180,
      184,    0,    0,    0,    0,    0,    0,    0,  206,    0,
       33,   34,  242,   53,   54,  242,  242,   10,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,    0,
        0,    0,    0,    0,    0,  119,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  173,    0,    0,

        0,    0,  183,    0,    0,    0,    0,  193,    0,    0,
        0,    0,    0,    0,    0,    0,  215,    0,    0,    0,
        0,    0,  116,  122,    0,    0,    0,  134,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      166,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  242,  242,  242,    8,  242,   10,  242,
      242,   12,  242,  242,   14,  242,  242,  242,  242,  242,
      242,  242,   25,  242,  242,  242,  242,    0,    0,   99,
        0,    0,    0,  119,    0,    0,    0,    0,    0,    0,
        0,  129,    0,    0,    0,    0,    0,  151,    0,    0,

        0,    0,    0,    0,    0,    0,  169,    0,    0,    0,
        0,  181,  183,    0,  185,    0,    0,  193,    0,    0,
        0,    0,    0,    0,  207,    0,  215,    0,    0,    0,
        0,    0,    0,  126,    0,    0,  231,    0,    0,  235,
        0,  138,    0,  218,    0,    0,  222,   94,  156,    0,
        0,   84,    0,    0,    0,  176,    0,    0,    0,    0,
        0,    0,  202,    0,  210,  242,   39,   40,    8,  242,
      242,   12,  242,   14,  242,  242,  242,  242,  242,  242,
       25,  242,  242,  242,  242,    0,   99,    0,    0,    0,
        0,    0,  117,    0,  123,    0,    0,    0,  232,  129,

        0,  135,    0,  236,    0,    0,  151,    0,    0,    0,
        0,    0,    0,    0,  167,  169,    0,    0,    0,  181,
      185,    0,    0,    0,    0,    0,    0,    0,  207,    0,
        0,    0,    0,    0,    0,    0,    0,  233,  231,    0,
      237,  235,    0,  136,  218,    0,  222,    0,    0,    0,
        0,    0,  174,    0,    0,    0,    0,    0,  200,  204,
       37,   38,  242,  242,  242,   13,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,   24,  242,  242,  242,
      242,    0,    0,    0,    0,    0,    0,  117,  123,    0,
        0,  127,  232,  135,  236,    0,    0,  139,    0,   95,

        0,    0,  157,    0,    0,    0,   85,    0,  167,    0,
        0,    0,  177,    0,    0,    0,    0,    0,    0,  203,
        0,    0,  211,    0,    0,    0,    0,    0,    0,    0,
      233,    0,  237,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  196,  242,  242,   13,  242,  242,
      242,  242,  242,  242,  242,  242,  242,   24,  242,   27,
      242,  242,  242,    0,    0,    0,    0,    0,    0,    0,
      127,    0,  137,  139,   95,    0,  157,    0,    0,   85,
        0,    0,    0,  175,  177,    0,    0,    0,    0,    0,
      201,  203,    0,  205,  211,   96,    0,    0,    0,  110,

        0,  124,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,   27,  242,  242,  242,  242,
        0,    0,    0,    0,    0,    0,    0,  137,    0,    0,
        0,    0,    0,  175,    0,    0,    0,    0,  197,  201,
      205,    0,    0,    0,  112,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  226,    0,    0,    0,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,    0,   97,    0,    0,    0,    0,  111,
        0,    0,  125,    0,    0,    0,    0,    0,    0,    0,

        0,  197,    0,  106,    0,    0,    0,    0,    0,    0,
      162,    0,    0,  226,  186,    0,  194,  242,  242,  242,
      242,  242,  242,  242,  242,  242,   21,  242,  242,  242,
       26,  242,  242,  242,   97,    0,    0,    0,  111,    0,
      113,  125,    0,    0,    0,    0,    0,    0,    0,    0,
      104,  108,    0,    0,    0,  238,    0,    0,  164,  170,
      190,  242,  242,  242,   15,  242,  242,  242,  242,  242,
       21,  242,  242,   26,  242,   32,  242,  242,  242,    0,
        0,  107,    0,  113,    0,    0,    0,  163,    0,    0,
        0,  187,    0,    0,  195,    0,    0,  238,    0,  158,

      242,    9,  242,   15,  242,  242,  242,  242,  242,  242,
      242,   23,   32,  242,  242,  242,   79,   80,    0,  105,
      107,    0,  109,    0,    0,  163,    0,  165,    0,  171,
      187,    0,  191,  195,    0,    0,    0,  160,    9,  242,
       11,  242,  242,  242,   18,  242,  242,  242,   23,  242,
       47,   48,   77,   78,  105,  109,    0,    0,  159,    0,
      165,  171,  191,    0,    0,    0,   11,  242,  242,   18,
      242,  242,  242,   22,   45,   46,    0,  159,    0,  161,
        0,    0,    0,  242,  242,  242,  242,   22,    0,  161,
        0,    0,    0,  242,  242,  242,  242,    0,    0,    0,

        0,  242,  242,  242,  242,    0,    0,    0,    0,  242,
      242,  242,  242,    0,    0,  230,    0,  234,  152,  242,
      242,  242,  242,    0,  230,  234,  242,  242,  242,  242,
        0,  153,  242,  242,  242,   19,  242,   20,  153,  242,
      242,   17,   19,   20,  242,   16,   17,   16,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    6,    6,    6,    7,    6,
        6,    6,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   13,   12,   14,   12,   12,   12,    6,    1,   15,
       16,   17,   18,    6,    6,   19,   20,   21,   22,   23,
        6,   24,   25,   26,    6,   27,   28,   29,   30,   31,
        6,   32,   33,   34,   35,   36,    6,    6,    6,    6,
        1,    6,    1,    1,    6,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[63] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    4,    1,    5,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[1962] =
    {   0,
        0,   29, 3056, 3055, 3066, 3065, 3062, 3061,    0,    0,
        0,    0, 3052, 3051,   13,   17,    3,    5, 3065, 3074,
       57, 3059,  118, 3056,   39,  138, 3045,  168,  206,   25,
     3032, 3023,    0, 3074,    0,    0,    0, 3074, 3074, 3050,
     3074, 3074, 3041,    0,    0,  112,  142, 3040,  182,   44,
       53, 3027, 3018,   24, 3013, 3003,   96, 2995,    0, 3013,
     3005,  101, 2999, 3011, 3006, 3074,  146,  185,  206, 3074,
      163, 3037,  228, 3074,  133, 3008,  149,   82,  153, 2999,
     3002,  172, 2991, 2996, 2999, 3002,  178, 2997,  248,  157,
      181, 3000,  235, 3013, 3006,    0,    0,    0,    0, 3017,

     3074, 2977, 2982, 2976, 2973, 2969, 2989, 2979, 2977, 2976,
     2978, 2961, 2968, 2969, 2975,  157, 2974,  227,  278, 3009,
      254, 2980,  178,  201,  246, 2971, 2974,  258, 2963, 2968,
     2971, 2974,  263, 2969,  281,  208,  245, 2972, 2952,  289,
     2970, 2951, 2955, 2950, 2948, 2965, 3074,  266, 2953, 2950,
     2939, 2943, 2974, 2955, 2957, 2955, 2938, 2943, 2945, 2934,
     2935, 2944, 2932, 2942, 2931,  240, 2947,  265, 2928, 2933,
     2925, 2933, 2938,  273,  323, 3074, 2937, 2943, 2937, 2926,
      327, 2920, 2917, 2931, 2933, 2936, 2928, 2925, 2926, 2910,
     2908, 2930, 2920, 3074, 2906,  306, 2924, 2905, 2909, 2904,

     2902, 2919,  332,  291, 2907, 2904, 2893, 2897, 2928, 2909,
     2911, 2909, 2892, 2897, 2899, 2888, 2889, 2898, 2886, 2896,
     2885,  288, 2901,  301, 2882, 2887, 2879, 2887, 2892,  292,
     2875, 2878, 2879, 2877, 2883,  180, 2872, 2872, 2886, 2876,
     2889, 2873, 2880, 2879, 3074, 2863, 2864, 2868,  348, 2875,
     2860, 2873, 2872, 2867, 2863, 2869, 2852, 2867, 2849,  297,
     2852, 2849,  303, 2863, 2847,  315, 2865, 2851, 2860, 2842,
      319, 2855, 2836, 2842, 2861,  359,  363,  365,  367,  369,
     2853, 2832, 2862, 2850,  374,  376, 2849, 2828, 2844, 2830,
     2833, 2834, 2832, 2838,  341,  385, 2828, 2842, 2832,  391,

      393, 2845, 2829, 2836, 2835,  395, 2819, 2820, 2824,  397,
     2831, 2816, 2829,  401, 2824, 2820, 2826, 2809, 2824, 2806,
      348, 2809, 2806,  308, 2820, 2804,  339, 2822, 2808, 2817,
     2799,  407, 2818, 2797, 2794, 2800, 2803, 2794, 2835,  352,
     2792, 2806, 2792, 2809, 2799, 2802, 2822, 2787, 2803, 2798,
      414,  417, 2817, 2787, 2799,  424, 2796, 2785,  426, 2779,
     2784, 2791, 2785, 2773, 2787, 2788, 2769, 2780, 2768, 2769,
     2781, 2788, 2770, 2771, 2767,  416, 2776, 2776, 2778, 2763,
     2761, 2767, 2750,  431,  443,  436,  445,  447,  451,  453,
     2756, 2757, 2766, 2751,  460,  463,  469,  472,  478, 2754,

     2749, 2767, 2746, 2743, 2749, 2752, 2743, 2784,  418,  480,
      484, 2741, 2755, 2741, 2758,  486, 2748, 2751, 2771, 2736,
      488,  490, 2752, 2747,  493,  496,  498, 2766, 2736, 2748,
      500,  504,  506, 2745, 2734,  509, 2728, 2733, 2740, 2734,
     2722, 2736, 2737, 2718, 2729, 2717, 2718, 2730,  512, 2720,
     2721, 2717,  499, 2726,  520,  522, 2726, 2728, 2716, 2726,
     2721, 2720, 2723, 2722, 2745, 3074, 2724, 2702, 2705, 2709,
     2716, 2703, 2697, 2696, 2712, 2698, 2706,  529, 2729,  532,
     3074, 2706, 2701,  539, 2726,  536, 2686, 2696,  541, 3074,
      516, 2684, 2682, 2699, 2692, 2682, 2694, 2679, 2677, 2695,

     2693, 2681,  374, 2686, 2702, 2668, 2695, 2680, 2683, 2668,
     2662, 2683, 2666, 2678, 2666, 2665,  550,  552,  557, 2711,
     2708, 2684, 2672,  563, 2682,  565, 2706, 2703,  571, 2704,
     2701,  578,  580, 2666, 2665, 2657, 2667, 2662, 2661, 2664,
     2663, 2686,  586, 2665,  588, 2643, 2646, 2650, 2657, 2644,
     2638, 2637, 2653,  590, 2639, 2647,  593,  595,  597,  599,
     2648, 2643,  602,  604,  606, 2629, 2639,  609,  611,  615,
     2627, 2625, 2642, 2635, 2625, 2637, 2622, 2620, 2638, 2636,
     2624,  618,  620,  428, 2629, 2645, 2611, 2638, 2623, 2626,
     2611,  622, 2605, 2626, 2630, 2614, 2607, 2606, 2621, 2602,

     2638, 2600, 2618, 2598, 2601, 2604, 2610, 2613, 2608, 2600,
     2608, 3074,  625,  627, 2635, 2604, 2603,  631,  634, 2632,
     2597, 2579, 2599, 2588, 2614, 2589, 2595, 2584,   20,  641,
     3074, 2600, 2577, 2595,  636, 2577, 2593, 2604, 2577, 2577,
     2591, 2570, 2575, 2590, 3074, 2574, 2560,  638, 2564, 2578,
     3074, 3074, 2576,  643,  648,  653, 2579, 3074, 3074, 3074,
     3074,  660, 2611, 2608,  666, 2574, 2580, 2564, 2557, 2556,
     2571, 2552, 2588,  668,  670, 2550, 2568, 2548, 2551, 2554,
     2560, 2563, 2558, 2550, 2558,  672,  674,  676,  678, 2555,
     2554,  681, 2549, 2531,  684,  688,  692, 2551, 2540, 2566,

     2541, 2547, 2536,  277,  694,  696, 2552, 2529, 2546,  698,
      700, 2523, 2534, 2499, 2472, 2472, 2479, 2448, 2446,  704,
      707, 2437,   78,   97, 3074, 3074,  105,  104,  141,  156,
      187,  551,  194,  215, 3074,  219,  310,  714,  318,  716,
      344,  723, 3074,  725,  351,  353,  376,  366,  375,  410,
      423,  727,  428,  454,  459,  733,  501,  730,  483,  473,
      478,  736,  486,  499,  512,  513,  531, 3074,  542,  539,
      564,  575,  612,  739,  749,  756,  612,  751,  744,  768,
      780,  746,  614, 3074, 3074,  770,  786,  636,  632,  647,
      773,  792,  656,  651,  667,  794,  677,  675,  766,  666,

      674,  798,  687,  709,  800,  716,  802,  804,  808,  810,
      818,  702,  731,  820,  724,  733,  757,  767,  822,  764,
      766,  761,  826,  828,  835,  838,  781,  775,  779,  842,
      844,  786,  784,  799,  799,  812,  851,  827,  808,  807,
      859,  861,  809,  864,  867,  830,  835,  817,  833,  820,
      827,  822,  829,  829,  826,  838,  843,  840,  830,  885,
      833,  861,  835,  890,  877,  893,  860,  857,  843,  843,
      845,  867,  865,  907,  869,  879, 3074,  854,  857,  912,
      914,  907,  870,  865,  876,  880,  878,  872,  883,  871,
      870,  876,  897,  877,  878,  878,  934,  936,  942,  929,

      933,  891,  949,  951,  895,  907,  908,  921,  909,  916,
      925,  965,  958,  962,  930,  971,  970,  972,  942,  944,
      926,  981,  983,  985,  987,  950,  937,  943,  938,  945,
      945,  941,  954,  959, 1001, 1003,  956,  951, 1006, 1008,
      956,  984, 1012, 1014, 1017, 1019, 1022,  985,  971,  971,
      972,  995,  993, 1032, 1035, 1002, 1008, 1039,  985,  988,
     1043, 1045, 1001,  996, 1007, 1051, 1013, 1012, 1006, 1017,
     1005, 1059, 1063, 1006, 1015, 1035, 1015, 1068, 1018, 1071,
     1020, 1023, 1017, 1059, 3074, 1044, 1025, 1027, 1046, 1048,
     1035, 1033, 1038, 1039, 1054, 1055, 1052, 1092, 1094, 1087,

     1050, 1045, 1056, 1054, 1047, 1063, 1065, 1073, 1058, 1083,
     1065, 1060, 1060, 1111, 1060, 1075, 3074, 1078, 1067, 1080,
     3074, 1069, 1088, 1073, 1082, 1072, 1064, 1081, 3074, 1125,
     1124, 1124, 3074, 3074, 1083, 1132, 1131, 1131, 1090, 1139,
     1086, 1084, 1104, 1100, 1103, 1100, 1111, 1101, 1097, 3074,
     3074, 1113, 3074, 3074, 1107, 1100, 1095, 1155, 1157, 1141,
     1161, 1128, 1109, 1111, 1130, 1133, 1120, 1117, 1171, 1124,
     1125, 1177, 1140, 1144, 1180, 1182, 1131, 1142, 1140, 1133,
     1149, 1151, 1159, 1191, 1146, 1171, 1152, 1196, 1198, 1151,
     1151, 1163, 1203, 1168, 1157, 1170, 1208, 1161, 1181, 1213,

     1168, 1177, 1167, 1160, 1177, 1221, 1170, 3074, 1196, 1183,
     1188, 1176, 1176, 1177, 1213, 1178, 1185, 3074, 1186, 1183,
     1183, 1191, 1192, 1240, 1196, 1204, 3074, 1195, 1191, 1203,
     1195, 1209, 1195, 1211, 3074, 1205, 1207, 1198, 1205, 3074,
     3074, 1203, 1217, 1205, 1209, 1223, 1221, 1226, 3074, 1214,
     3074, 3074, 1263, 3074, 3074, 1265, 1267, 1269, 1224, 1272,
     1227, 1275, 1239, 1227, 1227, 1245, 1287, 1231, 1251, 1237,
     1292, 1265, 1252, 1257, 1297, 1299, 1250, 1250, 1251, 1287,
     1252, 1260, 1316, 1261, 1259, 1259, 1268, 1319, 1272, 1268,
     1280, 1272, 1286, 1272, 1288, 1328, 1286, 1335, 1288, 1282,

     1338, 1340, 1344, 1346, 1290, 1309, 1349, 1351, 1302, 1307,
     1321, 1319, 1324, 1362, 1312, 1365, 1367, 1337, 1337, 1318,
     1325, 1314, 3074, 3074, 1325, 1336, 1378, 3074, 1381, 1321,
     1344, 1384, 1343, 1388, 1343, 1339, 1345, 1367, 1345, 1363,
     3074, 1357, 1362, 1348, 1349, 1358, 1375, 1360, 1387, 1370,
     1372, 1374, 1371, 1413, 1415, 1421, 1423, 1363, 1425, 1380,
     1428, 1430, 1379, 1433, 1436, 1401, 1387, 1386, 1402, 1389,
     1391, 1445, 1448, 1412, 1416, 1409, 1416, 1422, 1455, 1457,
     1427, 1408, 1415, 1463, 1406, 1466, 1468, 1422, 1433, 1473,
     1475, 1477, 1479, 1484, 1427, 1447, 1491, 1495, 1439, 1436,

     1444, 1469, 1446, 1465, 1501, 1503, 1507, 1462, 1470, 1456,
     1511, 1513, 1519, 1521, 1523, 1468, 1486, 1527, 1478, 1508,
     1491, 1493, 1495, 1533, 1537, 1494, 1539, 1498, 1515, 1498,
     1495, 1526, 1492, 3074, 1549, 1536, 1552, 1554, 1541, 1559,
     1504, 3074, 1561, 1566, 1531, 1570, 1573, 1544, 3074, 1529,
     1523, 3074, 1527, 1520, 1543, 3074, 1530, 1548, 1530, 1551,
     1552, 1536, 3074, 1550, 3074, 1590, 1589, 1589, 1596, 1546,
     1547, 1600, 1602, 1604, 1552, 1589, 1565, 1557, 1575, 1611,
     1613, 1557, 1582, 1565, 1568, 1581, 1626, 1601, 1584, 1581,
     1612, 1633, 1635, 1637, 1639, 1586, 1642, 1644, 1646, 1649,

     1653, 1655, 1660, 1662, 1598, 1664, 1666, 1669, 1671, 1610,
     1618, 1676, 1622, 1680, 1682, 1687, 1618, 1647, 1689, 1692,
     1696, 1659, 1644, 1664, 1666, 1650, 1705, 1664, 1707, 1709,
     1664, 1657, 1663, 1683, 1663, 1681, 1669, 1718, 1721, 1714,
     1725, 1727, 1720, 3074, 1730, 1693, 1735, 1684, 1707, 1684,
     1685, 1706, 3074, 1705, 1689, 1709, 1691, 1694, 3074, 3074,
     3074, 3074, 1712, 1713, 1749, 1751, 1710, 1705, 1719, 1717,
     1708, 1723, 1710, 1732, 1707, 1764, 1766, 1768, 1716, 1731,
     1728, 1725, 1718, 1724, 1744, 1724, 1742, 1779, 1783, 1733,
     1785, 1787, 1789, 1791, 1793, 1795, 1797, 1801, 1803, 1805,

     1750, 1807, 1813, 1779, 1757, 1815, 1819, 1763, 1823, 1786,
     1825, 1827, 1831, 1775, 1798, 1780, 1783, 1836, 1838, 1843,
     1845, 1847, 1849, 1802, 1805, 1815, 1805, 1797, 1803, 1804,
     1863, 1821, 1865, 1821, 1819, 1822, 1830, 1820, 1839, 1818,
     1834, 1831, 1823, 1833, 3074, 1834, 1824, 1879, 1825, 1834,
     1839, 1831, 1839, 1834, 1839, 1833, 1834, 1890, 1892, 1894,
     1857, 1874, 1842, 1860, 1853, 1863, 1853, 1845, 1851, 1853,
     1908, 1910, 1912, 1914, 1916, 1872, 1919, 1882, 1872, 1923,
     1894, 1873, 1928, 1930, 1932, 1891, 1883, 1893, 1937, 1939,
     1941, 1944, 1946, 1948, 1950, 3074, 1917, 1916, 1921, 3074,

     1922, 3074, 1919, 1916, 1923, 1907, 1910, 1909, 1922, 1923,
     1967, 1920, 1916, 1922, 1924, 1930, 1935, 1922, 1937, 1922,
     1923, 1936, 1927, 1927, 1930, 1984, 1933, 1949, 1953, 1950,
     1990, 1956, 1954, 1959, 1995, 1962, 1998, 2000, 1947, 1950,
     1949, 1963, 1964, 2008, 1962, 1958, 1965, 2015, 2017, 2019,
     2021, 1984, 1986, 1988, 3074, 1973, 1981, 1989, 1975, 1976,
     1978, 1986, 1985, 2035, 2037, 1991, 2001, 1993, 1988, 1994,
     1991, 1991, 2009, 2001, 1994, 2014, 2051, 2003, 2015, 2055,
     1999, 2011, 2006, 2060, 2062, 2025, 2028, 2030, 2070, 2072,
     2076, 2078, 2080, 2014, 2019, 2028, 2036, 2035, 2038, 2048,

     2040, 2089, 2040, 3074, 2055, 2058, 2057, 2097, 2056, 2054,
     3074, 2062, 2054, 2103, 3074, 2067, 3074, 2053, 2059, 2108,
     2058, 2057, 2059, 2071, 2079, 2116, 2118, 2065, 2068, 2123,
     2125, 2127, 2090, 2131, 2133, 2083, 2138, 2097, 2142, 2146,
     2148, 2150, 2097, 2098, 2154, 2113, 2108, 2157, 2121, 2162,
     3074, 3074, 2108, 2146, 2165, 2167, 2121, 2117, 3074, 3074,
     3074, 2173, 2122, 2178, 2181, 2141, 2140, 2131, 2136, 2140,
     2188, 2136, 2193, 2195, 2197, 2199, 2201, 2203, 2205, 2212,
     2218, 2220, 2222, 2224, 2142, 2155, 2228, 2230, 2234, 2238,
     2240, 2244, 2246, 2250, 2256, 2171, 2164, 2258, 2178, 2179,

     2262, 2266, 2268, 2270, 2193, 2186, 2272, 2200, 2213, 2201,
     2274, 2277, 2279, 2283, 2289, 2295, 2257, 2259, 2301, 2303,
     2305, 2307, 2309, 2233, 2311, 2313, 2317, 2319, 2323, 2327,
     2329, 2333, 2335, 2339, 2235, 2248, 2260, 3074, 2341, 2343,
     2345, 2245, 2260, 2349, 2351, 2285, 2291, 2353, 2355, 2365,
     2322, 2326, 3074, 3074, 2358, 2360, 2306, 2371, 2373, 2375,
     2377, 2379, 2381, 2293, 2327, 2315, 2383, 2331, 2357, 2388,
     2352, 2353, 2393, 2395, 3074, 3074, 2343, 2398, 2400, 2402,
     2361, 2351, 2371, 2378, 2370, 2357, 2358, 2412, 2379, 2416,
     2369, 2370, 2366, 2382, 2369, 2368, 2369, 2371, 2378, 2375,

     2373, 2376, 2375, 2385, 2386, 2378, 2434, 2436, 2385, 2384,
     2394, 2387, 2388, 2390, 2444, 2446, 2452, 2454, 3074, 2402,
     2396, 2403, 2404, 2460, 2462, 2464, 2404, 2413, 2468, 2470,
     2472, 2476, 2421, 2478, 2480, 2485, 2488, 2490, 2495, 2497,
     2499, 2503, 2505, 2507, 2509, 2514, 2516, 2518, 3074, 2525,
     2530, 2535, 2540, 2545, 2550, 2555, 2560, 2565, 2569, 2574,
     2579
    } ;

static yyconst flex_int16_t yy_def[1962] =
    {   0,
     1950, 1950, 1951, 1951, 1952, 1952, 1953, 1953, 1954, 1954,
     1954, 1954, 1955, 1955, 1956, 1956, 1957, 1957, 1949, 1949,
     1949, 1949,   21, 1949,   23,   23,   23,   23, 1949, 1949,
       23,   23, 1958, 1949, 1959, 1960, 1961, 1949, 1949, 1949,
     1949, 1949, 1949,   21,   23,   23,   23,   23,   23,   29,
     1949,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 1949,   23,   23,   23, 1949,
       23, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949,   23,   23, 1958, 1959, 1960, 1961, 1949,

     1949,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949,   23, 1949,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 1949, 1949, 1949, 1949, 1949, 1949, 1949,

     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,

     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,

     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949,   23,   23,   23,   23,   23,   23,   23, 1949,
     1949,   23,   23,   23,   23,   23, 1949, 1949,   23, 1949,
     1949,   23,   23,   23,   23, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,

     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949,   23,   23,   23,   23,
     1949, 1949,   23,   23,   23,   23,   23, 1949, 1949, 1949,
     1949,   23, 1949, 1949,   23,   23, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,

     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 1949, 1949,   23,   23,   23, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,

     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949,   23,   23,   23, 1949,

     1949,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23, 1949, 1949,   23,   23, 1949, 1949,   23, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,

     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,   23,
     1949, 1949, 1949, 1949,   23,   23, 1949, 1949,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 1949,
     1949,   23, 1949, 1949,   23, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,

     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949,   23, 1949, 1949,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,

     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,

     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949,   23, 1949, 1949,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,

     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,

     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,

     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,

     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949,   23,   23,   23,   23,
       23,   23,   23,   23, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949,   23,   23,   23,   23,   23, 1949, 1949,
     1949, 1949, 1949,   23,   23,   23,   23, 1949, 1949, 1949,

     1949,   23,   23,   23,   23, 1949, 1949, 1949, 1949,   23,
       23,   23,   23, 1949, 1949, 1949, 1949, 1949, 1949,   23,
       23,   23,   23, 1949, 1949, 1949,   23,   23,   23,   23,
     1949, 1949,   23,   23,   23,   23,   23,   23, 1949,   23,
       23,   23,   23,   23,   23,   23,   23,   23,    0, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949
    } ;

static yyconst flex_int16_t yy_nxt[3137] =
    {   0,
       20,   21,   21,   20,   22,   42,   24,   42,   25,   26,
       27,   28,   28,   28,   29,   39,   30,   20, 1949,   39,
       43,   40,   43, 1949,   31,   40,   93,   93,   32,   20,
       21,   21,   20,   22, 1949,   24,  109,   25,   26,   27,
       28,   28,   28,   29,  754,   30,   20, 1949,   47,  755,
       49,   49,   49,   31,   93,   93,  110,   32,   44,   44,
      102, 1949,   45,   52,   45,   46,   47,   48,   49,   49,
       49,   50,   45,   51,  103,   45,   45,   45,   45,   45,
       45,   52,   45,   45,   45,   53,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   54,   55,   56,   45,   45,

       45,   57,   45,   45,   45,   58,   59,   60,   45,   45,
       45,   61,   62,   63,   64,   65,   45,   45,   45,   45,
       45,   47,  145,   49,   49,   49,   45,   45,   45,   45,
       45,   45, 1949,  847, 1949,  106,   52,  113,  146,   67,
       67,  848,   45,   67,   67,  107,   45,   67,   67,   68,
       68,   68,  849,   68,   68,   68,   45,   45,   45,   69,
      850,  114,   45,   69,   71,   71,   45,   45,   45,   71,
       71,  139,   45,   45,   45,   45,   45,   47,   69,   49,
       49,   49,   69,   71,   71,  851,   67,   67,  140,   69,
      141,   47,  852,   49,   49,   49,   68,   68,   68,  143,

      147,  170,  148,   69,  191,  144,   69,  171,   69,   72,
      192,  151,  338,  118,  118,  159,   73,  119,  119,  119,
      339,  152,   69,   74,  340,   69,  153,  154,  199,  160,
      172,  853,  161,  162,  200,  173,   93,   93,  119,  119,
      119,  201,   75,   76,   77,   78,   79,   80,   81,  856,
       82,   83,  226,   84,   85,   86,   87,  202,  227,   88,
       89,   90,   91,   92,  121,  122,  123,  124,  125,  126,
      127,  857,  128,  129,  858,  130,  131,  132,  133,   67,
       67,  134,  135,  136,  137,  138,  164,  260,  165,  119,
      119,  119,  195,  203,  228,  204,  261,  207,  166,  229,

      215,  821,  263,  167,  168,  241,  822,  208,  169,  196,
      232,  197,  209,  210,  216,  233,  264,  217,  218,  220,
      270,  221,  242,  234,   67,   67,  271,  291,  276,  276,
      302,  222,  292,  300,  300,  321,  223,  224,  324,  331,
      293,  225,  277,  378,  322,  332,  859,  303,  301,  352,
      352,  368,  325,  364,  365,  372,  445,  369,  862,  373,
      276,  276,  446,  379,  384,  384,  385,  385,  387,  387,
      389,  389,  353,  407,  277,  395,  395,  397,  397,  449,
      386,  408,  388,  450,  390,  409,  410,  410,  863,  396,
      466,  398,  300,  300,  416,  416,  421,  421,  426,  426,

      867,  411,  432,  432,  441,  442,  467,  301,  455,  455,
      868,  422,  869,  427,  636,  478,  478,  433,  352,  352,
      870,  428,  871,  456,  479,  484,  484,  489,  489,  637,
      480,  457,  384,  384,  485,  507,  508,  517,  517,  412,
      486,  434,  490,  509,  385,  385,  387,  387,  518,  518,
      872,  458,  389,  389,  519,  519,  543,  520,  386,  521,
      388,  395,  395,  873,  526,  526,  390,  527,  712,  528,
      397,  397,  544,  529,  529,  396,  530,  877,  531,  532,
      532,  410,  410,  713,  398,  545,  545,  416,  416,  421,
      421,  554,  554,  533,  557,  557,  411,  426,  426,  559,

      559,  563,  563,  878,  422,  432,  432,  565,  565,  558,
      568,  568,  427,  582,  582,  879,  564,  880,  588,  589,
      433,  455,  455,  592,  592,  569,  590,  883,  583,  884,
      478,  478,  885,  614,  614,  886,  456,  619,  619,  479,
      484,  484,  489,  489,  584,  480,  615,  623,  624,  485,
      620,  517,  517,  518,  518,  486,  887,  490,  519,  519,
      888,  520,  889,  521,  655,  655,  526,  526,  890,  527,
      891,  528,  529,  529,  892,  530,  854,  531,  656,  532,
      532,  662,  662,  855,  663,  893,  664,  674,  674,  545,
      545,  554,  554,  533,  557,  557,  687,  687,  559,  559,

      688,  688,  675,  563,  563,  692,  692,  565,  565,  558,
      568,  568,  695,  695,  894,  689,  696,  696,  564,  582,
      582,  711,  711,  592,  592,  569,  740,  740,  614,  614,
      895,  697,  744,  744,  583,  619,  619,  762,  762,  775,
      775,  615,  756,  756,  780,  780,  698,  699,  620,  655,
      655,  757,  896,  776,  782,  782,  902,  758,  781,  915,
      763,  662,  662,  656,  663,  919,  664,  786,  786,  674,
      674,  796,  796,  807,  807,  687,  687,  688,  688,  809,
      809,  787,  692,  692,  675,  695,  695,  920,  808,  696,
      696,  921,  689,  814,  814,  823,  823,  825,  825,  830,

      830,  711,  711,  926,  697,  841,  841,  927,  844,  844,
      824,  928,  826,  929,  831,  860,  860,  740,  740,  930,
      842,  933,  832,  845,  864,  864,  744,  744,  874,  874,
      934,  881,  881,  865,  756,  756,  843,  762,  762,  866,
      897,  897,  937,  757,  882,  938,  861,  782,  782,  758,
      775,  775,  903,  903,  898,  875,  942,  899,  899,  948,
      900,  876,  901,  905,  776,  906,  904,  949,  907,  780,
      780,  786,  786,  908,  922,  922,  909,  910,  950,  911,
      951,  912,  912,  781,  913,  787,  914,  916,  916,  923,
      917,  931,  918,  924,  924,  796,  796,  952,  932,  935,

      935,  939,  939,  807,  807,  943,  943,  953,  925,  809,
      809,  944,  944,  958,  936,  959,  940,  960,  808,  946,
      946,  814,  814,  954,  954,  963,  945,  823,  823,  961,
      961,  964,  941,  965,  947,  967,  825,  825,  955,  962,
      962,  968,  824,  830,  830,  966,  966,  969,  970,  971,
      956,  826,  972,  972,  976,  974,  957,  977,  831,  975,
      841,  841,  978,  978,  979,  844,  844,  973,  980,  980,
      981,  982,  983,  984,  985,  842,  986,  987,  988,  989,
      845,  990,  991,  992,  993,  994,  860,  860,  995,  996,
      997,  864,  864,  998,  999,  999, 1001, 1002, 1003, 1004,

      865, 1005, 1006, 1007, 1008, 1009,  866, 1000,  874,  874,
     1010, 1012, 1013, 1014, 1014,  881,  881, 1015, 1016, 1017,
     1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,  882, 1026,
     1027, 1028, 1029, 1033, 1011,  897,  897, 1030, 1030, 1034,
     1031, 1035, 1032,  899,  899, 1039,  900, 1042,  901,  898,
      903,  903, 1036, 1036, 1040, 1037, 1041, 1038, 1044, 1046,
     1048, 1049, 1050, 1043,  904, 1047,  912,  912, 1051,  913,
     1052,  914,  916,  916, 1053,  917, 1045,  918, 1054, 1055,
     1056, 1057,  922,  922, 1058, 1058,  924,  924, 1059, 1059,
     1060, 1061, 1062, 1063, 1064, 1065, 1066,  923, 1067, 1068,

     1070,  925,  935,  935, 1069, 1069, 1071,  939,  939, 1072,
     1072, 1073, 1074,  943,  943,  944,  944,  936, 1075, 1075,
      946,  946,  940, 1076, 1076, 1077, 1078, 1079, 1080, 1081,
      945, 1082, 1083,  954,  954,  947, 1084, 1084, 1085, 1086,
     1088, 1088, 1090, 1091,  961,  961,  962,  962,  955, 1092,
     1093, 1094,  966,  966, 1095, 1089, 1096, 1097, 1098, 1099,
      972,  972, 1101, 1087, 1100, 1100, 1102, 1103, 1104,  978,
      978, 1105,  980,  980, 1106,  973, 1107, 1108, 1109, 1110,
     1112, 1113, 1114, 1115, 1116, 1117, 1111, 1118, 1119, 1120,
     1121, 1122, 1123, 1124, 1124,  999,  999, 1125, 1126, 1127,

     1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1000, 1136,
     1137, 1138, 1014, 1014, 1139, 1140, 1141, 1142, 1143, 1144,
     1145, 1146, 1147, 1148, 1149, 1150, 1030, 1030, 1151, 1031,
     1152, 1032, 1153, 1036, 1036, 1154, 1037, 1155, 1038, 1156,
     1157, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
     1167, 1168, 1169, 1170, 1158, 1171, 1058, 1058, 1059, 1059,
     1172, 1173, 1175, 1175, 1177, 1178, 1179, 1180, 1174, 1181,
     1182, 1183, 1069, 1069, 1184, 1185, 1186, 1176, 1072, 1072,
     1187, 1075, 1075, 1076, 1076, 1188, 1189, 1190, 1191, 1192,
     1193, 1194, 1084, 1084, 1195, 1196, 1197, 1088, 1088, 1198,

     1198, 1199, 1200, 1201, 1202, 1202, 1204, 1205, 1206, 1207,
     1207, 1209, 1089, 1210, 1100, 1100, 1211, 1212, 1213, 1203,
     1214, 1215, 1216, 1216, 1208, 1218, 1219, 1220, 1221, 1222,
     1223, 1224, 1225, 1226, 1227, 1228, 1229, 1217, 1230, 1231,
     1232, 1124, 1124, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
     1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249,
     1250, 1251, 1252, 1253, 1254, 1254, 1256, 1256, 1157, 1157,
     1259, 1259, 1260, 1261, 1261, 1263, 1264, 1264, 1255, 1267,
     1257, 1270, 1158, 1268, 1269, 1271, 1276, 1262, 1272, 1272,
     1265, 1277, 1278, 1279, 1279, 1281, 1282, 1283, 1175, 1175,

     1284, 1284, 1273, 1285, 1286, 1287, 1288, 1289, 1280, 1290,
     1293, 1274, 1294, 1176, 1295, 1266, 1296, 1291, 1291, 1258,
     1297, 1297, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306,
     1306, 1275, 1292, 1308, 1309, 1298, 1198, 1198, 1310, 1311,
     1311, 1202, 1202, 1316, 1307, 1313, 1313, 1314, 1314, 1317,
     1207, 1207, 1318, 1318, 1312, 1319, 1203, 1320, 1321, 1322,
     1323, 1326, 1315, 1324, 1324, 1208, 1216, 1216, 1327, 1327,
     1328, 1329, 1330, 1331, 1332, 1333, 1334, 1341, 1325, 1335,
     1335, 1217, 1338, 1338, 1342, 1343, 1343, 1345, 1336, 1346,
     1346, 1339, 1348, 1349, 1337, 1350, 1351, 1340, 1352, 1353,

     1344, 1354, 1355, 1356, 1347, 1357, 1358, 1359, 1360, 1361,
     1362, 1363, 1364, 1365, 1254, 1254, 1366, 1366, 1370, 1367,
     1371, 1368, 1256, 1256, 1369, 1369, 1259, 1259, 1255, 1261,
     1261, 1372, 1372, 1373, 1264, 1264, 1257, 1374, 1374, 1375,
     1376, 1377, 1378, 1262, 1379, 1380, 1272, 1272, 1265, 1381,
     1381, 1382, 1383, 1384, 1385, 1386, 1279, 1279, 1387, 1387,
     1273, 1388, 1389, 1390, 1284, 1284, 1391, 1392, 1392, 1394,
     1394, 1280, 1396, 1397, 1398, 1398, 1291, 1291, 1400, 1400,
     1401, 1401, 1393, 1405, 1395, 1403, 1403, 1406, 1408, 1399,
     1409, 1292, 1297, 1297, 1410, 1402, 1407, 1407, 1411, 1412,

     1404, 1413, 1414, 1414, 1306, 1306, 1417, 1298, 1416, 1416,
     1418, 1419, 1311, 1311, 1420, 1420, 1422, 1415, 1423, 1307,
     1313, 1313, 1314, 1314, 1421, 1421, 1424, 1312, 1318, 1318,
     1425, 1426, 1427, 1428, 1324, 1324, 1430, 1315, 1429, 1429,
     1327, 1327, 1431, 1432, 1434, 1435, 1436, 1433, 1437, 1325,
     1335, 1335, 1438, 1439, 1439, 1338, 1338, 1441, 1444, 1336,
     1442, 1442, 1343, 1343, 1339, 1337, 1440, 1445, 1445, 1446,
     1340, 1346, 1346, 1443, 1447, 1447, 1448, 1344, 1449, 1450,
     1451, 1452, 1453, 1454, 1455, 1456, 1347, 1457, 1458, 1459,
     1460, 1366, 1366, 1461, 1367, 1462, 1368, 1369, 1369, 1463,

     1464, 1372, 1372, 1465, 1465, 1374, 1374, 1467, 1468, 1473,
     1474, 1475, 1476, 1476, 1381, 1381, 1478, 1466, 1469, 1479,
     1470, 1471, 1480, 1481, 1472, 1482, 1477, 1387, 1387, 1483,
     1485, 1486, 1487, 1484, 1392, 1392, 1488, 1488, 1394, 1394,
     1489, 1489, 1490, 1491, 1491, 1398, 1398, 1493, 1493, 1393,
     1400, 1400, 1496, 1395, 1401, 1401, 1494, 1494, 1492, 1504,
     1399, 1403, 1403, 1495, 1495, 1497, 1497, 1407, 1407, 1402,
     1499, 1499, 1502, 1502, 1505, 1508, 1404, 1506, 1506, 1510,
     1498, 1414, 1414, 1509, 1509, 1500, 1511, 1503, 1416, 1416,
     1512, 1512, 1507, 1420, 1420, 1514, 1415, 1421, 1421, 1515,

     1516, 1501, 1517, 1518, 1521, 1513, 1519, 1519, 1429, 1429,
     1522, 1522, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531,
     1531, 1520, 1439, 1439, 1532, 1523, 1533, 1533, 1442, 1442,
     1534, 1445, 1445, 1535, 1536, 1440, 1447, 1447, 1537, 1538,
     1539, 1443, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547,
     1465, 1465, 1548, 1548, 1549, 1550, 1551, 1552, 1553, 1554,
     1555, 1556, 1557, 1561, 1466, 1476, 1476, 1558, 1558, 1559,
     1559, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1477,
     1488, 1488, 1570, 1560, 1489, 1489, 1491, 1491, 1571, 1571,
     1493, 1493, 1494, 1494, 1495, 1495, 1572, 1572, 1497, 1497,

     1576, 1492, 1574, 1574, 1499, 1499, 1575, 1575, 1502, 1502,
     1578, 1573, 1579, 1498, 1577, 1577, 1506, 1506, 1581, 1500,
     1580, 1580, 1582, 1503, 1509, 1509, 1583, 1583, 1512, 1512,
     1586, 1507, 1585, 1585, 1587, 1588, 1589, 1590, 1590, 1519,
     1519, 1584, 1596, 1513, 1592, 1592, 1593, 1593, 1522, 1522,
     1595, 1595, 1591, 1597, 1520, 1598, 1599, 1600, 1601, 1602,
     1603, 1594, 1604, 1523, 1531, 1531, 1533, 1533, 1605, 1606,
     1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616,
     1548, 1548, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624,
     1625, 1558, 1558, 1559, 1559, 1626, 1626, 1627, 1628, 1630,

     1631, 1632, 1629, 1633, 1634, 1635, 1636, 1560, 1637, 1571,
     1571, 1572, 1572, 1638, 1638, 1574, 1574, 1575, 1575, 1639,
     1577, 1577, 1640, 1641, 1580, 1580, 1573, 1642, 1643, 1583,
     1583, 1644, 1644, 1585, 1585, 1645, 1646, 1647, 1648, 1648,
     1590, 1590, 1650, 1650, 1584, 1592, 1592, 1593, 1593, 1651,
     1651, 1595, 1595, 1649, 1652, 1591, 1653, 1654, 1655, 1656,
     1657, 1658, 1594, 1659, 1660, 1661, 1662, 1663, 1664, 1664,
     1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675,
     1676, 1677, 1678, 1665, 1679, 1626, 1626, 1680, 1681, 1682,
     1683, 1684, 1684, 1686, 1687, 1688, 1689, 1689, 1691, 1692,

     1692, 1638, 1638, 1694, 1695, 1696, 1685, 1697, 1698, 1644,
     1644, 1690, 1699, 1700, 1693, 1701, 1648, 1648, 1702, 1702,
     1650, 1650, 1651, 1651, 1703, 1704, 1705, 1706, 1707, 1708,
     1709, 1649, 1710, 1711, 1712, 1713, 1664, 1664, 1714, 1714,
     1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724,
     1725, 1665, 1726, 1726, 1728, 1729, 1730, 1730, 1732, 1733,
     1734, 1684, 1684, 1735, 1735, 1736, 1727, 1737, 1738, 1743,
     1731, 1689, 1689, 1739, 1739, 1744, 1685, 1740, 1740, 1692,
     1692, 1742, 1742, 1745, 1746, 1747, 1690, 1748, 1749, 1750,
     1702, 1702, 1741, 1751, 1693, 1752, 1753, 1754, 1755, 1755,

     1757, 1758, 1759, 1760, 1714, 1714, 1761, 1762, 1763, 1764,
     1764, 1766, 1767, 1756, 1768, 1769, 1770, 1726, 1726, 1771,
     1771, 1772, 1773, 1765, 1730, 1730, 1774, 1774, 1775, 1775,
     1777, 1727, 1778, 1778, 1735, 1735, 1780, 1783, 1731, 1781,
     1781, 1785, 1776, 1739, 1739, 1786, 1779, 1740, 1740, 1784,
     1784, 1742, 1742, 1789, 1782, 1787, 1787, 1790, 1791, 1791,
     1793, 1796, 1741, 1794, 1794, 1797, 1755, 1755, 1798, 1798,
     1788, 1799, 1800, 1792, 1801, 1801, 1803, 1805, 1795, 1764,
     1764, 1756, 1804, 1804, 1806, 1807, 1808, 1809, 1802, 1771,
     1771, 1810, 1824, 1765, 1811, 1811, 1774, 1774, 1775, 1775,

     1813, 1813, 1814, 1814, 1778, 1778, 1816, 1816, 1812, 1817,
     1825, 1818, 1776, 1819, 1819, 1835, 1815, 1836, 1779, 1781,
     1781, 1821, 1821, 1822, 1822, 1784, 1784, 1837, 1820, 1787,
     1787, 1826, 1826, 1838, 1782, 1827, 1827, 1842, 1823, 1829,
     1829, 1791, 1791, 1843, 1788, 1831, 1831, 1832, 1832, 1846,
     1828, 1794, 1794, 1847, 1830, 1848, 1792, 1834, 1834, 1798,
     1798, 1853, 1833, 1801, 1801, 1854, 1795, 1839, 1839, 1840,
     1840, 1804, 1804, 1844, 1844, 1811, 1811, 1802, 1849, 1849,
     1813, 1813, 1857, 1841, 1814, 1814, 1864, 1845, 1865, 1812,
     1850, 1850, 1866, 1851, 1868, 1852, 1816, 1816, 1815, 1817,

     1869, 1818, 1819, 1819, 1855, 1855, 1821, 1821, 1822, 1822,
     1856, 1856, 1858, 1858, 1826, 1826, 1871, 1820, 1827, 1827,
     1861, 1861, 1872, 1823, 1829, 1829, 1875, 1859, 1862, 1862,
     1831, 1831, 1876, 1828, 1832, 1832, 1863, 1863, 1877, 1830,
     1834, 1834, 1839, 1839, 1840, 1840, 1867, 1867, 1881, 1833,
     1844, 1844, 1870, 1870, 1873, 1873, 1849, 1849, 1841, 1855,
     1855, 1856, 1856, 1882, 1845, 1860, 1850, 1850, 1874, 1851,
     1883, 1852, 1858, 1858, 1878, 1878, 1879, 1879, 1861, 1861,
     1862, 1862, 1863, 1863, 1867, 1867, 1884, 1859, 1885, 1870,
     1870, 1880, 1886, 1887, 1873, 1873, 1888, 1888, 1889, 1878,

     1878, 1879, 1879, 1890, 1890, 1891, 1892, 1893, 1874, 1894,
     1895, 1896, 1897, 1888, 1888, 1898, 1880, 1890, 1890, 1899,
     1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909,
     1910, 1911, 1912, 1913, 1914, 1915, 1915, 1917, 1917, 1919,
     1920, 1921, 1922, 1923, 1924, 1915, 1915, 1925, 1925, 1927,
     1916, 1928, 1918, 1917, 1917, 1926, 1926, 1929, 1930, 1933,
     1916, 1931, 1931, 1925, 1925, 1926, 1926, 1934, 1918, 1935,
     1935, 1937, 1937, 1931, 1931, 1940, 1932, 1939, 1939, 1941,
     1941, 1935, 1935, 1936,  846, 1938, 1943, 1943, 1932, 1937,
     1937, 1944, 1944, 1942,  840, 1936, 1939, 1939, 1945, 1945,

     1941, 1941,  839, 1938, 1947, 1947, 1943, 1943, 1944, 1944,
     1945, 1945, 1946,  838, 1942, 1948, 1948, 1947, 1947, 1948,
     1948,  837,  836,  835, 1946,   23,   23,   23,   23,   23,
       33,   33,   33,   33,   33,   35,   35,   35,   35,   35,
       36,   36,   36,   36,   36,   34,   34,   34,   34,   34,
       37,   37,   37,   37,   37,   38,   38,   38,   38,   38,
       41,   41,   41,   41,   41,   96,   96,   96,   96,   97,
      834,   97,   97,   97,   98,   98,  833,   98,   98,   99,
       99,   99,  829,   99,  828,  827,  820,  819,  818,  817,
      816,  815,  813,  812,  811,  810,  806,  805,  804,  803,

      802,  801,  800,  799,  798,  797,  795,  794,  793,  792,
      791,  790,  789,  788,  785,  784,  783,  779,  778,  777,
      774,  773,  772,  771,  770,  769,  768,  767,  766,  765,
      764,  761,  760,  759,  753,  752,  751,  750,  749,  748,
      747,  746,  745,  743,  742,  741,  739,  738,  737,  736,
      735,  734,  733,  732,  731,  730,  729,  728,  727,  726,
      725,  724,  723,  722,  721,  720,  719,  718,  717,  716,
      715,  714,  710,  709,  708,  707,  706,  705,  704,  703,
      702,  701,  700,  694,  693,  691,  690,  686,  685,  684,
      683,  682,  681,  680,  679,  678,  677,  676,  673,  672,

      671,  670,  669,  668,  667,  666,  665,  661,  660,  659,
      658,  657,  654,  653,  652,  651,  650,  649,  648,  647,
      646,  645,  644,  643,  642,  641,  640,  639,  638,  635,
      634,  633,  632,  631,  630,  629,  628,  627,  626,  625,
      622,  621,  618,  617,  616,  613,  612,  611,  610,  609,
      608,  607,  606,  605,  604,  603,  602,  601,  600,  599,
      598,  597,  596,  595,  594,  593,  591,  587,  586,  585,
      581,  580,  579,  578,  577,  576,  575,  574,  573,  572,
      571,  570,  567,  566,  562,  561,  560,  556,  555,  553,
      552,  551,  550,  549,  548,  547,  546,  542,  541,  540,

      539,  538,  537,  536,  535,  534,  525,  524,  523,  522,
      516,  515,  514,  513,  512,  511,  510,  506,  505,  504,
      503,  502,  501,  500,  499,  498,  497,  496,  495,  494,
      493,  492,  491,  488,  487,  483,  482,  481,  477,  476,
      475,  474,  473,  472,  471,  470,  469,  468,  465,  464,
      463,  462,  461,  460,  459,  454,  453,  452,  451,  448,
      447,  444,  443,  440,  439,  438,  437,  436,  435,  431,
      430,  429,  425,  424,  423,  420,  419,  418,  417,  415,
      414,  413,  406,  405,  404,  403,  402,  401,  400,  399,
      394,  393,  392,  391,  383,  382,  381,  380,  377,  376,

      375,  374,  371,  370,  367,  366,  363,  362,  361,  360,
      359,  358,  357,  356,  355,  354,  351,  350,  349,  348,
      347,  346,  345,  344,  343,  342,  341,  337,  336,  335,
      334,  333,  330,  329,  328,  327,  326,  323,  320,  319,
      318,  317,  316,  315,  314,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  299,  298,  297,  296,  295,
      294,  290,  289,  288,  287,  286,  285,  284,  283,  282,
      281,  280,  279,  278,  275,  274,  273,  272,  269,  268,
      267,  266,  265,  262,  259,  258,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  248,  247,  246,  245,  244,

      243,  240,  239,  238,  237,  236,  235,  231,  230,  219,
      214,  213,  212,  211,  206,  205,  198,  194,  193,  190,
      189,  188,  187,  186,  185,  184,  183,  182,  181,  180,
      179,  178,  177,  176,  175,  175,  174,  163,  158,  157,
      156,  155,  150,  149,  142,  120,  117,  116,  115,  112,
      111,  108,  105,  104,   95,   94,   70,  101,  100,   95,
       94,   70,   66,   66, 1949,   34,   34,   34,   34,   34,
       34,   34,   34,   19, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,

     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949
    } ;

static yyconst flex_int16_t yy_chk[3137] =
    {   0,
        1,    1,    1,    1,    1,   17,    1,   18,    1,    1,
        1,    1,    1,    1,    1,   15,    1,    1,    0,   16,
       17,   15,   18,    0,    1,   16,   30,   30,    1,    2,
        2,    2,    2,    2,    0,    2,   59,    2,    2,    2,
        2,    2,    2,    2,  629,    2,    2,   50,   25,  629,
       25,   25,   25,    2,   51,   51,   59,    2,   21,   21,
       54,   50,   21,   25,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   54,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   23,
       23,   46,   78,   46,   46,   46,   23,   23,   23,   23,
       23,   23,   23,  723,   23,   57,   46,   62,   78,   26,
       26,  724,   23,   47,   47,   57,   23,   67,   67,   26,
       26,   26,  727,   47,   47,   47,   23,   23,   23,   26,
      728,   62,   23,   47,   71,   71,   23,   23,   23,   28,
       28,   75,   23,   23,   23,   23,   23,   28,   26,   28,
       28,   28,   47,   49,   49,  729,   68,   68,   75,   28,
       75,   49,  730,   49,   49,   49,   68,   68,   68,   77,

       79,   90,   79,   49,  116,   77,   68,   90,   28,   29,
      116,   82,  236,   69,   69,   87,   29,   69,   69,   69,
      236,   82,   49,   29,  236,   68,   82,   82,  123,   87,
       91,  731,   87,   87,  123,   91,   93,   93,  118,  118,
      118,  124,   29,   29,   29,   29,   29,   29,   29,  733,
       29,   29,  136,   29,   29,   29,   29,  124,  136,   29,
       29,   29,   29,   29,   73,   73,   73,   73,   73,   73,
       73,  734,   73,   73,  736,   73,   73,   73,   73,  119,
      119,   73,   73,   73,   73,   73,   89,  166,   89,  119,
      119,  119,  121,  125,  137,  125,  166,  128,   89,  137,

      133,  704,  168,   89,   89,  148,  704,  128,   89,  121,
      140,  121,  128,  128,  133,  140,  168,  133,  133,  135,
      174,  135,  148,  140,  175,  175,  174,  196,  181,  181,
      204,  135,  196,  203,  203,  222,  135,  135,  224,  230,
      196,  135,  181,  271,  222,  230,  737,  204,  203,  249,
      249,  263,  224,  260,  260,  266,  324,  263,  739,  266,
      276,  276,  324,  271,  277,  277,  278,  278,  279,  279,
      280,  280,  249,  295,  276,  285,  285,  286,  286,  327,
      278,  295,  279,  327,  280,  295,  296,  296,  741,  285,
      340,  286,  300,  300,  301,  301,  306,  306,  310,  310,

      745,  296,  314,  314,  321,  321,  340,  300,  332,  332,
      746,  306,  747,  310,  503,  351,  351,  314,  352,  352,
      748,  310,  749,  332,  351,  356,  356,  359,  359,  503,
      351,  332,  384,  384,  356,  376,  376,  386,  386,  296,
      356,  314,  359,  376,  385,  385,  387,  387,  388,  388,
      750,  332,  389,  389,  390,  390,  409,  390,  385,  390,
      387,  395,  395,  751,  396,  396,  389,  396,  584,  396,
      397,  397,  409,  398,  398,  395,  398,  753,  398,  399,
      399,  410,  410,  584,  397,  411,  411,  416,  416,  421,
      421,  422,  422,  399,  425,  425,  410,  426,  426,  427,

      427,  431,  431,  754,  421,  432,  432,  433,  433,  425,
      436,  436,  426,  449,  449,  755,  431,  757,  453,  453,
      432,  455,  455,  456,  456,  436,  453,  759,  449,  760,
      478,  478,  761,  480,  480,  763,  455,  486,  486,  478,
      484,  484,  489,  489,  449,  478,  480,  491,  491,  484,
      486,  517,  517,  518,  518,  484,  764,  489,  519,  519,
      765,  519,  766,  519,  524,  524,  526,  526,  767,  526,
      769,  526,  529,  529,  769,  529,  732,  529,  524,  532,
      532,  533,  533,  732,  533,  770,  533,  543,  543,  545,
      545,  554,  554,  532,  557,  557,  558,  558,  559,  559,

      560,  560,  543,  563,  563,  564,  564,  565,  565,  557,
      568,  568,  569,  569,  771,  560,  570,  570,  563,  582,
      582,  583,  583,  592,  592,  568,  613,  613,  614,  614,
      772,  570,  618,  618,  582,  619,  619,  635,  635,  648,
      648,  614,  630,  630,  654,  654,  570,  570,  619,  655,
      655,  630,  773,  648,  656,  656,  777,  630,  654,  783,
      635,  662,  662,  655,  662,  788,  662,  665,  665,  674,
      674,  675,  675,  686,  686,  687,  687,  688,  688,  689,
      689,  665,  692,  692,  674,  695,  695,  789,  686,  696,
      696,  790,  688,  697,  697,  705,  705,  706,  706,  710,

      710,  711,  711,  793,  696,  720,  720,  794,  721,  721,
      705,  795,  706,  797,  710,  738,  738,  740,  740,  798,
      720,  800,  710,  721,  742,  742,  744,  744,  752,  752,
      801,  758,  758,  742,  756,  756,  720,  762,  762,  742,
      774,  774,  803,  756,  758,  804,  738,  782,  782,  756,
      775,  775,  778,  778,  774,  752,  806,  776,  776,  812,
      776,  752,  776,  779,  775,  779,  778,  813,  779,  780,
      780,  786,  786,  779,  791,  791,  779,  779,  815,  779,
      816,  781,  781,  780,  781,  786,  781,  787,  787,  791,
      787,  799,  787,  792,  792,  796,  796,  817,  799,  802,

      802,  805,  805,  807,  807,  808,  808,  818,  792,  809,
      809,  810,  810,  820,  802,  821,  805,  822,  807,  811,
      811,  814,  814,  819,  819,  827,  810,  823,  823,  824,
      824,  828,  805,  829,  811,  832,  825,  825,  819,  826,
      826,  833,  823,  830,  830,  831,  831,  834,  835,  836,
      819,  825,  837,  837,  839,  838,  819,  840,  830,  838,
      841,  841,  842,  842,  843,  844,  844,  837,  845,  845,
      846,  847,  848,  849,  850,  841,  851,  852,  853,  854,
      844,  855,  856,  857,  858,  859,  860,  860,  861,  862,
      863,  864,  864,  865,  866,  866,  867,  868,  869,  870,

      864,  871,  871,  872,  873,  875,  864,  866,  874,  874,
      876,  878,  879,  880,  880,  881,  881,  882,  883,  884,
      885,  886,  887,  888,  889,  890,  891,  892,  881,  893,
      894,  895,  896,  900,  876,  897,  897,  898,  898,  901,
      898,  902,  898,  899,  899,  905,  899,  907,  899,  897,
      903,  903,  904,  904,  906,  904,  906,  904,  908,  909,
      910,  911,  913,  907,  903,  909,  912,  912,  914,  912,
      915,  912,  916,  916,  917,  916,  908,  916,  918,  919,
      920,  921,  922,  922,  923,  923,  924,  924,  925,  925,
      926,  927,  928,  929,  930,  931,  932,  922,  933,  934,

      937,  924,  935,  935,  936,  936,  938,  939,  939,  940,
      940,  941,  942,  943,  943,  944,  944,  935,  945,  945,
      946,  946,  939,  947,  947,  948,  949,  950,  951,  951,
      944,  952,  953,  954,  954,  946,  955,  955,  956,  957,
      958,  958,  959,  960,  961,  961,  962,  962,  954,  963,
      964,  965,  966,  966,  967,  958,  968,  969,  970,  971,
      972,  972,  974,  957,  973,  973,  975,  976,  977,  978,
      978,  979,  980,  980,  981,  972,  982,  983,  984,  984,
      986,  987,  988,  989,  990,  991,  984,  992,  993,  994,
      995,  996,  997,  998,  998,  999,  999, 1000, 1001, 1002,

     1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,  999, 1011,
     1012, 1013, 1014, 1014, 1015, 1016, 1018, 1019, 1020, 1022,
     1023, 1024, 1025, 1026, 1027, 1028, 1030, 1030, 1031, 1030,
     1032, 1030, 1035, 1036, 1036, 1037, 1036, 1038, 1036, 1039,
     1040, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
     1049, 1052, 1055, 1056, 1040, 1057, 1058, 1058, 1059, 1059,
     1060, 1060, 1061, 1061, 1062, 1063, 1064, 1065, 1060, 1066,
     1067, 1068, 1069, 1069, 1070, 1071, 1073, 1061, 1072, 1072,
     1074, 1075, 1075, 1076, 1076, 1077, 1078, 1079, 1080, 1081,
     1082, 1083, 1084, 1084, 1085, 1086, 1087, 1088, 1088, 1089,

     1089, 1090, 1091, 1092, 1093, 1093, 1094, 1095, 1096, 1097,
     1097, 1098, 1088, 1099, 1100, 1100, 1101, 1102, 1103, 1093,
     1104, 1105, 1106, 1106, 1097, 1107, 1109, 1110, 1111, 1112,
     1113, 1114, 1115, 1116, 1117, 1119, 1120, 1106, 1121, 1122,
     1123, 1124, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132,
     1133, 1134, 1136, 1137, 1138, 1139, 1142, 1143, 1144, 1145,
     1146, 1147, 1148, 1150, 1153, 1153, 1156, 1156, 1157, 1157,
     1158, 1158, 1159, 1160, 1160, 1161, 1162, 1162, 1153, 1163,
     1156, 1165, 1157, 1164, 1164, 1166, 1168, 1160, 1167, 1167,
     1162, 1169, 1170, 1171, 1171, 1172, 1173, 1174, 1175, 1175,

     1176, 1176, 1167, 1177, 1178, 1179, 1180, 1181, 1171, 1182,
     1184, 1167, 1185, 1175, 1186, 1162, 1187, 1183, 1183, 1156,
     1188, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
     1196, 1167, 1183, 1197, 1199, 1188, 1198, 1198, 1200, 1201,
     1201, 1202, 1202, 1205, 1196, 1203, 1203, 1204, 1204, 1206,
     1207, 1207, 1208, 1208, 1201, 1209, 1202, 1210, 1211, 1212,
     1213, 1215, 1204, 1214, 1214, 1207, 1216, 1216, 1217, 1217,
     1218, 1219, 1220, 1221, 1222, 1225, 1226, 1230, 1214, 1227,
     1227, 1216, 1229, 1229, 1231, 1232, 1232, 1233, 1227, 1234,
     1234, 1229, 1235, 1236, 1227, 1237, 1238, 1229, 1239, 1240,

     1232, 1242, 1243, 1244, 1234, 1245, 1246, 1247, 1248, 1249,
     1250, 1251, 1252, 1253, 1254, 1254, 1255, 1255, 1258, 1255,
     1260, 1255, 1256, 1256, 1257, 1257, 1259, 1259, 1254, 1261,
     1261, 1262, 1262, 1263, 1264, 1264, 1256, 1265, 1265, 1266,
     1267, 1268, 1269, 1261, 1270, 1271, 1272, 1272, 1264, 1273,
     1273, 1274, 1275, 1276, 1277, 1278, 1279, 1279, 1280, 1280,
     1272, 1281, 1282, 1283, 1284, 1284, 1285, 1286, 1286, 1287,
     1287, 1279, 1288, 1289, 1290, 1290, 1291, 1291, 1292, 1292,
     1293, 1293, 1286, 1295, 1287, 1294, 1294, 1296, 1299, 1290,
     1300, 1291, 1297, 1297, 1301, 1293, 1298, 1298, 1302, 1303,

     1294, 1304, 1305, 1305, 1306, 1306, 1308, 1297, 1307, 1307,
     1309, 1310, 1311, 1311, 1312, 1312, 1316, 1305, 1317, 1306,
     1313, 1313, 1314, 1314, 1315, 1315, 1319, 1311, 1318, 1318,
     1320, 1321, 1322, 1323, 1324, 1324, 1326, 1314, 1325, 1325,
     1327, 1327, 1328, 1329, 1330, 1331, 1332, 1329, 1333, 1324,
     1335, 1335, 1336, 1337, 1337, 1338, 1338, 1339, 1341, 1335,
     1340, 1340, 1343, 1343, 1338, 1335, 1337, 1344, 1344, 1345,
     1338, 1346, 1346, 1340, 1347, 1347, 1348, 1343, 1350, 1351,
     1353, 1354, 1355, 1357, 1358, 1359, 1346, 1360, 1361, 1362,
     1364, 1366, 1366, 1367, 1366, 1368, 1366, 1369, 1369, 1370,

     1371, 1372, 1372, 1373, 1373, 1374, 1374, 1375, 1376, 1377,
     1378, 1379, 1380, 1380, 1381, 1381, 1382, 1373, 1376, 1383,
     1376, 1376, 1384, 1385, 1376, 1386, 1380, 1387, 1387, 1388,
     1389, 1390, 1391, 1388, 1392, 1392, 1393, 1393, 1394, 1394,
     1395, 1395, 1396, 1397, 1397, 1398, 1398, 1399, 1399, 1392,
     1400, 1400, 1405, 1394, 1401, 1401, 1402, 1402, 1397, 1410,
     1398, 1403, 1403, 1404, 1404, 1406, 1406, 1407, 1407, 1401,
     1408, 1408, 1409, 1409, 1411, 1413, 1403, 1412, 1412, 1417,
     1406, 1414, 1414, 1415, 1415, 1408, 1418, 1409, 1416, 1416,
     1419, 1419, 1412, 1420, 1420, 1422, 1414, 1421, 1421, 1423,

     1424, 1408, 1425, 1426, 1428, 1419, 1427, 1427, 1429, 1429,
     1430, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438,
     1438, 1427, 1439, 1439, 1440, 1430, 1441, 1441, 1442, 1442,
     1443, 1445, 1445, 1446, 1448, 1439, 1447, 1447, 1449, 1450,
     1451, 1442, 1452, 1454, 1455, 1456, 1457, 1458, 1463, 1464,
     1465, 1465, 1466, 1466, 1467, 1468, 1469, 1470, 1471, 1472,
     1473, 1474, 1475, 1479, 1465, 1476, 1476, 1477, 1477, 1478,
     1478, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1476,
     1488, 1488, 1490, 1478, 1489, 1489, 1491, 1491, 1492, 1492,
     1493, 1493, 1494, 1494, 1495, 1495, 1496, 1496, 1497, 1497,

     1501, 1491, 1498, 1498, 1499, 1499, 1500, 1500, 1502, 1502,
     1504, 1496, 1505, 1497, 1503, 1503, 1506, 1506, 1508, 1499,
     1507, 1507, 1510, 1502, 1509, 1509, 1511, 1511, 1512, 1512,
     1514, 1506, 1513, 1513, 1515, 1516, 1517, 1518, 1518, 1519,
     1519, 1511, 1524, 1512, 1520, 1520, 1521, 1521, 1522, 1522,
     1523, 1523, 1518, 1525, 1519, 1526, 1527, 1528, 1529, 1530,
     1532, 1521, 1534, 1522, 1531, 1531, 1533, 1533, 1535, 1536,
     1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1546, 1547,
     1548, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556,
     1557, 1558, 1558, 1559, 1559, 1560, 1560, 1561, 1562, 1563,

     1564, 1565, 1562, 1566, 1567, 1568, 1569, 1559, 1570, 1571,
     1571, 1572, 1572, 1573, 1573, 1574, 1574, 1575, 1575, 1576,
     1577, 1577, 1578, 1579, 1580, 1580, 1572, 1581, 1582, 1583,
     1583, 1584, 1584, 1585, 1585, 1586, 1587, 1588, 1589, 1589,
     1590, 1590, 1591, 1591, 1583, 1592, 1592, 1593, 1593, 1594,
     1594, 1595, 1595, 1589, 1597, 1590, 1598, 1599, 1601, 1603,
     1604, 1605, 1593, 1606, 1607, 1608, 1609, 1610, 1611, 1611,
     1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621,
     1622, 1623, 1624, 1611, 1625, 1626, 1626, 1627, 1628, 1629,
     1630, 1631, 1631, 1632, 1633, 1634, 1635, 1635, 1636, 1637,

     1637, 1638, 1638, 1639, 1640, 1641, 1631, 1642, 1643, 1644,
     1644, 1635, 1645, 1646, 1637, 1647, 1648, 1648, 1649, 1649,
     1650, 1650, 1651, 1651, 1652, 1653, 1654, 1656, 1657, 1658,
     1659, 1648, 1660, 1661, 1662, 1663, 1664, 1664, 1665, 1665,
     1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675,
     1676, 1664, 1677, 1677, 1678, 1679, 1680, 1680, 1681, 1682,
     1683, 1684, 1684, 1685, 1685, 1686, 1677, 1687, 1688, 1694,
     1680, 1689, 1689, 1690, 1690, 1695, 1684, 1691, 1691, 1692,
     1692, 1693, 1693, 1696, 1697, 1698, 1689, 1699, 1700, 1701,
     1702, 1702, 1691, 1703, 1692, 1705, 1706, 1707, 1708, 1708,

     1709, 1710, 1712, 1713, 1714, 1714, 1716, 1718, 1719, 1720,
     1720, 1721, 1722, 1708, 1723, 1724, 1725, 1726, 1726, 1727,
     1727, 1728, 1729, 1720, 1730, 1730, 1731, 1731, 1732, 1732,
     1733, 1726, 1734, 1734, 1735, 1735, 1736, 1738, 1730, 1737,
     1737, 1743, 1732, 1739, 1739, 1744, 1734, 1740, 1740, 1741,
     1741, 1742, 1742, 1746, 1737, 1745, 1745, 1747, 1748, 1748,
     1749, 1753, 1740, 1750, 1750, 1754, 1755, 1755, 1756, 1756,
     1745, 1757, 1758, 1748, 1762, 1762, 1763, 1766, 1750, 1764,
     1764, 1755, 1765, 1765, 1767, 1768, 1769, 1770, 1762, 1771,
     1771, 1772, 1785, 1764, 1773, 1773, 1774, 1774, 1775, 1775,

     1776, 1776, 1777, 1777, 1778, 1778, 1779, 1779, 1773, 1779,
     1786, 1779, 1775, 1780, 1780, 1796, 1777, 1797, 1778, 1781,
     1781, 1782, 1782, 1783, 1783, 1784, 1784, 1799, 1780, 1787,
     1787, 1788, 1788, 1800, 1781, 1789, 1789, 1805, 1783, 1790,
     1790, 1791, 1791, 1806, 1787, 1792, 1792, 1793, 1793, 1808,
     1789, 1794, 1794, 1809, 1790, 1810, 1791, 1795, 1795, 1798,
     1798, 1817, 1793, 1801, 1801, 1818, 1794, 1802, 1802, 1803,
     1803, 1804, 1804, 1807, 1807, 1811, 1811, 1801, 1812, 1812,
     1813, 1813, 1824, 1803, 1814, 1814, 1835, 1807, 1836, 1811,
     1815, 1815, 1837, 1815, 1842, 1815, 1816, 1816, 1814, 1816,

     1843, 1816, 1819, 1819, 1820, 1820, 1821, 1821, 1822, 1822,
     1823, 1823, 1825, 1825, 1826, 1826, 1846, 1819, 1827, 1827,
     1828, 1828, 1847, 1822, 1829, 1829, 1851, 1825, 1830, 1830,
     1831, 1831, 1852, 1827, 1832, 1832, 1833, 1833, 1857, 1829,
     1834, 1834, 1839, 1839, 1840, 1840, 1841, 1841, 1864, 1832,
     1844, 1844, 1845, 1845, 1848, 1848, 1849, 1849, 1840, 1855,
     1855, 1856, 1856, 1865, 1844, 1825, 1850, 1850, 1848, 1850,
     1866, 1850, 1858, 1858, 1859, 1859, 1860, 1860, 1861, 1861,
     1862, 1862, 1863, 1863, 1867, 1867, 1868, 1858, 1869, 1870,
     1870, 1860, 1871, 1872, 1873, 1873, 1874, 1874, 1877, 1878,

     1878, 1879, 1879, 1880, 1880, 1881, 1882, 1883, 1873, 1884,
     1885, 1886, 1887, 1888, 1888, 1889, 1879, 1890, 1890, 1891,
     1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901,
     1902, 1903, 1904, 1905, 1906, 1907, 1907, 1908, 1908, 1909,
     1910, 1911, 1912, 1913, 1914, 1915, 1915, 1916, 1916, 1920,
     1907, 1921, 1908, 1917, 1917, 1918, 1918, 1922, 1923, 1927,
     1915, 1924, 1924, 1925, 1925, 1926, 1926, 1928, 1917, 1929,
     1929, 1930, 1930, 1931, 1931, 1933, 1924, 1932, 1932, 1934,
     1934, 1935, 1935, 1929,  722, 1930, 1936, 1936, 1931, 1937,
     1937, 1938, 1938, 1934,  719, 1935, 1939, 1939, 1940, 1940,

     1941, 1941,  718, 1937, 1942, 1942, 1943, 1943, 1944, 1944,
     1945, 1945, 1940,  717, 1941, 1946, 1946, 1947, 1947, 1948,
     1948,  716,  715,  714, 1945, 1950, 1950, 1950, 1950, 1950,
     1951, 1951, 1951, 1951, 1951, 1952, 1952, 1952, 1952, 1952,
     1953, 1953, 1953, 1953, 1953, 1954, 1954, 1954, 1954, 1954,
     1955, 1955, 1955, 1955, 1955, 1956, 1956, 1956, 1956, 1956,
     1957, 1957, 1957, 1957, 1957, 1958, 1958, 1958, 1958, 1959,
      713, 1959, 1959, 1959, 1960, 1960,  712, 1960, 1960, 1961,
     1961, 1961,  709, 1961,  708,  707,  703,  702,  701,  700,
      699,  698,  694,  693,  691,  690,  685,  684,  683,  682,

      681,  680,  679,  678,  677,  676,  673,  672,  671,  670,
      669,  668,  667,  666,  664,  663,  657,  653,  650,  649,
      647,  646,  644,  643,  642,  641,  640,  639,  638,  637,
      636,  634,  633,  632,  628,  627,  626,  625,  624,  623,
      622,  621,  620,  617,  616,  615,  611,  610,  609,  608,
      607,  606,  605,  604,  603,  602,  601,  600,  599,  598,
      597,  596,  595,  594,  593,  591,  590,  589,  588,  587,
      586,  585,  581,  580,  579,  578,  577,  576,  575,  574,
      573,  572,  571,  567,  566,  562,  561,  556,  555,  553,
      552,  551,  550,  549,  548,  547,  546,  544,  542,  541,

      540,  539,  538,  537,  536,  535,  534,  531,  530,  528,
      527,  525,  523,  522,  521,  520,  516,  515,  514,  513,
      512,  511,  510,  509,  508,  507,  506,  505,  504,  502,
      501,  500,  499,  498,  497,  496,  495,  494,  493,  492,
      488,  487,  485,  483,  482,  479,  477,  476,  475,  474,
      473,  472,  471,  470,  469,  468,  467,  465,  464,  463,
      462,  461,  460,  459,  458,  457,  454,  452,  451,  450,
      448,  447,  446,  445,  444,  443,  442,  441,  440,  439,
      438,  437,  435,  434,  430,  429,  428,  424,  423,  420,
      419,  418,  417,  415,  414,  413,  412,  408,  407,  406,

      405,  404,  403,  402,  401,  400,  394,  393,  392,  391,
      383,  382,  381,  380,  379,  378,  377,  375,  374,  373,
      372,  371,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  361,  360,  358,  357,  355,  354,  353,  350,  349,
      348,  347,  346,  345,  344,  343,  342,  341,  339,  338,
      337,  336,  335,  334,  333,  331,  330,  329,  328,  326,
      325,  323,  322,  320,  319,  318,  317,  316,  315,  313,
      312,  311,  309,  308,  307,  305,  304,  303,  302,  299,
      298,  297,  294,  293,  292,  291,  290,  289,  288,  287,
      284,  283,  282,  281,  275,  274,  273,  272,  270,  269,

      268,  267,  265,  264,  262,  261,  259,  258,  257,  256,
      255,  254,  253,  252,  251,  250,  248,  247,  246,  244,
      243,  242,  241,  240,  239,  238,  237,  235,  234,  233,
      232,  231,  229,  228,  227,  226,  225,  223,  221,  220,
      219,  218,  217,  216,  215,  214,  213,  212,  211,  210,
      209,  208,  207,  206,  205,  202,  201,  200,  199,  198,
      197,  195,  193,  192,  191,  190,  189,  188,  187,  186,
      185,  184,  183,  182,  180,  179,  178,  177,  173,  172,
      171,  170,  169,  167,  165,  164,  163,  162,  161,  160,
      159,  158,  157,  156,  155,  154,  153,  152,  151,  150,

      149,  146,  145,  144,  143,  142,  141,  139,  138,  134,
      132,  131,  130,  129,  127,  126,  122,  120,  117,  115,
      114,  113,  112,  111,  110,  109,  108,  107,  106,  105,
      104,  103,  102,  100,   95,   94,   92,   88,   86,   85,
       84,   83,   81,   80,   76,   72,   65,   64,   63,   61,
       60,   58,   56,   55,   53,   52,   48,   43,   40,   32,
       31,   27,   24,   22,   19,   14,   13,    8,    7,    6,
        5,    4,    3, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,

     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949, 1949,
     1949, 1949, 1949, 1949, 1949, 1949
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[257] =
    {   0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
/* $Id$ */
/** @file parseosrl.l
 * 
 * @author  Horand Gassmann, Jun Ma, Kipp Martin 
 *
 * \remarks
 * Copyright (C) 2005-2011, Horand Gassmann, Jun Ma, Kipp Martin,
 * Dalhousie University, Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 15 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"

#include "OSConfig.h"

#include <iostream>
#include <sstream> 
 
#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif

#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif

#ifdef HAVE_CMATH
# include <cmath>
#else
# ifdef HAVE_MATH_H
#  include <math.h>
# else
#  error "don't have header file for math"
# endif
#endif
 

//#define PARSERDEBUG

#ifdef PARSERDEBUG
	#define YY_PRINT  printf("%s", yytext);
#else     
	#define YY_PRINT ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif

#include "OSErrorClass.h"
#include "OSMathUtil.h"
#include "OSGeneral.h"
#include "OSParseosrl.tab.hpp"
#include "OSResult.h"
#include "OSrLParserData.h"

using std::cout;
using std::endl;
using std::ostringstream;
     








#line 103 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
#define YY_EXTRA_TYPE OSrLParserData*
#line 1898 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.cpp"

#define INITIAL 0
#define osrlattributetext 1
#define doublequoteattributetext 2
#define singlequoteattributetext 3
#define startelement 4
#define elementtext 5
#define itemtext 6
#define comment 7
#define xmldeclaration 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int osrllex_init (yyscan_t* scanner);

int osrllex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int osrllex_destroy (yyscan_t yyscanner );

int osrlget_debug (yyscan_t yyscanner );

void osrlset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osrlget_extra (yyscan_t yyscanner );

void osrlset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osrlget_in (yyscan_t yyscanner );

void osrlset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osrlget_out (yyscan_t yyscanner );

void osrlset_out  (FILE * out_str ,yyscan_t yyscanner );

int osrlget_leng (yyscan_t yyscanner );

char *osrlget_text (yyscan_t yyscanner );

int osrlget_lineno (yyscan_t yyscanner );

void osrlset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * osrlget_lval (yyscan_t yyscanner );

void osrlset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *osrlget_lloc (yyscan_t yyscanner );
    
        void osrlset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int osrlwrap (yyscan_t yyscanner );
#else
extern int osrlwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int osrllex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int osrllex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 113 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"



#line 2154 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osrlensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osrl_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1950 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3074 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 116 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"

	YY_BREAK
/* General patterns matched in more than one element */
case 2:
YY_RULE_SETUP
#line 120 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(QUOTE);}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 121 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  yylval->sval = yytext; return(TWOQUOTES);}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 122 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;     return(GREATERTHAN);}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 123 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; yylval->ival = atoi(yytext); return(INTEGER);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 125 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; 
char *yytextEnd;
yylval->dval = os_strtod_wrap( yytext, &yytextEnd);
	/*
	if( (unsigned)(yytextEnd - yytext) != strlen( yytext)){
		std::ostringstream outStr;
		outStr << "encountered a spurious character in the lexer" << endl;
		outStr << "The first character is: ";
		outStr <<  yytext;
		outStr << endl;
		outStr << "See line number: " << yylineno << endl;  
		throw ErrorClass( outStr.str());
	}
	*/
return(DOUBLE);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 141 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDOFELEMENT);}
	YY_BREAK
/* attributes returning numeric values*/
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 145 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONATT);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 146 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFCONSTRAINTSATT);}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 147 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFELATT);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 148 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFENUMERATIONSATT);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 149 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFIDXATT);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 150 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(NUMBEROFITEMSATT);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 151 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJATT);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 152 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOBJECTIVESATT);}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 153 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERCONSTRAINTRESULTSATT);}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 154 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHEROBJECTIVERESULTSATT);}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 155 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERRESULTSATT);}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 156 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERSOLUTIONRESULTSATT);}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 157 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFOTHERVARIABLERESULTSATT);}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 158 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLUTIONSATT);}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 159 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSOLVEROUTPUTSATT);}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 160 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFSUBSTATUSESATT);}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 161 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFTIMESATT);}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 162 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARATT);}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 163 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIABLESATT);}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 164 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(NUMBEROFVARIDXATT);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 166 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXATT);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 167 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(INCRATT);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 168 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(MULTATT);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 169 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SIZEOFATT);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 170 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TARGETOBJECTIVEIDXATT);}
	YY_BREAK
/* attributes returning strings (that are potentially empty)*/
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 174 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 175 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCATEGORYATT);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 176 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 177 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CATEGORYATT);}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 178 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 179 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYDESCRIPTIONATT);}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 180 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 181 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(DESCRIPTIONATT);}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 182 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 183 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYNAMEATT);}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 184 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 185 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(NAMEATT);}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 186 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTARGETOBJECTIVENAMEATT);}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 187 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTARGETOBJECTIVENAMEATT);}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 188 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TARGETOBJECTIVENAMEATT);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 189 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TARGETOBJECTIVENAMEATT);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 190 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 191 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYCONTYPEATT);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 192 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 193 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(CONTYPEATT);}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 194 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 195 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYENUMTYPEATT);}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 196 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 197 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(ENUMTYPEATT);}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 198 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 199 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYOBJTYPEATT);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 200 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 201 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(OBJTYPEATT);}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 202 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 203 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYTYPEATT);}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 204 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 205 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(TYPEATT);}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 206 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 207 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYUNITATT);}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 208 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(UNITATT);}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 209 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(UNITATT);}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 210 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 211 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVALUEATT);}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 212 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 213 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VALUEATT);}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 214 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 215 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYVARTYPEATT);}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 216 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 217 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(VARTYPEATT);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 218 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYWEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 219 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(EMPTYWEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 220 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN doublequoteattributetext; return(WEIGHTEDOBJECTIVESATT);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 221 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN singlequoteattributetext; return(WEIGHTEDOBJECTIVESATT);}
	YY_BREAK
/* top level elements */
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 225 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{return(OSRLSTARTEMPTY);}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 226 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; BEGIN osrlattributetext;  return(OSRLSTART);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 227 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OSRLEND);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 229 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(HEADERSTART);}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 230 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(HEADEREND);}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 232 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTART);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 233 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALEND);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 235 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMSTART);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 236 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SYSTEMEND);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 238 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICESTART);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 239 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SERVICEEND);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 241 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(JOBSTART);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 242 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(JOBEND);}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 244 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSTART);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 245 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONEND);}
	YY_BREAK
/* Remaining elements, sorted alpabetically. */
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 250 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ACTUALSTARTTIMESTART);}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 251 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ACTUALSTARTTIMEEND);}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 252 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATEQUALITYSTART);}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 253 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATEQUALITYEND);}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 254 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATLOWERSTART);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 255 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATLOWEREND);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 256 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATUPPERSTART);}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 257 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ATUPPEREND);}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 258 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLECPUNUMBERSTART);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 259 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLECPUNUMBEREND);}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 260 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLECPUSPEEDSTART);}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 261 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLECPUSPEEDEND);}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 262 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLEDISKSPACESTART);}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 263 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLEDISKSPACEEND);}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 264 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(AVAILABLEMEMORYSTART);}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 265 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(AVAILABLEMEMORYEND);}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 266 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASE64START);}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 267 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASE64END);}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 268 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASICSTART);}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 269 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASICEND);}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 270 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BASISSTATUSSTART);}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 271 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASISSTATUSEND);}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 272 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(BASSTATUSSTART);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 273 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(BASSTATUSEND);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 274 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTART);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 275 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONEND);}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 276 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSSTART);}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 277 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(CONSTRAINTSEND);}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 278 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTJOBCOUNTSTART);}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 279 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTJOBCOUNTEND);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 280 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTSTATESTART);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 281 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(CURRENTSTATEEND);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 282 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESSTART);}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 283 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(DUALVALUESEND);}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 284 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ELSTART);}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 285 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ELEND);}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 286 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDTIMESTART);}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 287 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENDTIMEEND);}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 288 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENUMERATIONSTART);}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 289 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(ENUMERATIONEND);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 290 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSSTART);}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 291 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(GENERALSTATUSEND);}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 292 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMESTART);}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 293 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(INSTANCENAMEEND);}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 294 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXSTART);}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 295 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(IDXEND);}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 296 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ISFREESTART);}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 297 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(ISFREEEND);}
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 298 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDSTART);}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 299 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(JOBIDEND);}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 300 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGESTART);}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 301 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(MESSAGEEND);}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 302 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJSTART);}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 303 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJEND);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 304 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESSTART);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 305 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OBJECTIVESEND);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 306 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OPTIMIZATIONSOLUTIONSTATUSSTART);}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 307 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OPTIMIZATIONSOLUTIONSTATUSEND);}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 308 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSTART);}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 309 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHEREND);}
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 310 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERRESULTSSTART);}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 311 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERRESULTSEND);}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 312 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSTART);}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 313 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLUTIONRESULTEND);}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 314 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSSTART);}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 315 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(OTHERSOLUTIONRESULTSEND);}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 316 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLVEROUTPUTSTART);}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 317 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(OTHERSOLVEROUTPUTEND);}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 318 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SCHEDULEDSTARTTIMESTART);}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 319 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SCHEDULEDSTARTTIMEEND);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 320 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMESTART);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 321 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICENAMEEND);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 322 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURISTART);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 323 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEURIEND);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 324 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEUTILIZATIONSTART);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 325 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SERVICEUTILIZATIONEND);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 326 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONSTART);}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 327 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SOLUTIONEND);}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 328 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVERINVOKEDSTART);}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 329 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVERINVOKEDEND);}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 330 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVEROUTPUTSTART);}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 331 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SOLVEROUTPUTEND);}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 332 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSSTART);}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 333 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(STATUSEND);}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 334 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBMITTIMESTART);}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 335 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBMITTIMEEND);}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 336 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBSTATUSSTART);}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 337 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SUBSTATUSEND);}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 338 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SUPERBASICSTART);}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 339 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(SUPERBASICEND);}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 340 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SYSTEMINFORMATIONSTART);}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 341 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(SYSTEMINFORMATIONEND);}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 342 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTART);}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 343 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMEEND);}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 344 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESERVICESTARTEDSTART);}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 345 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESERVICESTARTEDEND);}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 346 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTAMPSTART);}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 347 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMESTAMPEND);}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 348 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(TIMINGINFORMATIONSTART);}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 349 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TIMINGINFORMATIONEND);}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 350 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TOTALJOBSSOFARSTART);}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 351 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(TOTALJOBSSOFAREND);}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 352 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(UNKNOWNSTART);}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 353 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(UNKNOWNEND);}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 354 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUNUMBERSTART);}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 355 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUNUMBEREND);}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 356 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUSPEEDSTART);}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 357 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDCPUSPEEDEND);} 
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 358 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDDISKSPACESTART);}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 359 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDDISKSPACEEND);}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 360 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDMEMORYSTART);}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 361 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(USEDMEMORYEND);}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 362 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESSTART);}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 363 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VALUESEND);}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 364 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VALUESSTRINGSTART);}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 365 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  return(VALUESSTRINGEND);}
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 366 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARSTART);}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 367 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VAREND);}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 368 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESSTART);}
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 369 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIABLESEND);}
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 370 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIDXSTART);}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 371 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT; return(VARIDXEND);}
	YY_BREAK
/* The <item> element and the children of the option header are treated specially because they may legitimately contain special characters */
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 376 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(ITEMEMPTY);}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 377 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(ITEMSTART);}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 378 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(ITEMEND);}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 379 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(ITEMSTARTANDEND);}
	YY_BREAK
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 381 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILENAMEEMPTY);}
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 382 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILENAMESTART);}
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 383 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILENAMEEND);}
	YY_BREAK
case 225:
/* rule 225 can match eol */
YY_RULE_SETUP
#line 384 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILENAMESTARTANDEND);}
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 386 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILESOURCEEMPTY);}
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 387 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILESOURCESTART);}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 388 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILESOURCEEND);}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 389 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILESOURCESTARTANDEND);}
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 391 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILEDESCRIPTIONEMPTY);}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 392 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILEDESCRIPTIONSTART);}
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 393 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILEDESCRIPTIONEND);}
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 394 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILEDESCRIPTIONSTARTANDEND);}
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 396 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILECREATOREMPTY);}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 397 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILECREATORSTART);}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 398 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILECREATOREND);}
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 399 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILECREATORSTARTANDEND);}
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 401 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{  YY_PRINT;  return(FILELICENCEEMPTY);}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 402 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; BEGIN itemtext; return(FILELICENCESTART);}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 403 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILELICENCEEND);}
	YY_BREAK
case 241:
/* rule 241 can match eol */
YY_RULE_SETUP
#line 404 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; return(FILELICENCESTARTANDEND);}
	YY_BREAK
/* environments and comments */
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 408 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT; yylval->sval = strdup( yytext);  yyextra->errorText = yylval->sval;  /*  yylval->sval = yytext;*/  return (ELEMENTTEXT); }
	YY_BREAK
case 243:
/* rule 243 can match eol */
YY_RULE_SETUP
#line 409 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ YY_PRINT;  yylval->sval = strdup( yytext); BEGIN 0;  yyextra->errorText = yylval->sval;    /*yylval->sval = yytext;*/  return (ITEMTEXT); }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 411 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
BEGIN comment;
	YY_BREAK
case 245:
#line 413 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 413 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 414 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 416 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
BEGIN xmldeclaration;
	YY_BREAK
case 249:
#line 418 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 418 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 419 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
BEGIN 0;
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 422 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 423 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; yylval->sval = strdup(yytext);  /*yylval->sval = yytext;*/ return(ATTRIBUTETEXT);}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 424 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{YY_PRINT;  BEGIN 0; /*yylval->sval = strdup(yytext);*/  yylval->sval = yytext; return(OSRLATTRIBUTETEXT);}
	YY_BREAK
/* error trap */
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 428 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
{ 
	std::string error;
	std::ostringstream outStr;
	outStr << "encountered a spurious character in the lexer" << std::endl;
	outStr << "The first character is: ";
	outStr <<  yytext;
	outStr << std::endl;
	outStr << "See line number: " << yylineno << std::endl;  
	error = outStr.str();
	throw ErrorClass( error);
}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 440 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"
ECHO;
	YY_BREAK
#line 3806 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(osrlattributetext):
case YY_STATE_EOF(doublequoteattributetext):
case YY_STATE_EOF(singlequoteattributetext):
case YY_STATE_EOF(startelement):
case YY_STATE_EOF(elementtext):
case YY_STATE_EOF(itemtext):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(xmldeclaration):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * osrllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( osrlwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of osrllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osrlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osrlrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osrlrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1950 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1950 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1949);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osrlrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( osrlwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osrlrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osrlensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osrl_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osrl_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osrl_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osrl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		osrlpop_buffer_state();
	 *		osrlpush_buffer_state(new_buffer);
     */
	osrlensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osrl_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (osrlwrap()) processing, but the only time this flag
	 * is looked at is after osrlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osrl_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osrl_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osrlalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osrl_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osrl_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osrl_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osrlfree((void *) b->yy_ch_buf ,yyscanner );

	osrlfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osrlrestart() or at EOF.
 */
    static void osrl_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osrl_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osrl_init_buffer was _probably_
     * called from osrlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osrl_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osrl_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void osrlpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osrlensure_buffer_stack(yyscanner);

	/* This block is copied from osrl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osrl_switch_to_buffer. */
	osrl_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void osrlpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osrl_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osrlensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osrlrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osrlensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osrl_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osrlalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osrl_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to osrllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osrl_scan_bytes() instead.
 */
YY_BUFFER_STATE osrl_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osrl_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to osrllex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osrl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osrlalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osrl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osrl_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osrl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osrlget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osrlget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osrlget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osrlget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osrlget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osrlget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osrlset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osrlset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osrlset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osrl_switch_to_buffer
 */
void osrlset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osrlset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osrlget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osrlset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * osrlget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void osrlset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *osrlget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void osrlset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* osrllex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int osrllex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* osrllex_init_extra has the same functionality as osrllex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osrlalloc in
 * the yyextra field.
 */

int osrllex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osrlset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osrlalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osrlset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from osrllex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * osrllex_init()
     */
    return 0;
}

/* osrllex_destroy is for both reentrant and non-reentrant scanners. */
int osrllex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osrl_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		osrlpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osrlfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osrlfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * osrllex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osrlfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osrlalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osrlrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osrlfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osrlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 440 "/home/gus/research/OS/trunk-work/OS/src/OSParsers/OSParseosrl.l"






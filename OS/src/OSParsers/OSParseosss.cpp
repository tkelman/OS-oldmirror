#line 2 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.cpp"

#line 4 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE osssrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE ossslex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via osssrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void osssrestart (FILE *input_file ,yyscan_t yyscanner );
void osss_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE osss_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void osss_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void osss_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void ossspush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void ossspop_buffer_state (yyscan_t yyscanner );

static void osssensure_buffer_stack (yyscan_t yyscanner );
static void osss_load_buffer_state (yyscan_t yyscanner );
static void osss_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER osss_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE osss_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE osss_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE osss_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *osssalloc (yy_size_t ,yyscan_t yyscanner );
void *osssrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void osssfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer osss_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        osssensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osss_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        osssensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            osss_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define ossswrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 60
#define YY_END_OF_BUFFER 61
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[568] =
    {   0,
        1,    1,   61,   59,    1,    1,   59,    8,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,    1,    0,    7,    0,    0,    0,
        0,    6,    0,    0,    0,    0,    0,    0,    0,    0,
       16,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   18,    0,    5,    0,
        0,    0,    0,   40,    0,    0,    0,    0,    0,    0,
       17,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   39,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   42,    0,    0,    0,
        0,    0,   38,    0,    0,   40,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    4,    0,    0,
        0,    0,   41,    0,    0,    0,    0,    0,   37,    0,
        0,   39,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   42,    0,    0,    0,    0,
        0,   38,   20,    0,    0,   25,    0,    0,    0,    0,
       34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   41,    0,    0,    0,    0,    0,   37,
       19,    0,    0,   24,    0,    0,    0,    0,   33,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   58,    0,
        0,    0,   20,    0,    0,   25,    0,    0,    0,    0,
       34,    0,    0,    0,    0,    0,   15,    0,    0,    0,
        0,    0,    0,   57,    0,    0,    0,   19,    0,    0,
       24,    0,    0,    0,    0,   33,    0,    0,    0,    0,

        0,    3,    0,    0,    0,    0,   58,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   48,    0,    0,
       14,    0,    2,    0,    0,    0,    0,   57,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   47,    0,   50,
        0,    0,    3,    0,   36,    0,   54,    0,    0,    0,
        0,    0,    0,    0,   13,    0,    0,    0,   48,    0,
       49,    0,    0,    2,    0,   35,    0,   53,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   47,    0,
       50,    0,    0,   36,    0,   54,    0,    0,    0,    0,
        0,   10,   12,    0,    0,    0,    0,    0,   49,    0,

        0,   35,    0,   53,    0,    0,    0,    0,    0,   11,
        0,    0,    0,    0,   23,   28,   30,    0,    0,    0,
        0,   12,    0,    0,    9,    0,    0,    0,   29,    0,
        0,    0,    0,   11,    0,    0,    0,   22,    0,   27,
        0,    0,   30,   32,    0,   52,    0,    0,    0,    0,
       21,    0,   26,    0,    0,   29,   31,    0,   51,    0,
        0,    0,    0,    0,   22,    0,   27,    0,   32,    0,
       52,    0,    0,    0,    0,   21,    0,   26,    0,   31,
        0,   51,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   56,    0,    0,    0,    0,    0,    0,    0,
        0,   55,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   56,   46,    0,    0,    0,    0,    0,    0,    0,
        0,   55,   45,    0,    0,    0,    0,    0,    0,    0,
        0,   46,    0,   44,    0,    0,    0,    0,   45,    0,
       43,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    4,    4,    1,    4,    1,    4,
        4,    4,    4,    1,    6,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    1,    1,
        1,    1,    7,    4,    4,    4,    4,    8,    4,    9,
        4,    4,   10,   11,    4,   12,   13,    4,   14,   15,
        4,   16,    4,    4,    4,    4,    4,    4,    4,    4,
        1,    4,    1,    1,    4,    1,   17,   18,   19,   20,

       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
        4,    4,    1,    1,    1,    4,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[41] =
    {   0,
        1,    2,    3,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2
    } ;

static yyconst flex_int16_t yy_base[648] =
    {   0,
        0,    0,  964,  965,   39,   41,   39,  965,  929,  931,
      944,  920,  934,  937,  927,  925,  924,  922,  925,  917,
      917,  913,   29,  928,   45,   48,  965,  914,  916,  929,
      920,  965,  914,  912,  911,  909,  912,  904,  904,   31,
      965,  906,  906,  899,  909,  905,  904,  896,  912,  906,
      893,   51,   50,  902,  901,  891,  896,  889,  901,  887,
      899,  888,  888,  881,  888,  880,  896,  890,  877,   53,
       58,  886,  876,  881,  869,  885,   76,  870,  884,  872,
      891,  892,  892,   85,   91,  872,  871,  870,  869,  866,
      859,  856,  855,  857,  863,  865,  855,  849,  865,   95,

      865,  873,  874,  874,   97,   99,  854,  853,  852,  851,
      848,  839,  838,  840,  849,  103,  965,  858,  965,  847,
      863,  845,  107,  111,  864,  115,  117,   81,  119,  832,
      965,  842,  845,  840,  832,  833,  827,  826,  835,  121,
      844,  833,  849,  831,  125,  130,  850,  134,  136,   93,
      138,  818,  828,  831,  830,  827,  140,  844,  814,  812,
      144,  818,  149,  840,  839,  965,  153,  806,  157,  805,
      811,  803,  161,  155,  820,  804,  806,  965,  800,  810,
      813,  810,  167,  827,  797,  795,  171,  801,  173,  823,
      822,  965,  177,  789,  181,  788,  794,  786,  185,   99,

      803,  787,  786,  189,  814,  965,  793,  781,  191,  795,
      810,  965,  195,  809,  777,  199,  807,  775,  778,  773,
      203,  803,  786,  775,  774,  783,  207,  773,  789,  770,
      766,  209,  794,  965,  773,  761,  211,  775,  790,  965,
      215,  789,  757,  219,  787,  755,  758,  753,  223,  783,
      766,  755,  764,  227,  229,  231,  754,  235,  237,  778,
      241,  777,  965,  749,  775,  965,  747,  741,  745,  771,
      965,  737,  754,  734,  233,  245,  965,  741,  741,  249,
      251,  740,  255,  257,  764,  261,  763,  965,  735,  761,
      965,  733,  727,  731,  757,  965,  723,  721,  253,  265,

      269,  273,  754,  722,  277,  752,  965,  281,  719,  718,
      718,  716,  731,  730,  285,  719,  728,  287,  743,  727,
      965,  291,  295,  741,  709,  299,  739,  965,  303,  706,
      705,  705,  703,  718,  307,  707,  716,  309,  731,  313,
      730,  729,  965,  721,  317,  727,  321,  726,  694,  693,
      325,  692,  699,  698,  327,  706,  688,  718,  965,  701,
      331,  716,  715,  965,  707,  335,  713,  339,  712,  680,
      679,  343,  678,  685,  345,  693,  675,  705,  965,  704,
      965,  687,  702,  965,  701,  965,  349,  351,  353,  357,
      359,  965,  361,  700,  687,  679,  674,  696,  965,  679,

      694,  965,  693,  965,  365,  367,  369,  373,  375,  377,
      692,  679,  671,  656,  381,  385,  389,  688,  393,  397,
      687,  965,  655,  659,  965,  651,  401,  405,  409,  683,
      413,  417,  682,  965,  650,  654,  663,  421,  678,  425,
      677,  676,  965,  429,  675,  433,  674,  653,  657,  655,
      437,  509,  441,  505,  501,  965,  445,  497,  449,  492,
      471,  475,  460,  480,  965,  479,  965,  471,  965,  448,
      965,  418,  453,  417,  436,  965,  432,  965,  428,  965,
      424,  965,  394,  455,  457,  391,  459,  461,  387,  464,
      466,  470,  392,  119,  388,   45,  472,  476,  384,  440,

      380,  164,  478,  392,  487,  357,  361,  354,  345,  343,
      337,  498,  352,  502,  313,  315,  308,  299,  301,  297,
      316,  965,  506,  312,  302,  279,  284,  265,  275,  253,
      280,  965,  510,  276,  266,  245,  250,  227,  235,  211,
      236,  965,  204,  965,  200,  198,  198,  210,  965,  176,
      965,  176,  174,  168,  163,  156,  147,  140,  147,  115,
      124,   87,   77,   52,   43,   28,  965,  514,  516,  518,
      520,  523,  524,  526,  529,  531,  533,  534,  536,  538,
      541,  543,  544,  546,  548,  550,  553,  555,  557,  558,
      561,  563,  565,  566,  569,  570,  572,  575,  576,  578,

      581,  582,  584,  587,  588,  591,  592,  594,  597,  599,
      601,  603,  604,  607,  609,  611,  612,  614,  617,  618,
      621,  622,  624,  627,  628,  630,  632,  634,  637,  638,
      640,  643,  645,  647,  649,  651,  653,  655,  657,  658,
      660,  663,  664,  667,  668,  671,  673
    } ;

static yyconst flex_int16_t yy_def[648] =
    {   0,
      567,    1,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  568,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,

      567,  567,  567,  567,  567,  569,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  570,  567,  567,  567,  567,
      567,  567,  571,  568,  572,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  573,
      567,  567,  567,  567,  574,  569,  575,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  570,  576,  567,  567,
      567,  567,  571,  577,  572,  567,  578,  567,  579,  567,
      567,  567,  580,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  573,  581,  567,  567,  567,  567,  574,  582,
      575,  567,  583,  567,  584,  567,  567,  567,  585,  567,

      567,  567,  567,  567,  576,  567,  567,  567,  586,  567,
      577,  567,  578,  587,  567,  579,  588,  567,  567,  567,
      580,  589,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  581,  567,  567,  567,  590,  567,  582,  567,
      583,  591,  567,  584,  592,  567,  567,  567,  585,  593,
      567,  567,  567,  567,  567,  594,  567,  567,  586,  595,
      567,  587,  567,  567,  588,  567,  567,  567,  567,  589,
      567,  567,  567,  567,  567,  596,  567,  567,  567,  567,
      597,  567,  567,  590,  598,  567,  591,  567,  567,  592,
      567,  567,  567,  567,  593,  567,  567,  567,  567,  599,

      600,  594,  601,  567,  602,  595,  567,  603,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  596,  604,  567,
      567,  605,  597,  606,  567,  607,  598,  567,  608,  567,
      567,  567,  567,  567,  567,  567,  567,  599,  609,  600,
      610,  601,  567,  567,  602,  611,  603,  612,  567,  567,
      567,  567,  567,  567,  613,  567,  567,  604,  567,  567,
      605,  614,  606,  567,  567,  607,  615,  608,  616,  567,
      567,  567,  567,  567,  617,  567,  567,  609,  567,  610,
      567,  567,  611,  567,  612,  567,  567,  567,  618,  567,
      567,  567,  613,  619,  567,  567,  567,  614,  567,  567,

      615,  567,  616,  567,  567,  567,  620,  567,  567,  617,
      621,  567,  567,  567,  622,  623,  618,  624,  625,  626,
      619,  567,  567,  567,  567,  567,  627,  628,  620,  629,
      630,  631,  621,  567,  567,  567,  567,  622,  632,  623,
      633,  624,  567,  625,  634,  626,  635,  567,  567,  567,
      627,  636,  628,  637,  629,  567,  630,  638,  631,  639,
      567,  567,  567,  632,  567,  633,  567,  634,  567,  635,
      567,  567,  567,  567,  636,  567,  637,  567,  638,  567,
      639,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      640,  567,  567,  567,  567,  567,  641,  567,  567,  567,

      567,  567,  640,  642,  643,  567,  567,  567,  567,  567,
      567,  641,  644,  645,  567,  567,  567,  567,  567,  567,
      642,  567,  643,  646,  567,  567,  567,  567,  567,  567,
      644,  567,  645,  647,  567,  567,  567,  567,  567,  567,
      646,  567,  567,  567,  567,  567,  567,  647,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,    0,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,

      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567
    } ;

static yyconst flex_int16_t yy_nxt[1006] =
    {   0,
        4,    5,    6,    4,    4,    7,    8,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    9,   10,   11,
       12,   13,    4,   14,   15,   16,    4,   17,   18,   19,
       20,   21,   22,    4,   23,    4,    4,   24,    4,    4,
       25,   25,   25,   25,   26,   27,   25,   25,  551,   56,
      551,   73,   85,   85,  106,  106,   28,   29,   30,   57,
       31,   74,   32,   33,   34,  510,   35,   36,   37,   38,
       39,   59,  544,   40,   86,  511,   41,  116,  116,   60,
       87,   88,  107,   89,  544,   61,  123,  123,  108,  109,
      171,  110,   85,   85,  172,  125,  140,  140,  145,  145,

      106,  106,  197,  147,  116,  116,  198,  158,  123,  123,
      251,  164,  567,  567,  252,  567,  167,  167,  169,  169,
      173,  173,  140,  140,  566,  184,  145,  145,  168,  190,
      170,  567,  567,  565,  567,  193,  193,  195,  195,  199,
      199,  567,  567,  507,  567,  209,  209,  194,  508,  196,
      567,  567,  564,  567,  167,  167,  563,  214,  169,  169,
      562,  217,  173,  173,  561,  222,  223,  224,  567,  567,
      225,  567,  237,  237,  567,  567,  560,  567,  193,  193,
      559,  242,  195,  195,  519,  245,  199,  199,  551,  250,
      256,  256,  209,  209,  520,  260,  567,  567,  558,  567,

      567,  567,  551,  567,  567,  567,  557,  567,  276,  276,
      281,  281,  237,  237,  549,  285,  567,  567,  544,  567,
      567,  567,  556,  567,  567,  567,  544,  567,  300,  300,
      301,  301,  256,  256,  555,  303,  305,  305,  567,  567,
      542,  567,  308,  308,  316,  317,  276,  276,  554,  319,
      322,  322,  281,  281,  551,  324,  326,  326,  567,  567,
      553,  567,  329,  329,  336,  337,  300,  300,  552,  339,
      301,  301,  551,  341,  567,  567,  550,  567,  305,  305,
      549,  346,  308,  308,  532,  348,  355,  355,  567,  567,
      547,  567,  322,  322,  544,  362,  567,  567,  546,  567,

      326,  326,  545,  367,  329,  329,  544,  369,  375,  375,
      567,  567,  543,  567,  567,  567,  542,  567,  567,  567,
      522,  567,  567,  567,  540,  567,  389,  389,  355,  355,
      539,  394,  567,  567,  538,  567,  567,  567,  537,  567,
      567,  567,  536,  567,  407,  407,  375,  375,  535,  411,
      415,  415,  416,  416,  389,  389,  532,  418,  419,  419,
      420,  420,  567,  567,  530,  567,  427,  427,  428,  428,
      407,  407,  529,  430,  431,  431,  432,  432,  567,  567,
      528,  567,  415,  415,  527,  439,  416,  416,  526,  441,
      567,  567,  525,  567,  419,  419,  522,  445,  420,  420,

      518,  447,  427,  427,  515,  452,  428,  428,  509,  454,
      567,  567,  506,  567,  431,  431,  498,  458,  432,  432,
      492,  460,  567,  567,  489,  567,  567,  567,  482,  567,
      567,  567,  480,  567,  567,  567,  478,  567,  567,  567,
      476,  567,  567,  567,  488,  567,  567,  567,  486,  567,
      567,  567,  471,  567,  487,  487,  490,  490,  491,  491,
      487,  487,  497,  497,  516,  490,  490,  491,  491,  517,
      504,  505,  505,  497,  497,  469,  513,  514,  514,  567,
      567,  493,  567,  467,  465,  494,  499,  485,  505,  505,
      500,  524,  495,  496,  484,  483,  482,  501,  502,  567,

      567,  480,  567,  514,  514,  456,  534,  567,  567,  478,
      567,  567,  567,  476,  567,  124,  124,  146,  146,  157,
      157,  163,  163,  165,  165,  183,  183,  189,  189,  191,
      191,  205,  205,  211,  211,  213,  213,  216,  216,  221,
      221,  233,  233,  239,  239,  241,  241,  244,  244,  249,
      249,  259,  259,  262,  262,  265,  265,  270,  270,  284,
      284,  287,  287,  290,  290,  295,  295,  302,  302,  306,
      306,  318,  318,  323,  323,  327,  327,  338,  338,  340,
      340,  342,  342,  345,  345,  347,  347,  358,  358,  361,
      361,  363,  363,  366,  366,  368,  368,  378,  378,  380,

      380,  383,  383,  385,  385,  393,  393,  398,  398,  401,
      401,  403,  403,  410,  410,  417,  417,  421,  421,  429,
      429,  433,  433,  438,  438,  440,  440,  442,  442,  444,
      444,  446,  446,  451,  451,  453,  453,  455,  455,  457,
      457,  459,  459,  464,  464,  466,  466,  468,  468,  470,
      470,  475,  475,  477,  477,  479,  479,  481,  481,  503,
      503,  512,  512,  521,  521,  523,  523,  531,  531,  533,
      533,  541,  541,  548,  548,  474,  473,  472,  471,  469,
      443,  467,  465,  463,  462,  461,  434,  456,  450,  449,
      448,  422,  443,  437,  436,  435,  434,  404,  402,  426,

      399,  425,  424,  423,  422,  386,  384,  414,  381,  379,
      413,  412,  409,  408,  406,  405,  404,  402,  400,  364,
      399,  397,  359,  396,  395,  392,  391,  390,  388,  387,
      386,  384,  382,  343,  381,  379,  377,  376,  374,  373,
      372,  371,  370,  328,  365,  364,  360,  359,  357,  356,
      354,  353,  352,  351,  350,  349,  307,  344,  343,  335,
      334,  296,  333,  332,  331,  291,  330,  288,  328,  325,
      321,  320,  315,  314,  313,  271,  312,  311,  310,  266,
      309,  263,  307,  304,  299,  298,  297,  296,  294,  293,
      292,  291,  289,  288,  240,  286,  283,  282,  234,  280,

      279,  278,  277,  275,  274,  273,  272,  271,  269,  268,
      267,  266,  264,  263,  212,  261,  258,  257,  206,  255,
      254,  253,  248,  247,  246,  243,  192,  240,  238,  236,
      235,  234,  232,  231,  230,  229,  228,  227,  226,  220,
      219,  218,  215,  166,  212,  210,  208,  207,  206,  204,
      203,  202,  201,  200,  192,  188,  187,  186,  185,  182,
      181,  180,  179,  178,  177,  176,  175,  174,  166,  162,
      161,  160,  159,  156,  155,  154,  153,  152,  151,  150,
      149,  148,  144,  143,  142,  141,  139,  138,  137,  136,
      135,  134,  133,  132,  131,  130,  129,  128,  127,  126,

      122,  121,  120,  119,  118,  117,  115,  114,  113,  112,
      111,  105,  104,  103,  102,  101,  100,   99,   98,   97,
       96,   95,   94,   93,   92,   91,   90,   84,   83,   82,
       81,   80,   79,   78,   77,   76,   75,   72,   71,   70,
       69,   68,   67,   66,   65,   64,   63,   62,   58,   55,
       54,   53,   52,   51,   50,   49,   48,   47,   46,   45,
       44,   43,   42,  567,    3,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,

      567,  567,  567,  567,  567
    } ;

static yyconst flex_int16_t yy_chk[1006] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        5,    5,    6,    6,    7,    7,   25,   25,  566,   23,
      565,   40,   52,   52,   70,   70,    7,    7,    7,   23,
        7,   40,    7,    7,    7,  496,    7,    7,    7,    7,
        7,   26,  564,    7,   53,  496,    7,   77,   77,   26,
       53,   53,   71,   53,  563,   26,   84,   84,   71,   71,
      128,   71,   85,   85,  128,   85,  100,  100,  105,  105,

      106,  106,  150,  106,  116,  116,  150,  116,  123,  123,
      200,  123,  124,  124,  200,  124,  126,  126,  127,  127,
      129,  129,  140,  140,  562,  140,  145,  145,  126,  145,
      127,  146,  146,  561,  146,  148,  148,  149,  149,  151,
      151,  157,  157,  494,  157,  161,  161,  148,  494,  149,
      163,  163,  560,  163,  167,  167,  559,  167,  169,  169,
      558,  169,  173,  173,  557,  173,  174,  174,  183,  183,
      174,  183,  187,  187,  189,  189,  556,  189,  193,  193,
      555,  193,  195,  195,  502,  195,  199,  199,  554,  199,
      204,  204,  209,  209,  502,  209,  213,  213,  553,  213,

      216,  216,  552,  216,  221,  221,  550,  221,  227,  227,
      232,  232,  237,  237,  548,  237,  241,  241,  547,  241,
      244,  244,  546,  244,  249,  249,  545,  249,  254,  254,
      255,  255,  256,  256,  543,  256,  258,  258,  259,  259,
      541,  259,  261,  261,  275,  275,  276,  276,  540,  276,
      280,  280,  281,  281,  539,  281,  283,  283,  284,  284,
      538,  284,  286,  286,  299,  299,  300,  300,  537,  300,
      301,  301,  536,  301,  302,  302,  535,  302,  305,  305,
      534,  305,  308,  308,  531,  308,  315,  315,  318,  318,
      530,  318,  322,  322,  529,  322,  323,  323,  528,  323,

      326,  326,  527,  326,  329,  329,  526,  329,  335,  335,
      338,  338,  525,  338,  340,  340,  524,  340,  345,  345,
      521,  345,  347,  347,  520,  347,  351,  351,  355,  355,
      519,  355,  361,  361,  518,  361,  366,  366,  517,  366,
      368,  368,  516,  368,  372,  372,  375,  375,  515,  375,
      387,  387,  388,  388,  389,  389,  513,  389,  390,  390,
      391,  391,  393,  393,  511,  393,  405,  405,  406,  406,
      407,  407,  510,  407,  408,  408,  409,  409,  410,  410,
      509,  410,  415,  415,  508,  415,  416,  416,  507,  416,
      417,  417,  506,  417,  419,  419,  504,  419,  420,  420,

      501,  420,  427,  427,  499,  427,  428,  428,  495,  428,
      429,  429,  493,  429,  431,  431,  489,  431,  432,  432,
      486,  432,  438,  438,  483,  438,  440,  440,  481,  440,
      444,  444,  479,  444,  446,  446,  477,  446,  451,  451,
      475,  451,  453,  453,  474,  453,  457,  457,  472,  457,
      459,  459,  470,  459,  473,  473,  484,  484,  485,  485,
      487,  487,  488,  488,  500,  490,  490,  491,  491,  500,
      491,  492,  492,  497,  497,  468,  497,  498,  498,  503,
      503,  487,  503,  466,  464,  487,  490,  463,  505,  505,
      490,  505,  487,  487,  462,  461,  460,  490,  490,  512,

      512,  458,  512,  514,  514,  455,  514,  523,  523,  454,
      523,  533,  533,  452,  533,  568,  568,  569,  569,  570,
      570,  571,  571,  572,  572,  573,  573,  574,  574,  575,
      575,  576,  576,  577,  577,  578,  578,  579,  579,  580,
      580,  581,  581,  582,  582,  583,  583,  584,  584,  585,
      585,  586,  586,  587,  587,  588,  588,  589,  589,  590,
      590,  591,  591,  592,  592,  593,  593,  594,  594,  595,
      595,  596,  596,  597,  597,  598,  598,  599,  599,  600,
      600,  601,  601,  602,  602,  603,  603,  604,  604,  605,
      605,  606,  606,  607,  607,  608,  608,  609,  609,  610,

      610,  611,  611,  612,  612,  613,  613,  614,  614,  615,
      615,  616,  616,  617,  617,  618,  618,  619,  619,  620,
      620,  621,  621,  622,  622,  623,  623,  624,  624,  625,
      625,  626,  626,  627,  627,  628,  628,  629,  629,  630,
      630,  631,  631,  632,  632,  633,  633,  634,  634,  635,
      635,  636,  636,  637,  637,  638,  638,  639,  639,  640,
      640,  641,  641,  642,  642,  643,  643,  644,  644,  645,
      645,  646,  646,  647,  647,  450,  449,  448,  447,  445,
      442,  441,  439,  437,  436,  435,  433,  430,  426,  424,
      423,  421,  418,  414,  413,  412,  411,  403,  401,  400,

      398,  397,  396,  395,  394,  385,  383,  382,  380,  378,
      377,  376,  374,  373,  371,  370,  369,  367,  365,  363,
      362,  360,  358,  357,  356,  354,  353,  352,  350,  349,
      348,  346,  344,  342,  341,  339,  337,  336,  334,  333,
      332,  331,  330,  327,  325,  324,  320,  319,  317,  316,
      314,  313,  312,  311,  310,  309,  306,  304,  303,  298,
      297,  295,  294,  293,  292,  290,  289,  287,  285,  282,
      279,  278,  274,  273,  272,  270,  269,  268,  267,  265,
      264,  262,  260,  257,  253,  252,  251,  250,  248,  247,
      246,  245,  243,  242,  239,  238,  236,  235,  233,  231,

      230,  229,  228,  226,  225,  224,  223,  222,  220,  219,
      218,  217,  215,  214,  211,  210,  208,  207,  205,  203,
      202,  201,  198,  197,  196,  194,  191,  190,  188,  186,
      185,  184,  182,  181,  180,  179,  177,  176,  175,  172,
      171,  170,  168,  165,  164,  162,  160,  159,  158,  156,
      155,  154,  153,  152,  147,  144,  143,  142,  141,  139,
      138,  137,  136,  135,  134,  133,  132,  130,  125,  122,
      121,  120,  118,  115,  114,  113,  112,  111,  110,  109,
      108,  107,  104,  103,  102,  101,   99,   98,   97,   96,
       95,   94,   93,   92,   91,   90,   89,   88,   87,   86,

       83,   82,   81,   80,   79,   78,   76,   75,   74,   73,
       72,   69,   68,   67,   66,   65,   64,   63,   62,   61,
       60,   59,   58,   57,   56,   55,   54,   51,   50,   49,
       48,   47,   46,   45,   44,   43,   42,   39,   38,   37,
       36,   35,   34,   33,   31,   30,   29,   28,   24,   22,
       21,   20,   19,   18,   17,   16,   15,   14,   13,   12,
       11,   10,    9,    3,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,

      567,  567,  567,  567,  567
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[61] =
    {   0,
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 
    0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
/* $Id$ */
/** @file OSParseosss.l
 * 
 * @author  Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin
 *
 * \remarks
 * Copyright (C) 2005-2013, Robert Fourer, Horand Gassmann, Jun Ma, Kipp Martin,
 * Northwestern University, and the University of Chicago.
 * All Rights Reserved.
 * This software is licensed under the Eclipse Public License. 
 * Please see the accompanying LICENSE file in root directory for terms.
 * 
 */
#line 16 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"


#include <iostream>
#include "OSConfig.h"


#ifdef HAVE_CSTRING
# include <cstring>
#else
# ifdef HAVE_STRING_H
#  include <string.h>
# else
#  error "don't have header file for string"
# endif
#endif

#ifdef HAVE_CSTDIO
# include <cstdio>
#else
# ifdef HAVE_STDIO_H
#  include <stdio.h>
# else
#  error "don't have header file for stdio"
# endif
#endif
#include "OSErrorClass.h"
#include <sstream>   
#include "OSCommandLine.h" 


using std::cout;
using std::endl;
using std::ostringstream;

//#define PARSERDEBUG
#ifdef PARSERDEBUG
    #define YY_PRINT  printf("Found option:  %s\n", yytext);
#else     
    #define YY_PRINT  ;
#endif


#ifdef WIN_
  #define YY_NO_UNISTD_H
  #include <io.h>
  #include <process.h>
  #ifdef USE_OLD_UNISTD
     #include<sys/unistd.h>  
  #endif
#endif


#define YY_EXTRA_TYPE class OSCommandLine* 

void setyyextra( OSCommandLine* oscommandline, void* scanner);

 /**
 * INPUTS:
 * -osil xxx.osil (file name on local machine of optimization instance, 
 *       this is "" by default, however if this remains "" a problem
 *       instance must be specified in the osol file)
 * -osol xxx.osol (file name on local machine of solver options, 
 *       default default value is "")
 * -osrl xxx.osrl (file name on local machine where the optimization 
 *       result is put, default is "")
 * -serviceLocation location URL (the URL  of the server that is called 
 *       remotely if the problem not solved locally, default is "")
 * -serviceMethod  (send, solve, kill, knock, getJobID, retrieve, 
 *       default value is solve)
 * -osplInput xxx.ospl  (Not used for now -- ignore)
 * -osplOutput xxx.ospl (Not used for now -- ignore)
 * -mps xxxx.mps (converts mps format to osil and has same effect as -osil)
 * -nl xxxx.nl (converts nl format to osil and has same effect as -osil)
 * -solver solverName (the name of the solver to be invoked)
 * -browser path location to browser e.g. 
 *       /Applications/Firefox.app/Contents/MacOS/firefox (default is "")
 * -config pathToConfigFile is the path to a configure file with the problem 
 *       parameters
 * -insList xxx.dat (used only for LINDO, file location on local 
 *       machine of LINDO instruction list)
 * -printLevel nnn (to control the amount of output to send to stdout)
 * -logFile xxx.log (to send a second output stream to a file --- 
 *       in addition to stdout)
 * -filePrintLevel nnn (to control the amount of output to send to file)
 */


#line 987 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int ossslex_init (yyscan_t* scanner);

int ossslex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int ossslex_destroy (yyscan_t yyscanner );

int osssget_debug (yyscan_t yyscanner );

void osssset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE osssget_extra (yyscan_t yyscanner );

void osssset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *osssget_in (yyscan_t yyscanner );

void osssset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *osssget_out (yyscan_t yyscanner );

void osssset_out  (FILE * out_str ,yyscan_t yyscanner );

int osssget_leng (yyscan_t yyscanner );

char *osssget_text (yyscan_t yyscanner );

int osssget_lineno (yyscan_t yyscanner );

void osssset_lineno (int line_number ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int ossswrap (yyscan_t yyscanner );
#else
extern int ossswrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int ossslex (yyscan_t yyscanner);

#define YY_DECL int ossslex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 116 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"


#line 1214 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.cpp"

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			osssensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				osss_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		osss_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 568 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 965 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 118 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"

	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 122 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    YY_PRINT  
    //char *ch = strdup(yytext);
    char *ch = yytext;
    // move past -config
    ch+=7;
    for(; isspace(*ch); ch++);
    std::string str(  ch);
    if (str[0] == '\"')
        yyextra->configFile = str.substr(1,str.length()-2);
    else
        yyextra->configFile = str;
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 136 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    YY_PRINT  
    //char *ch = strdup(yytext);
    char *ch = yytext;
    // move past -config
    ch+=6;
    for(; isspace(*ch); ch++);
    std::string str(  ch);
    if (str[0] == '\"')
        yyextra->configFile = str.substr(1,str.length()-2);
    else
        yyextra->configFile = str;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 150 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    YY_PRINT  
    yyextra->invokeHelp = true;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 155 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    YY_PRINT  
    yyextra->invokeHelp = true;
 }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 160 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    YY_PRINT
    yyextra->invokeHelp = true;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 165 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    YY_PRINT
    yyextra->invokeHelp = true;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 170 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    YY_PRINT
    yyextra->invokeHelp = true;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 176 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    YY_PRINT  
    yyextra->printModel = true;
 }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 182 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    YY_PRINT  
    yyextra->printModel = true;
 }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 187 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    //if(yyextra->printRow == ""){
        YY_PRINT 
        //yyextra->printRowNumberAsString = strdup(yytext);
        yyextra->printRowNumberAsString =  yytext;
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past -printRow
        ch+=9;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        yyextra->printRowNumberAsString = str; 
    //}
}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 202 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    //if(yyextra->printRow == ""){
        YY_PRINT 
        //yyextra->printRowNumberAsString = strdup(yytext);
        yyextra->printRowNumberAsString =  yytext;
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past printRow
        ch+=8;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        yyextra->printRowNumberAsString = str; 
    //}
}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 217 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    //if(yyextra->printRow == ""){
        YY_PRINT 
        //yyextra->printRowNumberAsString = strdup(yytext);
        yyextra->printRowNumberAsString =  yytext;
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past printRow
        ch+=8;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        yyextra->printRowNumberAsString = str; 
    //}
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 233 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    YY_PRINT  
    yyextra->writeVersion = true;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 238 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    YY_PRINT  
    yyextra->writeVersion = true;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 243 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    YY_PRINT 
    yyextra->writeVersion = true;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 249 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
   YY_PRINT  
   yyextra->quit = true;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 254 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
   YY_PRINT  
   yyextra->quit = true;
}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 260 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    //if(yyextra->osilFile == ""){
        YY_PRINT  
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past -osil
        ch+=5;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->osilFile = str.substr(1,str.length()-2);
        else
            yyextra->osilFile = str;
    //} 
}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 276 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    // if(yyextra->osilFile == ""){
        YY_PRINT  
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past osil
        ch+=4;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->osilFile = str.substr(1,str.length()-2);
        else
            yyextra->osilFile = str;
    // } 
 }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 292 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT 
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past -osilOutput
        ch+=11;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        yyextra->osilOutputFile = str;  
}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 303 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
         YY_PRINT 
         //char *ch = strdup(yytext);
         char *ch = yytext;
         // move past osilOutput
         ch+=10;
         for(; isspace(*ch); ch++);
         std::string str(  ch);
         yyextra->osilOutputFile = str;  
}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 314 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
         YY_PRINT 
         //char *ch = strdup(yytext);
         char *ch = yytext;
         // move past osilOutput
         ch+=10;
         for(; isspace(*ch); ch++);
         std::string str(  ch);
         yyextra->osilOutputFile = str;  
}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 325 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    //if(yyextra->osolFile == ""){
        YY_PRINT 
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past -osol
        ch+=5;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->osolFile = str.substr(1,str.length()-2);
        else
            yyextra->osolFile = str;
    //}
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 341 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    //if(yyextra->osolFile == ""){
        YY_PRINT 
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past osol
        ch+=4;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->osolFile = str.substr(1,str.length()-2);
        else
            yyextra->osolFile = str;
    //}
}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 357 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT 
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past -osolOutput
        ch+=11;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->osolOutputFile = str.substr(1,str.length()-2);
        else
            yyextra->osolOutputFile = str;
}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 371 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT 
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past osolOutput
        ch+=10;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->osolOutputFile = str.substr(1,str.length()-2);
        else
            yyextra->osolOutputFile = str;
}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 385 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
         YY_PRINT 
         //char *ch = strdup(yytext);
         char *ch = yytext;
         // move past osolOutput
         ch+=10;
         for(; isspace(*ch); ch++);
         std::string str(  ch);
         yyextra->osolOutputFile = str;  
}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 396 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    //if(yyextra->osplInputFile == ""){
        YY_PRINT 
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past -osplInput
        ch+=10;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->osplInputFile = str.substr(1,str.length()-2);
        else
            yyextra->osplInputFile = str;
    //}
}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 412 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT 
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past osplInput
        ch+=9;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->osplInputFile = str.substr(1,str.length()-2);
        else
            yyextra->osplInputFile = str;
}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 426 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT 
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past -osplOutput
        ch+=11;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->osplOutputFile = str.substr(1,str.length()-2);
        else
            yyextra->osplOutputFile = str;
}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 440 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT 
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past osplOutput
        ch+=10;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->osplOutputFile = str.substr(1,str.length()-2);
        else
            yyextra->osplOutputFile = str;
}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 454 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    //if(yyextra->osrlFile == ""){
        YY_PRINT 
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past -osrl
        ch+=5;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->osrlFile = str.substr(1,str.length()-2);
        else
            yyextra->osrlFile = str;
    //}  
}  
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 470 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
     //if(yyextra->osrlFile == ""){
        YY_PRINT 
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past osrl
        ch+=4;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->osrlFile = str.substr(1,str.length()-2);
        else
            yyextra->osrlFile = str;
     //}  
 }              
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 486 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past -insList
        ch+=8;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->insListFile = str.substr(1,str.length()-2);
        else
            yyextra->insListFile = str;
}  
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 500 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past insList
        ch+=7;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        yyextra->insListFile = str;
        if (str[0] == '\"')
            yyextra->insListFile = str.substr(1,str.length()-2);
        else
            yyextra->insListFile = str;
 }
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 515 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT 
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past -mps
        ch+=4;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->mpsFile = str.substr(1,str.length()-2);
        else
            yyextra->mpsFile = str;
}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 529 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT 
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past mps
        ch+=3;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->mpsFile = str.substr(1,str.length()-2);
        else
            yyextra->mpsFile = str;
}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 543 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past -nl
        ch+=3;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->nlFile = str.substr(1,str.length()-2);
        else
            yyextra->nlFile = str;
}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 557 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past nl
        ch+=2;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->nlFile = str.substr(1,str.length()-2);
        else
            yyextra->nlFile = str;
}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 571 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past -dat
        ch+=4;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->gamsControlFile = str.substr(1,str.length()-2);
        else
            yyextra->gamsControlFile = str;
}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 585 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past dat
        ch+=3;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->gamsControlFile = str.substr(1,str.length()-2);
        else
            yyextra->gamsControlFile = str;
}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 599 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past -serviceMethod
        ch+=14;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->serviceMethod = str.substr(1,str.length()-2);
        else
            yyextra->serviceMethod = str;
}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 613 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past serviceMethod
        ch+=13;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        yyextra->serviceMethod = str; 
        if (str[0] == '\"')
            yyextra->serviceMethod = str.substr(1,str.length()-2);
        else
            yyextra->serviceMethod = str;
}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 628 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT 
        //yyextra->serviceLocation = strdup(yytext);
        yyextra->serviceLocation =  yytext;
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past -serviceLocation
        ch+=16;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->serviceLocation = str.substr(1,str.length()-2);
        else
            yyextra->serviceLocation = str;
}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 644 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT 
        //yyextra->serviceLocation = strdup(yytext);
        yyextra->serviceLocation =  yytext;
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past serviceLocation
        ch+=15;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->serviceLocation = str.substr(1,str.length()-2);
        else
            yyextra->serviceLocation = str;
}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 660 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT 
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past -solver
        ch+=7;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->solverName = str.substr(1,str.length()-2);
        else
            yyextra->solverName = str;
}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 674 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT 
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past solver
        ch+=6;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->solverName = str.substr(1,str.length()-2);
        else
            yyextra->solverName = str;
}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 688 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT  
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past -browser
        ch+=8;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->browser = str.substr(1,str.length()-2);
        else
            yyextra->browser = str;
}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 702 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT  
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past browser
        ch+=7;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->browser = str.substr(1,str.length()-2);
        else
            yyextra->browser = str;
}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 716 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT  
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past browser
        ch+=11;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        std::string temp;
        if (str[0] == '\"')
            temp = str.substr(1,str.length()-2);
        else
            temp = str;
        yyextra->printLevel = atoi(temp.c_str());
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 732 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT  
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past browser
        ch+=10;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        std::string temp;
        if (str[0] == '\"')
            temp = str.substr(1,str.length()-2);
        else
            temp = str;
        yyextra->printLevel = atoi(temp.c_str());
}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 748 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT  
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past browser
        ch+=8;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->logFile = str.substr(1,str.length()-2);
        else
            yyextra->logFile = str;
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 762 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT  
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past browser
        ch+=7;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        if (str[0] == '\"')
            yyextra->logFile = str.substr(1,str.length()-2);
        else
            yyextra->logFile = str;
}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 776 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT  
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past browser
        ch+=15;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        std::string temp;
        if (str[0] == '\"')
            temp = str.substr(1,str.length()-2);
        else
            temp = str;
        yyextra->filePrintLevel = atoi(temp.c_str());
}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 792 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT  
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past browser
        ch+=14;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        std::string temp;
        if (str[0] == '\"')
            temp = str.substr(1,str.length()-2);
        else
            temp = str;
        yyextra->filePrintLevel = atoi(temp.c_str());
}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 808 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT  
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past -browser
        ch+=6;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        yyextra->jobID = str;
}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 819 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
        YY_PRINT  
        //char *ch = strdup(yytext);
        char *ch = yytext;
        // move past -browser
        ch+=5;
        for(; isspace(*ch); ch++);
        std::string str(  ch);
        yyextra->jobID = str;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 830 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
{
    std::string error;
    std::ostringstream outStr;
    outStr << "encountered a spurious character in the lexer" << endl;
    outStr << "Please make sure your options are spelled correctly" << endl;
    outStr << "Type OSSolverService -h or OSSolverService --help for valid commands" << endl;
    outStr << "The first character is: ";
    outStr <<  yytext;
    outStr << endl;
    //outStr << "See line number: " << yylineno << endl;  
    error = outStr.str();
    throw ErrorClass( error);  
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 843 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"
ECHO;
	YY_BREAK
#line 2256 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * ossslex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( ossswrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of ossslex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					osssrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			osssrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) osssrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 568 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 568 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 567);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					osssrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( ossswrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void osssrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        osssensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            osss_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	osss_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	osss_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void osss_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		ossspop_buffer_state();
	 *		ossspush_buffer_state(new_buffer);
     */
	osssensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	osss_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (ossswrap()) processing, but the only time this flag
	 * is looked at is after ossswrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void osss_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE osss_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) osssalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osss_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) osssalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in osss_create_buffer()" );

	b->yy_is_our_buffer = 1;

	osss_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with osss_create_buffer()
 * @param yyscanner The scanner object.
 */
    void osss_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		osssfree((void *) b->yy_ch_buf ,yyscanner );

	osssfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a osssrestart() or at EOF.
 */
    static void osss_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	osss_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then osss_init_buffer was _probably_
     * called from osssrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void osss_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		osss_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void ossspush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	osssensure_buffer_stack(yyscanner);

	/* This block is copied from osss_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from osss_switch_to_buffer. */
	osss_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void ossspop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	osss_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		osss_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void osssensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osssalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osssensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)osssrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in osssensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE osss_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) osssalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in osss_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	osss_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to ossslex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       osss_scan_bytes() instead.
 */
YY_BUFFER_STATE osss_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return osss_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to ossslex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE osss_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) osssalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in osss_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = osss_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in osss_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE osssget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int osssget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int osssget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *osssget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *osssget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int osssget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *osssget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void osssset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osssset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osssset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void osssset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "osssset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see osss_switch_to_buffer
 */
void osssset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void osssset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int osssget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void osssset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* ossslex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int ossslex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) osssalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* ossslex_init_extra has the same functionality as ossslex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to osssalloc in
 * the yyextra field.
 */

int ossslex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    osssset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) osssalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    osssset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from ossslex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * ossslex_init()
     */
    return 0;
}

/* ossslex_destroy is for both reentrant and non-reentrant scanners. */
int ossslex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		osss_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		ossspop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	osssfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        osssfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * ossslex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    osssfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *osssalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *osssrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void osssfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see osssrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 843 "/home/gus/research/OS/trunk-test/OS-2.8/OS/src/OSParsers/OSParseosss.l"



void setyyextra(OSCommandLine *oscommandline, void* scanner){
	osssset_extra(oscommandline, scanner);
}


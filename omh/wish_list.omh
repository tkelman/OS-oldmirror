/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-08 Bradley M. Bell

CppAD is distributed under multiple licenses. This distribution is under
the terms of the 
                    Common Public License Version 1.0.

A copy of this license is included in the COPYING file of this distribution.
Please visit http://www.coin-or.org/CppAD/ for information on other licenses.
-------------------------------------------------------------------------- */
$begin WishList$$
$spell
	Python
	xml
	hpp
	CondExp
	Vec
	Cpp
	Atan
$$

$section The CppAD Wish List$$
$index wish list$$
$index new, features$$
$index features, new$$

$head Atan2$$
$index atan2$$
The $xref/Atan2//atan2/$$ function could be made faster by adding
a special operator for it.

$head BenderQuad$$
See the $cref/problem/BenderQuad/Problem/$$ with the 
current $code BenderQuad$$ specifications.

$head CondExp$$
$index CondExp$$
Extend the conditional expressions $xref/CondExp/$$ so that they are 
valid for complex types by comparing real parts.
In addition, use this change to extend $xref/LuRatio/$$ so 
that it works with complex AD types.

$head Exceptions$$
When the function
$xref/Independent/$$ is called,  
a new tape is created.
If an exception occurs before the call to the corresponding
$xref/ADFun/$$ constructor or $cref/Dependent/$$, 
the tape recording will never stop.
Thus, there should be a way to abort a tape recording.

$head Library$$
One could build a CppAD library for use with the type $code AD<double>$$.
This would speed up compilation for the most common usage where
the $italic Base$$ type is $code double$$.

$head Operation Sequence$$
$index sequence, operation$$
$index operation, sequence$$
It is possible to detect if the 
AD of $italic Base$$ 
$xref/glossary/Operation/Sequence/operation sequence/1/$$ 
does not depend on any of the
$cref/independent variable/glossary/Tape/Independent Variable/$$ values.
This could be returned as an extra
$xref/SeqProperty/$$.

$head Optimization$$

$subhead Remove Dead Code$$
$index optimize, operation sequence$$
$index tape, optimize$$
$index sequence, optimize operations$$
$index operation, optimize sequence$$
A single $cref/RevSparseJac/$$ sweep could be used to determine
which parts of the operation sequence in an
$cref/ADFun/FunConstruct/$$ object can be removed.

$subhead Expression Hashing$$
Has codes could be used to detect expressions that have already
been computed (and avoid extra entries in the operation sequence).
This would also involve has coding the constants and avoiding
duplicate copies in the constant table.

$head Scripting Languages$$
One could develop a
SWIG compatible interface to $code AD<double>$$ and $code ADFun<double>$$ that 
would make it easy to connect the SWIG languages, e.g., Python, see, 
$href%http://www.swig.org/%SWIG%$$ for a description of SWIG
and a list of the languages.
This would require the $cref/library/WishList/Library/$$ wish list 
entry being implemented.


$head Software Guidelines$$

$subhead Boost$$
The following is a list of some software guidelines taken from
$href%http://www.boost.org/more/lib_guide.htm#Guidelines%boost%$$.
These guidelines are not followed by the current CppAD source code,
but perhaps they should be:

$list number$$
Names (except as noted below) 
should be all lowercase, with words separated by underscores.
For example, acronyms should be treated as ordinary names 
(xml_parser instead of XML_parser).

$lnext
Template parameter names should begin with an uppercase letter.

$lnext
Use spaces rather than tabs.  

$lend

$subhead Member Variables$$
Change private member variables names
(not part of the user interface)
so that they all end with an underscore.
(This has been done for all the classes except the
$code ADFun$$ template class).

$head Vector Element Type$$
Change cross references from 
$xref/SimpleVector/Elements of Specified Type/elements of a specified type/$$
to
$xref/SimpleVector/Value Type/value_type/$$.

$head Tracing$$
Add forward and reverse mode operation tracing to the developer documentation
(perhaps it will eventually become part of 
the user interface and documentation).

$head VecAD$$
Make assignment operation in $cref/VecAD/$$ like
assignment in $cref/ad_copy/$$.
This will fix slicing to $code int$$ when assigning
from $code double$$ to 
$code VecAD< AD<double> >::reference$$ object.

$end
